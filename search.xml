<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>install gitlab runner</title>
      <link href="/install-gitlab-runner/"/>
      <url>/install-gitlab-runner/</url>
      
        <content type="html"><![CDATA[<h1 id="Install-GitLab-Runner"><a href="#Install-GitLab-Runner" class="headerlink" title="Install GitLab Runner"></a><font face="黑体" color="green" size="6">Install GitLab Runner</font></h1><hr><h4 id="1、docker-install"><a href="#1、docker-install" class="headerlink" title="1、docker install"></a>1、docker install</h4><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-convenience-script" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-convenience-script</a></p><h4 id="2、runner-install"><a href="#2、runner-install" class="headerlink" title="2、runner install"></a>2、runner install</h4><p><a href="https://docs.gitlab.com/runner/install/linux-repository.html#installing-the-runner" target="_blank" rel="noopener">https://docs.gitlab.com/runner/install/linux-repository.html#installing-the-runner</a></p><p>gitlab-ce-中文版镜像：</p><blockquote><p>docker pull twang2218/gitlab-ce-zh:latest</p></blockquote><h3 id="gitlab-rb文件配置"><a href="#gitlab-rb文件配置" class="headerlink" title="gitlab.rb文件配置"></a>gitlab.rb文件配置</h3><pre class="line-numbers language-rb"><code class="language-rb">external_url 'http://git.****.com'#配置gitlab访问的URL地址gitlab_pages['inplace_chroot'] = truepages_external_url "http://io.****.com"#配置pages相关信息unicorn['port'] = 8084#默认配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动docker-容器"><a href="#启动docker-容器" class="headerlink" title="启动docker 容器"></a>启动docker 容器</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#gitlab-ce运行：</span>docker run -dit \  -p 443:443 -p 80:80 -p 22:22 \  --name gitlab \  -v /****/gitlab/config/:/etc/gitlab \  -v /****/gitlab/logs:/var/log/gitlab \  -v /****/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce<span class="token comment" spellcheck="true">#gitlab-ci gitlab-runner01运行</span>docker run -dit \  --name gitlab-runner --restart always \  -v /****/gitlab-runner/config:/etc/gitlab-runner \  -v /var/run/docker.sock:/var/run/docker.sock gitlab/gitlab-runner:latest<span class="token comment" spellcheck="true">#gitlab-runner02 运行</span>docker run -dit \  --name gitlab-runner \  --restart always \  -v /****/gitlab-runner/gitlab-runner02-config:/etc/gitlab-runner \  -v /var/run/docker.sock:/var/run/docker.sock registry.cn-beijing.aliyuncs.com/***/gitlab-runner:v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="token-查看"><a href="#token-查看" class="headerlink" title="token 查看"></a>token 查看</h3><p><a href="http://git.sys.****.com/admin/runners" target="_blank" rel="noopener">http://git.sys.****.com/admin/runners</a></p><p>vi /etc/gitlab-runner/config.toml</p><blockquote><p>privileged = true</p></blockquote><blockquote><p><a href="https://gitlab.com/" target="_blank" rel="noopener">https://gitlab.com/</a></p></blockquote><blockquote><p>Exf<strong>**</strong></p></blockquote><h3 id="配置runner"><a href="#配置runner" class="headerlink" title="配置runner"></a>配置runner</h3><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it gitlab-runner gitlab-ci-multi-runner register --locked<span class="token operator">=</span><span class="token string">"false"</span> --run-untagged<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>runner信息输出：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">[root@gitlab-ce-local config]# docker exec -it gitlab-runner gitlab-ci-multi-runner register --locked="false" --run-untagged  Runtime platform                                    arch=amd64 os=linux pid=12 revision=a8a019e0  version=12.3.0  Running in system-mode.  Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):  http://git.****.com/  Please enter the gitlab-ci token for this runner:  Geoy-M******  Please enter the gitlab-ci description for this runner:  [6990c9803207]:  Please enter the gitlab-ci tags for this runner (comma separated):  node,maven,docker  Registering runner... succeeded                     runner=Geoy-Mk7  Please enter the executor: docker-ssh, ssh, docker+machine, docker-ssh+machine, custom, parallels, shell, virtualbox, kubernetes, docker:  docker  Please enter the default Docker image (e.g. ruby:2.6):  alpine:latest  Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>runner-配置文件:<br>[root@gitlab-ce-local config]# cat config.toml</li></ul><pre class="line-numbers language-json"><code class="language-json">concurrent = <span class="token number">3</span>check_interval = <span class="token number">0</span><span class="token punctuation">[</span>session_server<span class="token punctuation">]</span>  session_timeout = <span class="token number">1800</span><span class="token punctuation">[</span><span class="token punctuation">[</span>runners<span class="token punctuation">]</span><span class="token punctuation">]</span>  name = <span class="token string">"6990c9803207"</span>  url = <span class="token string">"http://git.*****.com/"</span>  token = <span class="token string">"o******"</span>  executor = <span class="token string">"docker"</span>  <span class="token punctuation">[</span>runners.custom_build_dir<span class="token punctuation">]</span>  <span class="token punctuation">[</span>runners.docker<span class="token punctuation">]</span>    tls_verify = <span class="token boolean">false</span>    image = <span class="token string">"alpine:latest"</span>    privileged = <span class="token boolean">true</span>    disable_entrypoint_overwrite = <span class="token boolean">false</span>    oom_kill_disable = <span class="token boolean">false</span>    disable_cache = <span class="token boolean">false</span>    volumes = <span class="token punctuation">[</span><span class="token string">"/var/run/docker.sock:/var/run/docker.sock"</span><span class="token punctuation">,</span> <span class="token string">"/cache"</span><span class="token punctuation">]</span>    shm_size = <span class="token number">0</span>  <span class="token punctuation">[</span>runners.cache<span class="token punctuation">]</span>    <span class="token punctuation">[</span>runners.cache.s3<span class="token punctuation">]</span>    <span class="token punctuation">[</span>runners.cache.gcs<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置pages"><a href="#配置pages" class="headerlink" title="配置pages"></a>配置pages</h3><p>vim /etc/gitlab/gitlab.rb</p><p>中增加如下信息：</p><pre class="line-numbers language-rb"><code class="language-rb">pages_external_url "http://io.*******.com"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h2><table><thead><tr><th>主机记录</th><th>记录类型</th><th>解析线路</th><th>记录值</th></tr></thead><tbody><tr><td>*.io</td><td>A</td><td>默认</td><td>10.4.<strong>.</strong></td></tr><tr><td>git.sys</td><td>A</td><td>默认</td><td>10.4.<strong>.</strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell ls 输出显示1列</title>
      <link href="/shell-ls-shu-chu-xian-shi-1-lie/"/>
      <url>/shell-ls-shu-chu-xian-shi-1-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="linux-shell-ls-1-列显示文件"><a href="#linux-shell-ls-1-列显示文件" class="headerlink" title="linux shell ls -1 列显示文件"></a><font face="黑体" color="blue" size="6">linux shell ls -1 列显示文件</font></h1><ul><li>说明：<br>   有时候写shell脚本的时候，经常需要将文件以一列的形式列出来，然后再进行<br>for迭代，之前一般用ls+awk来做，其实ls本身就提供这个功能。</li></ul><ul><li>示例如下：<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@nginx-service001 data<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>  autosaas  check  logs  nginx  script  software  windows_251  wwwroot  <span class="token punctuation">[</span>root@nginx-service001 data<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -1</span>  autosaas  check  logs  nginx  script  software  windows_251  wwwroot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker容器日志清理</title>
      <link href="/docker-rong-qi-ri-zhi-qing-li/"/>
      <url>/docker-rong-qi-ri-zhi-qing-li/</url>
      
        <content type="html"><![CDATA[<ul><li><p><font face="黑体" color="green" size="6">设置一个容器服务的日志大小上限</font></p></li><li><p>在启动容器的时候增加一个参数设置该容器的日志大小，及日志驱动</p><p> –log-driver json-file  #日志驱动<br> –log-opt max-size=[0-9+][k|m|g] #文件的大小<br> –log-opt max-file=[0-9+] #文件数量</p></li><li><p>全局设置<br>编辑文件/etc/docker/daemon.json, 增加以下日志的配置</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"log-driver"</span><span class="token operator">:</span><span class="token string">"json-file"</span><span class="token punctuation">,</span><span class="token property">"log-opts"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"max-size"</span><span class="token operator">:</span><span class="token string">"500m"</span><span class="token punctuation">,</span> <span class="token property">"max-file"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  max-size=500m，意味着一个容器日志大小上限是500M，<br>  max-file=3，意味着一个容器有三个日志，分别是id+.json、id+1.json、id+2.json。</p></li><li><p>重启docker守护进程</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl daemon-reloadsystemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><blockquote><table><tr><td bgcolor="yellow"> 注意：设置的日志大小，只对新建的容器有效。</td></tr></table></blockquote>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python install cmdb</title>
      <link href="/python-install-cmdb/"/>
      <url>/python-install-cmdb/</url>
      
        <content type="html"><![CDATA[<p>利用Python 安装部署cmdb</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> subprocess<span class="token keyword">import</span> argparse<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">base</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"{} 执行失败"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">install_docker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base<span class="token punctuation">(</span><span class="token string">"sudo yum install -y yum-utils device-mapper-persistent-data lvm2"</span><span class="token punctuation">)</span>    base<span class="token punctuation">(</span><span class="token string">"sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo"</span><span class="token punctuation">)</span>    base<span class="token punctuation">(</span><span class="token string">"sudo yum makecache fast"</span><span class="token punctuation">)</span>    base<span class="token punctuation">(</span><span class="token string">"sudo yum -y install docker-ce"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"/etc/docker"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        base<span class="token punctuation">(</span><span class="token string">"mkdir -p /etc/docker"</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"/etc/docker/daemon.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'{\n    "registry-mirrors": ["https://9f4w4icn.mirror.aliyuncs.com"] \n}'</span><span class="token punctuation">)</span>    base<span class="token punctuation">(</span><span class="token string">"sudo systemctl daemon-reload"</span><span class="token punctuation">)</span>    base<span class="token punctuation">(</span><span class="token string">"sudo systemctl start docker"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"/var/cmdb/db"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        base<span class="token punctuation">(</span><span class="token string">"sudo mkdir -p /var/cmdb/db"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"/var/cmdb/es"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        base<span class="token punctuation">(</span><span class="token string">"sudo mkdir -p /var/cmdb/es"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_db_container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base<span class="token punctuation">(</span><span class="token string">"sudo docker run --name cmdb-db -d -e MYSQL_ROOT_PASSWORD=cmdbcmdb -v /var/cmdb/db:/var/lib/mysql mysql:5.7.21"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_es_container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base<span class="token punctuation">(</span><span class="token string">"sudo docker run --name cmdb-es -d -v /var/cmdb/es:/usr/share/elasticsearch/data elasticsearch:5.6.8"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base<span class="token punctuation">(</span><span class="token string">"sudo docker run -it --rm --link cmdb-db -e DB_HOST=cmdb-db -e ENV=PRO -e DB_PORT=3306 -e DB_USERNAME=root -e DB_PASSWORD=cmdbcmdb -e DB_NAME=cmdb mingmingtang/cmdb init-db"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_cmdb_container</span><span class="token punctuation">(</span>site_url<span class="token punctuation">,</span> email_host<span class="token punctuation">,</span> email_port<span class="token punctuation">,</span> email_username<span class="token punctuation">,</span> email_password<span class="token punctuation">)</span><span class="token punctuation">:</span>    base<span class="token punctuation">(</span><span class="token string">"sudo docker run -d --name cmdb --link cmdb-db --link cmdb-es -p 80:80 -e ENV=PRO -e SITE_URL={} -e DB_HOST=cmdb-db -e DB_PORT=3306 -e DB_USERNAME=root -e DB_PASSWORD=cmdbcmdb -e DB_NAME=cmdb -e ELASTICSEARCH_HOSTS=cmdb-es -e EMAIL_HOST={} -e EMAIL_PORT={} -e EMAIL_USERNAME={} -e EMAIL_PASSWORD={} mingmingtang/cmdb start"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>site_url<span class="token punctuation">,</span> email_host<span class="token punctuation">,</span> email_port<span class="token punctuation">,</span> email_username<span class="token punctuation">,</span> email_password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">input_para</span><span class="token punctuation">(</span>help<span class="token punctuation">)</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">not</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> input<span class="token punctuation">(</span>help<span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>geteuid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span><span class="token punctuation">(</span><span class="token string">"请以root权限运行"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># parser = argparse.ArgumentParser()</span>    <span class="token comment" spellcheck="true"># parser.add_argument("--siteurl", type=str, help="E.g: http://cmdb.xxx.com, http://172.17.100.1")</span>    <span class="token comment" spellcheck="true"># parser.add_argument("--emailhost", type=str, help="E.g: http://cmdb.xxx.com, http://172.17.100.1")</span>    <span class="token comment" spellcheck="true"># parser.add_argument("--emailport", type=str, help="E.g: http://cmdb.xxx.com, http://172.17.100.1")</span>    <span class="token comment" spellcheck="true"># parser.add_argument("--emailusername", type=str, help="E.g: http://cmdb.xxx.com, http://172.17.100.1")</span>    <span class="token comment" spellcheck="true"># parser.add_argument("--emailpassword", type=str, help="E.g: http://cmdb.xxx.com, http://172.17.100.1")</span>    <span class="token comment" spellcheck="true"># args = parser.parse_args()</span>    <span class="token comment" spellcheck="true"># SITE_URL = args.SITE_URL</span>    site_url <span class="token operator">=</span> input_para<span class="token punctuation">(</span><span class="token string">"请输入网站域名或IP（http://your domain name）："</span><span class="token punctuation">)</span>    email_host <span class="token operator">=</span> input_para<span class="token punctuation">(</span><span class="token string">"网站邮箱服务器（smtp.domain.com）："</span><span class="token punctuation">)</span>    email_port <span class="token operator">=</span> input_para<span class="token punctuation">(</span><span class="token string">"邮箱服务器端口（25）："</span><span class="token punctuation">)</span>    email_username <span class="token operator">=</span> input_para<span class="token punctuation">(</span><span class="token string">"邮箱用户名（user@domain.com）："</span><span class="token punctuation">)</span>    email_password <span class="token operator">=</span> input_para<span class="token punctuation">(</span><span class="token string">"邮箱密码|独立授权码（password）："</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始安装docker"</span><span class="token punctuation">)</span>    install_docker<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始创建目录"</span><span class="token punctuation">)</span>    create_dir<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始运行mysql容器"</span><span class="token punctuation">)</span>    run_db_container<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始运行elasticsearch容器"</span><span class="token punctuation">)</span>    run_es_container<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"等待数据库启动完成(10s)"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始初始化数据库"</span><span class="token punctuation">)</span>    init_db<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始运行cmdb"</span><span class="token punctuation">)</span>    run_cmdb_container<span class="token punctuation">(</span>site_url<span class="token punctuation">,</span> email_host<span class="token punctuation">,</span> email_port<span class="token punctuation">,</span> email_username<span class="token punctuation">,</span> email_password<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"完成！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决docker 容器内访问宿主机“No route to host”的问题</title>
      <link href="/jie-jue-docker-rong-qi-nei-fang-wen-su-zhu-ji-no-route-to-host-de-wen-ti/"/>
      <url>/jie-jue-docker-rong-qi-nei-fang-wen-su-zhu-ji-no-route-to-host-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="解决docker-容器内访问宿主机“No-route-to-host”的问题"><a href="#解决docker-容器内访问宿主机“No-route-to-host”的问题" class="headerlink" title="解决docker 容器内访问宿主机“No route to host”的问题"></a>解决docker 容器内访问宿主机“No route to host”的问题</h1><p>请顺序运行以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">nmcli connection modify docker0 connection.zone trustedsystemctl stop NetworkManager.servicefirewall-cmd --permanent --zone<span class="token operator">=</span>trusted --change-interface<span class="token operator">=</span>docker0systemctl start NetworkManager.servicenmcli connection modify docker0 connection.zone trustedsystemctl restart docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定义js.map文件只允许内网或者指定IP访问</title>
      <link href="/ding-yi-js-map-wen-jian-zhi-yun-xu-nei-wang-huo-zhe-zhi-ding-ip-fang-wen/"/>
      <url>/ding-yi-js-map-wen-jian-zhi-yun-xu-nei-wang-huo-zhe-zhi-ding-ip-fang-wen/</url>
      
        <content type="html"><![CDATA[<h4 id="案例配置："><a href="#案例配置：" class="headerlink" title="案例配置："></a>案例配置：</h4><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">443</span><span class="token punctuation">;</span>        <span class="token keyword">server_name</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token punctuation">;</span>        <span class="token keyword">ssl</span> on<span class="token punctuation">;</span>        <span class="token keyword">ssl_certificate</span>   sslkey<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>        <span class="token keyword">ssl_certificate_key</span>  sslkey<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token punctuation">.</span>key<span class="token punctuation">;</span>        <span class="token keyword">ssl_session_timeout</span> 5m<span class="token punctuation">;</span>        <span class="token keyword">ssl_protocols</span> TLSv1 TLSv1<span class="token number">.1</span> TLSv1<span class="token number">.2</span><span class="token punctuation">;</span>        <span class="token keyword">ssl_ciphers</span> AESGCM<span class="token punctuation">:</span>ALL<span class="token punctuation">:</span><span class="token operator">!</span>DH<span class="token punctuation">:</span><span class="token operator">!</span>EXPORT<span class="token punctuation">:</span><span class="token operator">!</span>RC4<span class="token punctuation">:</span><span class="token operator">+</span>HIGH<span class="token punctuation">:</span><span class="token operator">!</span>MEDIUM<span class="token punctuation">:</span><span class="token operator">!</span>LOW<span class="token punctuation">:</span><span class="token operator">!</span>aNULL<span class="token punctuation">:</span><span class="token operator">!</span>eNULL<span class="token punctuation">;</span>        <span class="token keyword">ssl_prefer_server_ciphers</span> on<span class="token punctuation">;</span>        <span class="token keyword">include</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>        <span class="token keyword">location</span>  <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span> <span class="token punctuation">{</span>                <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>                <span class="token keyword">alias</span> <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token punctuation">;</span>                <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">#判断是否是静态文件，如果是静态文件则不缓存</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request_filename</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>htm<span class="token operator">|</span>html<span class="token punctuation">)</span>$<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                <span class="token keyword">add_header</span> Cache<span class="token operator">-</span>Control <span class="token string">"no-cache, no-store"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">#匹配访问js.map文件的访问权限</span>            <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>js<span class="token punctuation">.</span><span class="token keyword">map</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token punctuation">{</span>                    <span class="token keyword">set_real_ip_from</span> <span class="token punctuation">{</span>your IP<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#定义可以访问的源IP</span>                    <span class="token keyword">real_ip_header</span>    X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#表示从哪个header属性中获取真实IP</span>                    real_ip_recursive on<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#递归检索真实IP，若从 X-Forwarded-For 中获取，则需递归检索；若像从X-Real-IP中获取，则无需递归。</span>                    <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$remote_addr</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#$remote_addr 是客户端真实IP</span>                    <span class="token comment" spellcheck="true">#判断访问源IP如果不是{your IP }}则返回403</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$remote_addr</span> <span class="token operator">!=</span> <span class="token punctuation">{</span>your IP<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token number">403</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">#定义proxy1日志输出路径</span>                    <span class="token keyword">access_log</span> <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>log proxy1<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span>favicon<span class="token punctuation">.</span>ico <span class="token punctuation">{</span>            <span class="token keyword">log_not_found</span> off<span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token keyword">access_log</span>  <span class="token operator">/</span>data<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token punctuation">.</span>log  access<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token keyword">server_name</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">307</span> <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token variable">$host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bat脚本编写</title>
      <link href="/bat-jiao-ben-bian-xie/"/>
      <url>/bat-jiao-ben-bian-xie/</url>
      
        <content type="html"><![CDATA[<h1 id="强制获取管理员运行权限"><a href="#强制获取管理员运行权限" class="headerlink" title="强制获取管理员运行权限"></a>强制获取管理员运行权限</h1><pre><code>%1 mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;cmd.exe&quot;,&quot;/c %~s0 ::&quot;,&quot;&quot;,&quot;runas&quot;,1)(window.close)&amp;&amp;exit</code></pre><h3 id="释放IP及重新获取IP"><a href="#释放IP及重新获取IP" class="headerlink" title="释放IP及重新获取IP"></a>释放IP及重新获取IP</h3><pre class="line-numbers language-bat"><code class="language-bat">@echo off%1 mshta vbscript:CreateObject("Shell.Application").ShellExecute("cmd.exe","/c %~s0 ::","","runas",1)(window.close)&&exitecho connect release toolsipconfig /releaseecho connection has been releasedecho please waitingecho connect renew toolsipconfig /renewecho connection has been renewpause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="win7-关闭防火墙"><a href="#win7-关闭防火墙" class="headerlink" title="win7 关闭防火墙"></a>win7 关闭防火墙</h3><pre class="line-numbers language-bat"><code class="language-bat">@echo off(net start|find "Windows Firewall" >nul)&&(net stop MpsSvc>nul&sc config MpsSvc start= disabled>nul)||((sc qc mpssvc|find /i "START_TYPE"|find /i "DISABLED">nul)||sc config MpsSvc start= disabled>nul)echo 完成！&pause>nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="win10-关闭防火墙"><a href="#win10-关闭防火墙" class="headerlink" title="win10 关闭防火墙"></a>win10 关闭防火墙</h3><pre class="line-numbers language-bat"><code class="language-bat">@echo off%1 mshta vbscript:CreateObject("Shell.Application").ShellExecute("cmd.exe","/c %~s0 ::","","runas",1)(window.close)&&exitreg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender" /v "DisableAntiSpyware" /d 1 /t REG_DWORDnetsh firewall set opmode mode = disableecho 完成！&pause>nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>### </p><pre class="line-numbers language-bat"><code class="language-bat">@echo off%1 mshta vbscript:CreateObject("Shell.Application").ShellExecute("cmd.exe","/c %~s0 ::","","runas",1)(window.close)&&exitnetsh firewall set opmode mode = enableecho 完成！&pause>nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker run -m指定内存大小不生效</title>
      <link href="/docker-run-m-zhi-ding-nei-cun-da-xiao-bu-sheng-xiao/"/>
      <url>/docker-run-m-zhi-ding-nei-cun-da-xiao-bu-sheng-xiao/</url>
      
        <content type="html"><![CDATA[<pre><code>GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet&quot;</code></pre><p>执行docker run的时候，想要指定一下内存大小，用了-m参数，报错如下</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#docker run -id -m 3g -p 7001:7001 197.3.16.51/sysmgr/mywebapptest_app_weblogic:20180820047</span>WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.52380a4896f3f916cd0f95f97e233b30d9406840e10c0c53484b3be9000d0321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后发现虽然我设置堆大小为5G，容器还是创建出来了，3g的限制并没有生效。</p><p>查阅资料发现这个报错是因为宿主机内核的相关功能没有打开。按照下面的设置就行。</p><p>step 1：编辑/etc/default/grub文件<br>将GRUB_CMDLINE_LINUX一行改为</p><pre><code>GRUB_CMDLINE_LINUX=&quot;cgroup_enable=memory swapaccount=1&quot;</code></pre><p>step 2：更新 GRUB，即执行$ </p><pre><code>sudo update-grub</code></pre><p>step 3: 重启系统。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用普罗米修斯监控ecs</title>
      <link href="/li-yong-pu-luo-mi-xiu-si-jian-kong-ecs/"/>
      <url>/li-yong-pu-luo-mi-xiu-si-jian-kong-ecs/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29717271&auto=1&height=66"></iframe></div><p>利用脚本部署node_exporter</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#wget https://github.com/prometheus/node_exporter/releases/download/v0.17.0/node_exporter-0.17.0.linux-amd64.tar.gz</span><span class="token function">rsync</span> -avPLl helen@172.16.6.86:/Users/helen/hoo-pro/hoo-PRO/software/prometheus/node_exporter-0.17.0.linux-amd64.tar.gz ./<span class="token function">tar</span> zxf node_exporter-0.17.0.linux-amd64.tar.gz<span class="token function">mv</span> node_exporter-0.17.0.linux-amd64 /usr/local/node_exporter<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>EOF <span class="token operator">></span>/usr/lib/systemd/system/node_exporter.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>https://prometheus.io<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureExecStart<span class="token operator">=</span>/usr/local/node_exporter/node_exporter --collector.systemd --collector.systemd.unit-whitelist<span class="token operator">=</span><span class="token punctuation">(</span>docker<span class="token operator">|</span>kubelet<span class="token operator">|</span>kube-proxy<span class="token operator">|</span>flanneld<span class="token punctuation">)</span>.service<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.targetEOFsystemctl daemon-reloadsystemctl <span class="token function">enable</span> node_exportersystemctl restart node_exporter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要被普罗米修斯监控的ecs上执行此脚本</p><pre><code>bash node_exporter.sh</code></pre><p>然后修改prometheus.yml文件</p><pre class="line-numbers language-yml"><code class="language-yml"># my global configglobal:  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.  # scrape_timeout is set to the global default (10s).# Alertmanager configurationalerting:  alertmanagers:  - static_configs:    - targets:      # - alertmanager:9093# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.rule_files:  # - "first_rules.yml"  # - "second_rules.yml"# A scrape configuration containing exactly one endpoint to scrape:# Here it's Prometheus itself.scrape_configs:  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.  - job_name: 'prometheus'    # metrics_path defaults to '/metrics'    # scheme defaults to 'http'.    static_configs:    - targets: ['localhost:9090','10.10.249.59:9100','10.10.249.60:9100','192.168.1.35:8080','192.168.1.35:9100','10.10.249.55:9100']    #  labels:    #    instance: k8s-node01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改完成，重启普罗米修斯；</p>]]></content>
      
      
      <categories>
          
          <category> monitor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> monitor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose build seafile</title>
      <link href="/docker-compose-build-seafile/"/>
      <url>/docker-compose-build-seafile/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29717271&auto=1&height=66"></iframe></div><p>利用docker-compose部署<br>以下是官方给出的安装方法，详情见<a href="https://docs.seafile.com/published/seafile-manual-cn/extension/fuse.md" target="_blank" rel="noopener">官网</a></p><p>见yml文件</p><pre class="line-numbers language-yml"><code class="language-yml">version: '2.0'services:  db:    image: mariadb:10.1    container_name: seafile-mysql    environment:      - MYSQL_ROOT_PASSWORD=*****      # Requested, set the root's password of MySQL service.      - MYSQL_LOG_CONSOLE=true    volumes:      - /XXXXX/seafile/data/mysql:/var/lib/mysql      # Requested, specifies the path to MySQL data persistent store.    networks:      - seafile-net  memcached:    image: memcached:1.5.6    container_name: seafile-memcached    entrypoint: memcached -m 256    networks:      - seafile-net  seafile:    image: seafileltd/seafile-mc:latest    container_name: seafile    ports:      - "80:80"#      - "443:443"  # If https is enabled, cancel the comment.    volumes:      - /XXXX/seafile/data/seafile-data:/shared      # Requested, specifies the path to Seafile data persistent store.    environment:      - DB_HOST=db      - DB_ROOT_PASSWD=****      # Requested, the value shuold be root's password of MySQL service.#      - TIME_ZONE=Asia/Shanghai# Optional, default is UTC. Should be uncomment and set to your local time zone.      - SEAFILE_ADMIN_EMAIL=huyuhao@xiongmaocar.com      # Specifies Seafile admin user, default is 'me@example.com'.      - SEAFILE_ADMIN_PASSWORD=*****      # Specifies Seafile admin password, default is 'asecret'.      - SEAFILE_SERVER_LETSENCRYPT=false      # Whether use letsencrypt to generate cert.      - SEAFILE_SERVER_HOSTNAME=seafile.xiongmaocar.com      # Specifies your host name.    depends_on:      - db      - memcached    networks:      - seafile-netnetworks:  seafile-net:%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二零一七年终总结</title>
      <link href="/2017-conclusion/"/>
      <url>/2017-conclusion/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66"></iframe></div><p>==<em>韦阳博客</em>：== <a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">https://godweiyang.com/2018/04/13/hexo-blog/</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
