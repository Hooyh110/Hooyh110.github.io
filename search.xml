<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nginx 配置多条件判断</title>
      <link href="/nginx-pei-zhi-duo-tiao-jian-pan-duan/"/>
      <url>/nginx-pei-zhi-duo-tiao-jian-pan-duan/</url>
      
        <content type="html"><![CDATA[<h1 id="一、if语句中的判断条件-nginx-介绍"><a href="#一、if语句中的判断条件-nginx-介绍" class="headerlink" title="一、if语句中的判断条件(nginx)介绍"></a><font color="read">一、if语句中的判断条件(nginx)介绍</font></h1><p>1、正则表达式匹配：</p><pre><code>  ==:等值比较;  ~：与指定正则表达式模式匹配时返回“真”，判断匹配与否时区分字符大小写；  ~*：与指定正则表达式模式匹配时返回“真”，判断匹配与否时不区分字符大小写；  !~：与指定正则表达式模式不匹配时返回“真”，判断匹配与否时区分字符大小写；  !~*：与指定正则表达式模式不匹配时返回“真”，判断匹配与否时不区分字符大小写；</code></pre><p>2、文件及目录匹配判断：</p><pre><code>  -f, !-f：判断指定的路径是否为存在且为文件；  -d, !-d：判断指定的路径是否为存在且为目录；  -e, !-e：判断指定的路径是否存在，文件或目录均可；  -x, !-x：判断指定路径的文件是否存在且可执行；</code></pre><ul><li>实例(nginx return 302)：</li></ul><pre class="line-numbers language-conf"><code class="language-conf">#allow.conf#判断访问源IP如果不是223.223.205.*和39.*.190.*则返回302if ($remote_addr !~ ^39\.*\.190\.*|223\.223\.205\.*) {    return 302 https://app.xiongmaocar.com/mzh5/p/at_698eada2633d2b37;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实例(定义接口json返回)</li></ul><pre class="line-numbers language-conf"><code class="language-conf">#json.confdefault_type application/json;add_header Content-Type 'application/json;charset=utf-8';if ($remote_addr !~ ^39\.97\.190\.107|223\.223\.205\.85) {    return 200 '{"success":true,"code":500,"message":"系统正在升级，暂时无法访问，敬请谅解。","result":null}';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实例(设置js.map不允许223.223.205.*以外的IP访问)</li></ul><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>js<span class="token punctuation">.</span><span class="token keyword">map</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token punctuation">{</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">223.223</span><span class="token punctuation">.</span><span class="token number">205</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#定义可以访问的源IP</span>        <span class="token keyword">real_ip_header</span>    X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#表示从哪个header属性中获取真实IP</span>        real_ip_recursive on<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#递归检索真实IP，若从 X-Forwarded-For 中获取，则需递归检索；若像从X-Real-IP中获取，则无需递归。</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$remote_addr</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#$remote_addr 是客户端真实IP</span>        <span class="token comment" spellcheck="true">#判断访问源IP如果不是223.223.205.*则返回403</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$remote_addr</span> <span class="token operator">!=</span> <span class="token number">223.223</span><span class="token punctuation">.</span><span class="token number">205</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">403</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#定义proxy1日志输出路径</span>        <span class="token keyword">access_log</span> <span class="token operator">/</span>data<span class="token operator">/</span>nginx<span class="token operator">/</span>access<span class="token operator">/</span><span class="token variable">$host</span><span class="token punctuation">.</span><span class="token keyword">proxy</span><span class="token punctuation">.</span>log proxy1<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后vhost调用</p><pre class="line-numbers language-nginx"><code class="language-nginx">        <span class="token keyword">location</span> <span class="token operator">/</span>airadar<span class="token operator">/</span>api<span class="token operator">/</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">#引用json.conf配置</span>                <span class="token keyword">include</span> json<span class="token punctuation">.</span>conf<span class="token punctuation">;</span>                <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>autosaas<span class="token operator">-</span>gateway<span class="token operator">-</span>pro<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">11001</span><span class="token operator">/</span>cpapi<span class="token operator">/</span><span class="token punctuation">;</span>                <span class="token keyword">proxy_redirect</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>autosaas<span class="token operator">-</span>gateway<span class="token operator">-</span>pro<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">11001</span><span class="token operator">/</span>cpapi<span class="token operator">/</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span>a<span class="token operator">*</span><span class="token operator">*</span>r<span class="token operator">/</span>api<span class="token operator">/</span><span class="token punctuation">;</span>                <span class="token keyword">client_max_body_size</span> 100m<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">location</span>  <span class="token operator">/</span>bo<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>dar<span class="token operator">/</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">#引用allow.conf</span>                <span class="token keyword">include</span> <span class="token keyword">allow</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>                <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>                <span class="token keyword">alias</span> <span class="token operator">/</span>data<span class="token operator">/</span>wwwroot<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span>bo<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>dar<span class="token operator">/</span><span class="token punctuation">;</span>                <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span>bo<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>dar<span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request_filename</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>htm<span class="token operator">|</span>html<span class="token punctuation">)</span>$<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                <span class="token keyword">add_header</span> Cache<span class="token operator">-</span>Control <span class="token string">"no-cache, no-store"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">#引用js_map.conf</span>                <span class="token keyword">include</span> js_map<span class="token punctuation">.</span>conf<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python检查磁盘大于80%时发送钉钉</title>
      <link href="/python-jian-cha-ci-pan-da-yu-80-shi-fa-song-ding-ding/"/>
      <url>/python-jian-cha-ci-pan-da-yu-80-shi-fa-song-ding-ding/</url>
      
        <content type="html"><![CDATA[<h1 id="Python利用subprocess模块检查磁盘空间"><a href="#Python利用subprocess模块检查磁盘空间" class="headerlink" title="Python利用subprocess模块检查磁盘空间"></a>Python利用subprocess模块检查磁盘空间</h1><p>当磁盘/目录大于80%时，执行命令，并用钉钉发送</p><ul><li>实例脚本：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> socket<span class="token keyword">import</span> subprocess<span class="token comment" spellcheck="true">#声明钉钉机器人</span><span class="token keyword">from</span> ddrobot <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">run_cmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    process <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>    result_f<span class="token punctuation">,</span>error_f <span class="token operator">=</span> process<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span>process<span class="token punctuation">.</span>stderr    errors <span class="token operator">=</span> error_f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> errors<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    result <span class="token operator">=</span> result_f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> result_f<span class="token punctuation">:</span>        result_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> error_f<span class="token punctuation">:</span>        error_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">disk_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    subject <span class="token operator">=</span> <span class="token string">''</span>    result <span class="token operator">=</span> run_cmd<span class="token punctuation">(</span>cmd1<span class="token punctuation">)</span>    content <span class="token operator">=</span>  cmd1 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> result    result <span class="token operator">=</span> result<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(result)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> result<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'G '</span> <span class="token keyword">in</span> line <span class="token operator">or</span> <span class="token string">'M '</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> line<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token string">'%'</span> <span class="token keyword">in</span> i <span class="token operator">and</span> int<span class="token punctuation">(</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">:</span>                    subject <span class="token operator">=</span> <span class="token string">'gitlab-runer [WARNING] SERVER FILESYSTEM USE% OVER '</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">', PLEASE CHECK!'</span>                    <span class="token comment" spellcheck="true">#当磁盘空间大于80%时，执行cmd2命令</span>                    result1 <span class="token operator">=</span> run_cmd<span class="token punctuation">(</span>cmd2<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#content =  cmd2 + '\n' + result1</span>                    <span class="token comment" spellcheck="true">#result1 = result1.split('\n')</span>                    <span class="token comment" spellcheck="true">#print(result1)</span>    <span class="token comment" spellcheck="true">#print(result)</span>    <span class="token keyword">if</span> subject<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#    send_mail(receiver,subject,content)</span>    <span class="token comment" spellcheck="true">#    print('email sended')</span>        <span class="token comment" spellcheck="true">#利用钉钉机器人模块</span>        drobot<span class="token punctuation">.</span>dingmessage<span class="token punctuation">(</span>subject<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Everything is ok, keep on monitor.'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cmd1 <span class="token operator">=</span> <span class="token string">'df -h| grep -w "/"|grep -v "aliyun"'</span>    cmd2 <span class="token operator">=</span> <span class="token string">'echo "y" | docker system prune -a'</span>    disk_check<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python配置钉钉机器人发送信息</title>
      <link href="/python-pei-zhi-ding-ding-ji-qi-ren-fa-song-xin-xi/"/>
      <url>/python-pei-zhi-ding-ding-ji-qi-ren-fa-song-xin-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="webhook"><a href="#webhook" class="headerlink" title="webhook"></a>webhook</h1><ol><li>概述</li></ol><p>Webhook 是一个 API 概念，并且变得越来越流行。我们能用事件描述的事物越多，Webhook 的作用范围也就越大。Webhook 作为一个轻量的事件处理应用，正变得越来越有用。</p><p>准确的说 Webhook 是一种 web 回调或者 http 的 push API，是向 APP 或者其他应用提供实时信息的一种方式。Webhook 在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的 API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。Webhook 有时也被称为反向 API，因为他提供了 API 规则，你需要设计要使用的 API。Webhook 将向你的应用发起 http 请求，典型的是 post 请求，应用程序由请求驱动。</p><ol start="2"><li>使用 Webhook</li></ol><p>消费一个 Webhook 是为 Webhook 准备一个 URL，用于 Webhook 发送请求。这些通常由后台页面和或者 API 完成。这就意味你的应用要设置一个通过公网可以访问的 URL。多数 Webhook 以两种数据格式发布数据：JSON 或者 XML。另一种数据格式是 application/x-www-form-urlencoded or multipart/form-data。这两种方式都很容易解析，并且多数的 Web 应用架构都可以做这部分工作。</p><ol start="3"><li>Webhook 调试</li></ol><p>调试 Webhook 有时很复杂，因为 Webhook 原则来说是异步的。你首先要触发它，然后等待，接着检查是否有响应，枯燥并且相当低效。幸运的是还有其他方法：</p><p>明白 webhook 能提供什么，使用如 RequestBin 之类的工具收集 webhook 的请求；<br>用 cURL 或者 Postman 来模拟请求；<br>用 ngrok 这样的工具测试你的代码；<br>用 Runscope 工具来查看整个流程。</p><ol start="4"><li>Webhook 安全</li></ol><p>因为 Webhook 发送数据到应用上公开的 URL，这就给其他人找到这个 URL 并且发送错误数据的机会。你可采用技术手段，防止这样的事情发生。最简单的方法是采用 https（TLS connection）。除了使用 https 外，还可以采用以下的方法进一步提高安全性：</p><p>首先增加 Token，这个大多数 Webhook 都支持；<br>增加认证；<br>数据签名。</p><ol start="5"><li>重要的问题</li></ol><p>当作为 Webhook 的消费者时有两件事需要铭记于心：</p><p>Webhook 通过请求发送数据到你的应用后，就不再关注这些数据。也就是说如果你的应用存在问题，数据会丢失。许多 Webhook 会处理回应，如果程序出现错误会重传数据。如果你的应用处理这个请求并且依然返回一个错误，你的应用就会收到重复数据。<br>Webhook 会发出大量的请求，这样会造成你的应用阻塞。确保你的应用能处理这些请求。</p><ul><li>实例脚本：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">drobot</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">dingmessage</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: object        """</span>        <span class="token comment" spellcheck="true"># 请求的URL，WebHook地址</span>        webhook <span class="token operator">=</span> <span class="token string">"https://oapi.dingtalk.com/robot/send?access_token=******"</span>        <span class="token comment" spellcheck="true"># 构建请求头部</span>        header <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>            <span class="token string">"Charset"</span><span class="token punctuation">:</span> <span class="token string">"UTF-8"</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 构建请求数据</span>        <span class="token comment" spellcheck="true"># 利用sys.argv传递参数</span>        tex <span class="token operator">=</span> argv        <span class="token comment" spellcheck="true">#print(tex)</span>        message <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"msgtype"</span><span class="token punctuation">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>            <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"content"</span><span class="token punctuation">:</span> tex            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"at"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"isAtAll"</span><span class="token punctuation">:</span> <span class="token boolean">True</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 对请求的数据进行json封装</span>        message_json <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>message<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 发送请求</span>        info <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>webhook<span class="token punctuation">,</span> data<span class="token operator">=</span>message_json<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印返回的结果</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># if __name__ == "__main__":</span><span class="token comment" spellcheck="true">#     dingmessage()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本实例(八)</title>
      <link href="/shell-jiao-ben-shi-li-ba/"/>
      <url>/shell-jiao-ben-shi-li-ba/</url>
      
        <content type="html"><![CDATA[<h1 id="【脚本99】域名到期提醒"><a href="#【脚本99】域名到期提醒" class="headerlink" title="【脚本99】域名到期提醒"></a>【脚本99】域名到期提醒</h1><p>写一个shell脚本，查询指定域名的过期时间，并在到期前一周，每天发一封提醒邮件。</p><ul><li><p>思路：<br>大家可以在linux下使用命令“whois 域名”，如”whois xxx.com”，来获取该域名的一些信息。</p></li><li><p>提示：<br>whois命令，需要安装jwhois包</p></li><li><p>参考代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>t1<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%s<span class="token variable">`</span></span>is_install_whois<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">which</span> whois <span class="token operator">></span>/dev/null 2<span class="token operator">></span>/dev/null    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -ne 0 <span class="token punctuation">]</span>    <span class="token keyword">then</span>        yum <span class="token function">install</span> -y jwhois    <span class="token keyword">fi</span><span class="token punctuation">}</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    e_d<span class="token operator">=</span>`whois <span class="token variable">$1</span><span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'Expiry Date'</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$4</span>}'</span><span class="token operator">|</span><span class="token function">cut</span> -d <span class="token string">'T'</span> -f 1<span class="token variable"><span class="token variable">`</span>    e_t<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">date</span> -d <span class="token string">"<span class="token variable">$e_d</span>"</span> +%s<span class="token variable"><span class="token variable">`</span>    n<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"86400*7"</span><span class="token operator">|</span>bc`    e_t1<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$e_t</span>-<span class="token variable">$n</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$t1</span> -ge <span class="token variable">$e_t1</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$t1</span> -lt <span class="token variable">$e_t</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        /usr/local/sbin/mail.py aming_test@163.com <span class="token string">"Domain <span class="token variable">$1</span> will be expire."</span> <span class="token string">"Domain <span class="token variable">$1</span> expire date is <span class="token variable">$e_d</span>."</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span>is_install_whoisnotify xxx.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本100】自动增加公钥"><a href="#【脚本100】自动增加公钥" class="headerlink" title="【脚本100】自动增加公钥"></a>【脚本100】自动增加公钥</h1><p>写一个shell脚本，当我们执行时，提示要输入对方的ip和root密码，然后可以自动把本机的公钥增加到对方机器上，从而实现密钥认证。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">read</span> -p <span class="token string">"Input IP: "</span> ip<span class="token function">ping</span> <span class="token variable">$ip</span> -w 2 -c 2 <span class="token operator">>></span> /dev/null<span class="token comment" spellcheck="true">## 查看ip是否可用</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -ne 0 <span class="token punctuation">]</span><span class="token keyword">do</span>    <span class="token function">read</span> -p <span class="token string">"your ip may not useable, Please Input your IP: "</span> ip    <span class="token function">ping</span> <span class="token variable">$ip</span> -w 2 -c 2 <span class="token operator">>></span> /dev/null<span class="token keyword">done</span><span class="token function">read</span> -p <span class="token string">"Input root\'s password of this host: "</span> password<span class="token comment" spellcheck="true">## 检查命令子函数</span>check_ok<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> 0 <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Error!."</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">## yum需要用到的包</span>myyum<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token operator">!</span> rpm -qa <span class="token operator">|</span><span class="token function">grep</span> -q <span class="token string">"<span class="token variable">$1</span>"</span><span class="token keyword">then</span>    yum <span class="token function">install</span> -y <span class="token variable">$1</span>    check_ok<span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token variable">$1</span>  already installed<span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token keyword">for</span> p <span class="token keyword">in</span> openssh-clients openssh <span class="token function">expect</span><span class="token keyword">do</span>    myyum <span class="token variable">$p</span><span class="token keyword">done</span><span class="token comment" spellcheck="true">## 在主机A上创建密钥对</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -f ~/.ssh/id_rsa <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -f ~/.ssh/id_rsa.pub <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -d ~/.ssh <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token function">mv</span> ~/.ssh/  ~/.ssh_old    <span class="token keyword">fi</span>    <span class="token keyword">echo</span> -e <span class="token string">"\n"</span> <span class="token operator">|</span> ssh-keygen -t rsa -P <span class="token string">''</span>    check_ok<span class="token keyword">fi</span><span class="token comment" spellcheck="true">## 传私钥给主机B</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d /usr/local/sbin/rsync_keys <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token function">mkdir</span> /usr/local/sbin/rsync_keys<span class="token keyword">fi</span><span class="token function">cd</span> /usr/local/sbin/rsync_keys<span class="token keyword">if</span> <span class="token punctuation">[</span> -f rsync.expect <span class="token punctuation">]</span><span class="token keyword">then</span>    d<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%F-%T<span class="token variable">`</span></span>    <span class="token function">mv</span> rsync.expect <span class="token variable">$d</span>.expect<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#创建远程同步的expect文件</span><span class="token function">cat</span> <span class="token operator">></span>  rsync.expect <span class="token operator">&lt;&lt;</span><span class="token string">EOF#!/usr/bin/expectset host [lindex \<span class="token variable">$argv</span> 0]#主机B的密码set passwd [lindex \<span class="token variable">$argv</span> 1]spawn rsync -av /root/.ssh/id_rsa.pub root@\<span class="token variable">$host</span>:/tmp/tmp.txtexpect {"yes/no" { send "yes\r"; exp_continue}"password:" { send "\<span class="token variable">$passwd</span>\r" }}expect eofspawn ssh root@\<span class="token variable">$host</span>expect {"password:" { send "\<span class="token variable">$passwd</span>\r" }}expect "]*"                         send "\[ -f /root/.ssh/authorized_keys \] &amp;&amp; cat /tmp/tmp.txt >>/root/.ssh/authorized_keys \r"expect "]*"send "\[ -f /root/.ssh/authorized_keys \] || mkdir -p /root/.ssh/ \r"            send "\[ -f /root/.ssh/authorized_keys \] || mv /tmp/tmp.txt /root/.ssh/authorized_keys\r"            expect "]*"send "chmod 700 /root/.ssh; chmod 600 /root/.ssh/authorized_keys\r"expect "]*"send "exit\r"EOF</span>check_ok/usr/bin/expect /usr/local/sbin/rsync_keys/rsync.expect <span class="token variable">$ip</span> <span class="token variable">$password</span><span class="token keyword">echo</span> <span class="token string">"OK,this script is successful. ssh <span class="token variable">$ip</span>  to test it"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本101】自动封-解封ip"><a href="#【脚本101】自动封-解封ip" class="headerlink" title="【脚本101】自动封/解封ip"></a>【脚本101】自动封/解封ip</h1><ul><li>需求背景：</li></ul><p>discuz论坛，每天有很多注册机注册的用户，然后发垃圾广告帖子。虽然使用了一些插件但没有效果。分析访问日志，发现有几个ip访问量特别大，所以想到可以写个shell脚本，通过分析访问日志，把访问量大的ip直接封掉。</p><p>但是这个脚本很有可能误伤，所以还需要考虑到自动解封这些ip。</p><ul><li>思路：</li></ul><p>可以每分钟分析1次访问日志，设定一个阈值，把访问量大的ip用iptables封掉80端口<br>每20分钟检测一次已经被封ip的请求数据包数量，设定阈值，把没有请求的或者请求量很小的解封</p><p>-参考代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token comment" spellcheck="true">## To block the ip of bad requesting.</span><span class="token comment" spellcheck="true">## Writen by aming 2017-11-18.</span>log<span class="token operator">=</span><span class="token string">"/data/logs/www.xxx.com.log"</span>tmpdir<span class="token operator">=</span><span class="token string">"/tmp/badip"</span><span class="token comment" spellcheck="true">#白名单ip，不应该被封</span>goodip<span class="token operator">=</span><span class="token string">"27.133.28.101"</span><span class="token punctuation">[</span> -d <span class="token variable">$tmpdir</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">mkdir</span> -p <span class="token variable">$tmpdir</span>t<span class="token operator">=</span>`date -d <span class="token string">"-1 min"</span>  +%Y:%H:%M`<span class="token comment" spellcheck="true">#截取一分钟以前的日志</span><span class="token function">grep</span> <span class="token string">"<span class="token variable">$t</span>:"</span> <span class="token variable">$log</span> <span class="token operator">></span> <span class="token variable">$tmpdir</span>/last_min.log<span class="token comment" spellcheck="true">#把一分钟内日志条数大于120的标记为不正常的请求</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span> <span class="token variable">$tmpdir</span>/last_min.log <span class="token operator">|</span><span class="token function">sort</span> -n <span class="token operator">|</span><span class="token function">uniq</span> -c <span class="token operator">|</span><span class="token function">sort</span> -n <span class="token operator">|</span><span class="token function">tail</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'<span class="token variable">$1</span>>120 {print <span class="token variable">$2</span>}'</span><span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">"<span class="token variable">$good_ip</span>"</span><span class="token operator">></span> <span class="token variable">$tmpdir</span>/bad.ipd3<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%M<span class="token variable">`</span></span><span class="token comment" spellcheck="true">#每隔20分钟解封一次ip</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$d3</span> -eq <span class="token string">"20"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token variable">$d3</span> -eq <span class="token string">"40"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token variable">$d3</span> -eq <span class="token string">"00"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>        /sbin/iptables -nvL INPUT<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'DROP'</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'<span class="token variable">$1</span>&lt;10 {print <span class="token variable">$8</span>}'</span><span class="token operator">></span><span class="token variable">$tmpdir</span>/good.ip        <span class="token keyword">if</span> <span class="token punctuation">[</span> -s <span class="token variable">$tmpdir</span>/good.ip <span class="token punctuation">]</span>        <span class="token keyword">then</span>        <span class="token keyword">for</span> ip <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> $tmpdir/good.ip<span class="token variable">`</span></span>        <span class="token keyword">do</span>                /sbin/iptables -D INPUT -p tcp --dport 80 -s <span class="token variable">$ip</span> -j DROP                d4<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d-%H:%M<span class="token variable">`</span></span>                <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$d4</span> <span class="token variable">$ip</span> unblock"</span> <span class="token operator">>></span><span class="token variable">$tmpdir</span>/unblock.ip        <span class="token keyword">done</span>        <span class="token keyword">fi</span>        <span class="token comment" spellcheck="true">#解封后，再把iptables的计数器清零</span>        /sbin/iptables -Z INPUT<span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -s <span class="token variable">$tmpdir</span>/bad.ip <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">for</span> ip <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> $tmpdir/bad.ip<span class="token variable">`</span></span>    <span class="token keyword">do</span>        /sbin/iptables -A INPUT -p tcp --dport 80 -s <span class="token variable">$ip</span> -j DROP        d4<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d-%H:%M<span class="token variable">`</span></span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$d4</span> <span class="token variable">$ip</span> block"</span> <span class="token operator">>></span><span class="token variable">$tmpdir</span>/block.ip    <span class="token keyword">done</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本102】单机部署SpringBoot项目"><a href="#【脚本102】单机部署SpringBoot项目" class="headerlink" title="【脚本102】单机部署SpringBoot项目"></a>【脚本102】单机部署SpringBoot项目</h1><p>有一台测试服务器，经常需要部署SpringBoot项目，手动部署太麻烦，于是写了个部署脚本</p><ul><li>脚本代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># git仓库路径</span>GIT_REPOSITORY_HOME<span class="token operator">=</span>/app/developer/git-repository<span class="token comment" spellcheck="true"># jar包发布路径</span>PROD_HOME<span class="token operator">=</span>/prod/java-back<span class="token comment" spellcheck="true"># 应用列表</span>APPS<span class="token operator">=</span><span class="token punctuation">(</span>app1 app2 app3<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -n <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token keyword">echo</span> -e <span class="token string">"请输入要发布的项目！"</span>   <span class="token keyword">exit</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># cd dir</span><span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>${#APPS[@]}<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>   <span class="token keyword">echo</span> <span class="token variable">$1</span> <span class="token variable">${APPS[i]}</span>   <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token variable">${APPS[i]}</span> <span class="token punctuation">]</span>   <span class="token keyword">then</span>      <span class="token keyword">echo</span> -e <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>Enter <span class="token variable">$1</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>      <span class="token function">cd</span> <span class="token variable">${GIT_REPOSITORY_HOME}</span>/<span class="token variable">$1</span>      <span class="token keyword">break</span>   <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span> <span class="token operator">!=</span> <span class="token variable">${GIT_REPOSITORY_HOME}</span>/<span class="token variable">$1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"输入的项目名没有找到！"</span>    <span class="token keyword">exit</span><span class="token keyword">fi</span><span class="token keyword">echo</span> <span class="token string">"==========git切换分之到master==============="</span><span class="token function">git</span> checkout master<span class="token keyword">echo</span> <span class="token string">"==================git fetch======================"</span><span class="token function">git</span> fetch<span class="token keyword">echo</span> <span class="token string">"==================git pull======================"</span><span class="token function">git</span> pull<span class="token keyword">echo</span> <span class="token string">"===========选择线上环境编译并跳过单元测试===================="</span>mvn clean package -Dmaven.test.skip<span class="token operator">=</span>true -Pprodjar_path<span class="token operator">=</span><span class="token variable">${GIT_REPOSITORY_HOME}</span>/<span class="token variable">$1</span>/target/*-0.0.1-SNAPSHOT.jar<span class="token keyword">echo</span> <span class="token variable">${jar_path}</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -f <span class="token variable">${jar_path}</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token comment" spellcheck="true"># backup dest</span>    <span class="token keyword">echo</span> -e <span class="token string">"===========jar backup============="</span>    <span class="token function">mv</span> <span class="token variable">${PROD_HOME}</span>/<span class="token variable">$1</span>/*-0.0.1-SNAPSHOT.jar <span class="token variable">${PROD_HOME}</span>/<span class="token variable">$1</span>/<span class="token variable">$1</span>-0.0.1-SNAPSHOT.jar.back    <span class="token comment" spellcheck="true"># copy</span>    <span class="token keyword">echo</span> <span class="token string">"======拷贝编译出来的jar包拷贝到<span class="token variable">$PROD_HOME</span>======="</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token variable">${PROD_HOME}</span>/<span class="token variable">$1</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        /bin/cp <span class="token variable">${GIT_REPOSITORY_HOME}</span>/<span class="token variable">$1</span>/target/*-0.0.1-SNAPSHOT.jar  <span class="token variable">${PROD_HOME}</span>/<span class="token variable">$1</span>    <span class="token keyword">else</span>        <span class="token function">mkdir</span> <span class="token variable">${PROD_HOME}</span>/<span class="token variable">$1</span>        /bin/cp <span class="token variable">${GIT_REPOSITORY_HOME}</span>/<span class="token variable">$1</span>/target/*-0.0.1-SNAPSHOT.jar  <span class="token variable">${PROD_HOME}</span>/<span class="token variable">$1</span>    <span class="token keyword">fi</span>    <span class="token keyword">echo</span> <span class="token string">"============停止项目============="</span>    jar_name<span class="token operator">=</span>`jps <span class="token operator">|</span><span class="token function">awk</span> -F<span class="token string">" "</span> <span class="token string">'{ print <span class="token variable">$2</span> }'</span><span class="token operator">|</span> <span class="token function">egrep</span> ^<span class="token variable">$1</span>.*jar$<span class="token variable"><span class="token variable">`</span>    pid<span class="token operator">=</span><span class="token variable">`</span></span>jps <span class="token operator">|</span><span class="token function">grep</span> <span class="token variable">${jar_name}</span> <span class="token operator">|</span> <span class="token function">awk</span> -F<span class="token string">" "</span> <span class="token string">'{ print <span class="token variable">$1</span> }'</span>`    <span class="token keyword">echo</span> <span class="token variable">${pid}</span>    <span class="token function">kill</span> -15 <span class="token variable">${pid}</span>    <span class="token keyword">echo</span> <span class="token string">"================sleep 10s========================="</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> 1 2 3 4 5 6 7 8 9 10    <span class="token keyword">do</span>        <span class="token keyword">echo</span> <span class="token variable">${i}</span><span class="token string">"s"</span>        <span class="token function">sleep</span> 1s    <span class="token keyword">done</span>    <span class="token keyword">echo</span> <span class="token string">"============启动项目============="</span>    <span class="token function">nohup</span> java -jar <span class="token variable">${PROD_HOME}</span>/<span class="token variable">$1</span>/*-0.0.1-SNAPSHOT.jar <span class="token operator">></span> /dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span>    <span class="token keyword">echo</span> -e <span class="token string">"===========Deploy Success============="</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> -e <span class="token string">"===========Deploy Error============="</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本103】利用shell脚本监控verdaccio服务"><a href="#【脚本103】利用shell脚本监控verdaccio服务" class="headerlink" title="【脚本103】利用shell脚本监控verdaccio服务"></a>【脚本103】利用shell脚本监控verdaccio服务</h1><p>我们在公司内部通过verdaccio创建了私有npm仓库，但是verdaccio不太稳定，每周都可能会挂掉一次两次的，在网上也没有找到好的解决方法。随着挂掉次数越来越多，痛定思痛，决定写个脚本主动监控verdaccio并在其挂掉以后自动重启。</p><h2 id="判断服务是否正常运行"><a href="#判断服务是否正常运行" class="headerlink" title="判断服务是否正常运行"></a>判断服务是否正常运行</h2><p>怎么判断verdaccio是否正常正常呢？如果是我肉眼判断的话，我直接打开verdaccio的主页，比如<strong><a href="http://example:4873" target="_blank" rel="noopener">http://example:4873</a></strong>，如果能看到页面内容则说明服务正常，如果看到”无法访问次网站“等字样则说明服务挂掉了。为了实现自动化的监控和重启，我们必须通过脚本程序来做，在此我们可以通过curl命令来获取<strong><a href="http://example:4873" target="_blank" rel="noopener">http://example:4873</a></strong>页面的响应码，如果返回200则说明服务正常，否则服务挂掉了。我们使用curl命令的参数-I只显示响应头。然后通过判断响应头中是否包含HTTP/1.1 200 OK字样来检查服务是否正常。因此就有了以下程序：</p><pre class="line-numbers language-bash"><code class="language-bash">header<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>curl -I http://example:4873<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$header</span> <span class="token operator">=</span>~ <span class="token string">'HTTP/1.1 200 OK'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">'ok'</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">'not ok'</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以上代码我们就可以监控服务是否正常了，我们再来拓展一下思路，其实我们还可以通过检查verdaccio服务进程是否存在来判断verdaccio服务正常与否。怎么判断进程是否存在呢？这里不再详细介绍，请参考一下代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查询有几个进程占用了`4873`端口</span>count<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">lsof</span> -ti :4873 <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$count</span> -ne 0 <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">'ok'</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">'not ok'</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种方案不如第一种直观，我仍然把它写出来主要是提醒各位多多思考，不要拘泥于某一种方案。接下来我们仍然采用第一种更加直观的方案继续进行。</p><h2 id="服务挂了以后自动重启"><a href="#服务挂了以后自动重启" class="headerlink" title="服务挂了以后自动重启"></a>服务挂了以后自动重启</h2><p>在上一节中我们已经能够检查服务是否正常了，在这一节中我们要实现的是自动重启服务，这个就非常简单了，想想我们是怎么启动verdaccio的，嗯，我们是在控制台中输入一下命令，nohup verdaccio &amp;，其中nohup让命令永远执行下去，即使用户退出也没有关系，&amp;让程序在后台运行。两者结合起来就可以程序永久地在后台运行。</p><pre class="line-numbers language-bash"><code class="language-bash">header<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>curl -I http://example:4873<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$header</span> <span class="token operator">=</span>~ <span class="token string">'HTTP/1.1 200 OK'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">'ok'</span><span class="token punctuation">;</span><span class="token keyword">else</span>    <span class="token comment" spellcheck="true"># 重启服务</span>    <span class="token function">nohup</span> verdaccio <span class="token operator">&amp;</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定期监控服务运行状况"><a href="#定期监控服务运行状况" class="headerlink" title="定期监控服务运行状况"></a>定期监控服务运行状况</h2><p>通过前面两个步骤我们已经写出一个脚本，它会检查服务是否正常运行，如果服务挂掉了就会重启。这还是这个检查工作是一次性的，需要我们不停地执行脚本。当然可以通过crontab命令（以后再介绍）实现，不过在这里我们将通过写一个死循环逻辑来实现每隔一段时间来检查服务是否正常运行。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token keyword">do</span>    header<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>curl -I http://example:4873<span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$header</span> <span class="token operator">=</span>~ <span class="token string">'HTTP/1.1 200 OK'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">'ok'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true"># 重启服务</span>        <span class="token function">nohup</span> verdaccio <span class="token operator">&amp;</span>    <span class="token keyword">fi</span>    <span class="token comment" spellcheck="true"># 每个10秒检查一次</span>    <span class="token function">sleep</span> 10s<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sleep命令会让程序暂停一段时间，很适合用在循环方式运行的监控脚本中，它有一个参数表示要暂停的时间，时间单位可以是s秒，m分钟，h小时和d天。默认为秒。我们也可以传入小数0.1s来实现毫秒级的睡眠，但是sleep命令只能保证10ms的睡眠，如果你对时间精度要求特别高的话，sleep命令就无能为力了。</p><h2 id="重启服务以后记录日志"><a href="#重启服务以后记录日志" class="headerlink" title="重启服务以后记录日志"></a>重启服务以后记录日志</h2><p>当服务挂了以后除了重启以外，还需要将重启行为记入到日志文件中，方便以后我们查看什么时候服务被重启了，最终代码如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token comment" spellcheck="true"># 获取脚本目录</span>shell_folder<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cd</span> `dirname $0`<span class="token punctuation">;</span> <span class="token function">pwd</span><span class="token variable">)</span></span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token keyword">do</span>    header<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>curl -I http://example:4873<span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$header</span> <span class="token operator">=</span>~ <span class="token string">'HTTP/1.1 200 OK'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">'ok'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true"># 重启服务并记录日志</span>        <span class="token function">nohup</span> verdaccio <span class="token operator">&amp;</span>        <span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y-%m-%d\ %H:%M:%S<span class="token variable">`</span></span> <span class="token string">"restart"</span> <span class="token operator">>></span> <span class="token variable">$shell_folder</span>/verdaccio.restart.log    <span class="token keyword">fi</span>    <span class="token comment" spellcheck="true"># 每个10秒检查一次</span>    <span class="token function">sleep</span> 10s<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令<strong>nohup sh verdaccio.sh &amp;</strong>就启动了一个守护进程，实现了每隔10秒检查一次服务是否运行正常，如果挂掉就会重启的功能，并且还会记录到日志中。</p><p>如果你是在Ubuntu服务器上运行该命令，可能会遇到这个错误[[: not found，这是因为sh只是一个符号链接，最终指向是一个叫做dash的程序，自Ubuntu 6.10以后，系统的默认<strong>shell /bin/sh</strong>被改成了<strong>dash</strong>。<strong>dash(the Debian Almquist shell)</strong> 是一个比bash小很多但仍兼容POSIX标准的shell，它占用的磁盘空间更少，执行shell脚本比bash更快，依赖的库文件更少，当然，在功能上无法与bash相比。所以在Ubuntu上我们需要指定使用bash，即<strong>nohup bash verdaccio.sh &amp;</strong>。</p><h2 id="如何取消服务自动重启"><a href="#如何取消服务自动重启" class="headerlink" title="如何取消服务自动重启"></a>如何取消服务自动重启</h2><p>如果有一天，你想关闭verdaccio服务，守护进程就会检测到该服务挂掉，并自动重启该服务。导致你想关闭该服务也不行了。所以我们首先要先关闭守护进程，如何关闭呢？我们可以使用jobs命令查看守护进程ID，然后杀掉该进程。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">jobs</span> -l<span class="token function">kill</span> -9 <span class="token operator">&lt;</span>id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>针对verdaccio的特殊方案</p><p>其实verdaccio是用Node写的，因此可以通过pm2让其达到自动重启的功能，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动</span>pm2 start <span class="token function">which</span> verdaccio <span class="token comment" spellcheck="true"># 停止</span>pm2 stop <span class="token function">which</span> verdaccio <span class="token comment" spellcheck="true"># 查看日志</span>pm2 show verdaccio<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本实例(七)</title>
      <link href="/shell-jiao-ben-shi-li-qi/"/>
      <url>/shell-jiao-ben-shi-li-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="【脚本92】截取tomcat日志"><a href="#【脚本92】截取tomcat日志" class="headerlink" title="【脚本92】截取tomcat日志"></a>【脚本92】截取tomcat日志</h1><p>写一个截取tomcat catalina.out日志的脚本。</p><p>tomcat实例t1-t4：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@server ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tree -L 1 /opt/TOM/</span>/opt/TOM/├── crontabs├── t1├── t2├── t3└── t45 directories, 0 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>catalina.out日志路径：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@server ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># find /opt/TOM/ -name catalina.out</span>/opt/TOM/t1/logs/catalina.out/opt/TOM/t3/logs/catalina.out/opt/TOM/t4/logs/catalina.out/opt/TOM/t2/logs/catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要求：</li></ul><p>这个脚本可以取tomcat实例t1-t4的日志<br>这个脚本可以自定义取日志的起始点，比如取今天早上10点之后到现在的数据<br>这个脚本可以自定义取日志的起始点和终点，比如取今天早上9点到晚上8点的数据<br>catalina.out 日志片段：</p><pre class="line-numbers language-log"><code class="language-log">Mar 29, 2016 1:52:24 PM org.apache.coyote.AbstractProtocol startINFO: Starting ProtocolHandler [“http-bio-8080”]Mar 29, 2016 1:52:24 PM org.apache.coyote.AbstractProtocol startINFO: Starting ProtocolHandler [“ajp-bio-8009”]Mar 29, 2016 1:52:24 PM org.apache.catalina.startup.Catalina startINFO: Server startup in 2102 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-参考代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">export</span> LANG<span class="token operator">=</span>en_US.UTF-8<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span>IPADD<span class="token operator">=</span>`/sbin/ifconfig <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"inet addr"</span> <span class="token operator">|</span> <span class="token function">head</span> -1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span><span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">'.'</span> <span class="token string">'{print <span class="token variable">$NF</span>}'</span>`LOGFILE<span class="token operator">=</span><span class="token string">"/opt/TOM/<span class="token variable">$1</span>/logs/catalina.out"</span>YEAR<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y<span class="token variable">`</span></span>DATE<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%m%d_%H%M<span class="token variable">`</span></span>TOMCAT<span class="token operator">=</span><span class="token variable">$1</span>BEGIN_TIME<span class="token operator">=</span><span class="token variable">$YEAR</span><span class="token variable">$2</span>END_TIME<span class="token operator">=</span><span class="token variable">$YEAR</span><span class="token variable">$3</span><span class="token comment" spellcheck="true">##judge is  a.m.or p.m.</span>TIME_HOUR1<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token keyword">echo</span> $<span class="token punctuation">{</span>BEGIN_TIME:9:2<span class="token punctuation">}</span><span class="token variable">`</span></span>cut_log<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        N_DATE1<span class="token operator">=</span>`echo <span class="token variable">$1</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/_/ /g'</span><span class="token variable"><span class="token variable">`</span>        D_DATE1<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token variable">$2</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/_/ /g'</span><span class="token variable"><span class="token variable">`</span>        E_DATE1<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token variable">$3</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/_/ /g'</span><span class="token variable"><span class="token variable">`</span>        <span class="token punctuation">[</span> $4 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> N_DATE2<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token variable">$4</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/_/ /g'</span><span class="token variable"><span class="token variable">`</span>        <span class="token punctuation">[</span> $5 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> D_DATE2<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token variable">$5</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/_/ /g'</span><span class="token variable"><span class="token variable">`</span>        <span class="token punctuation">[</span> $6 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> E_DATE2<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token variable">$6</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/_/ /g'</span><span class="token variable"><span class="token variable">`</span>        BEGIN<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">grep</span> -nE <span class="token string">"<span class="token variable">${N_DATE1}</span>|<span class="token variable">${D_DATE1}</span>|<span class="token variable">${E_DATE1}</span>"</span> <span class="token variable">${LOGFILE}</span> <span class="token operator">|</span> <span class="token function">head</span> -1 <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token keyword">:</span> -f1`        <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$N_DATE2</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> END<span class="token operator">=</span>`grep -nE <span class="token string">"<span class="token variable">${N_DATE2}</span>|<span class="token variable">${D_DATE2}</span>|<span class="token variable">${E_DATE2}</span>"</span> <span class="token variable">${LOGFILE}</span> <span class="token operator">|</span> <span class="token function">tail</span> -1 <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token keyword">:</span> -f1`        <span class="token punctuation">[</span> <span class="token operator">!</span> -z <span class="token string">"<span class="token variable">${TIME_HOUR1}</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">${TIME_HOUR1}</span> -gt 12 <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>                BEGIN1<span class="token operator">=</span>`grep -nE <span class="token string">"<span class="token variable">${N_DATE1}</span>|<span class="token variable">${D_DATE1}</span>|<span class="token variable">${E_DATE1}</span>"</span> <span class="token variable">${LOGFILE}</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">" PM "</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"<span class="token variable">${E_DATE1}</span>"</span> <span class="token operator">|</span> <span class="token function">head</span> -1 <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token keyword">:</span> -f1`                <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -z <span class="token string">"<span class="token variable">${BEGIN1}</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>                <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${BEGIN1}</span>"</span> -gt <span class="token string">"<span class="token variable">${BEGIN}</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> BEGIN<span class="token operator">=</span><span class="token variable">${BEGIN1}</span>                <span class="token keyword">fi</span>        <span class="token keyword">fi</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$BEGIN</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">$END</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>                <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$N_DATE2</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                        <span class="token keyword">echo</span>  <span class="token string">"<span class="token variable">${END_TIME}</span>时间点没有访问日志，请重新设置时间点."</span>                <span class="token keyword">else</span>                        <span class="token function">sed</span> -n <span class="token string">"<span class="token variable">${BEGIN}</span>,[        DISCUZ_CODE_0        ]quot;p <span class="token variable">${LOGFILE}</span> > /home/gcweb/<span class="token variable">${IPADD}</span>_<span class="token variable">${TOMCAT}</span>_<span class="token variable">${DATE}</span>.log                fi        elif [ "</span><span class="token variable">$END</span><span class="token string">" ];then                [ "</span><span class="token variable">$BEGIN</span><span class="token string">" ] || BEGIN=1                sed -n "</span><span class="token variable">${BEGIN}</span>,<span class="token variable">${END}</span><span class="token string">"p <span class="token variable">${LOGFILE}</span> > /home/gcweb/<span class="token variable">${IPADD}</span>_<span class="token variable">${TOMCAT}</span>_<span class="token variable">${DATE}</span>.log        else                [ "</span><span class="token variable">$END_TIME</span><span class="token string">" != "</span><span class="token variable">$YEAR</span><span class="token string">" ] &amp;&amp; echo "</span>该时段 <span class="token variable">${BEGIN_TIME}</span>～<span class="token variable">${END_TIME}</span> 没有日志.<span class="token string">"                [ "</span><span class="token variable">$END_TIME</span><span class="token string">" = "</span><span class="token variable">$YEAR</span><span class="token string">" ] &amp;&amp; echo "</span>该时段 <span class="token variable">${BEGIN_TIME}</span>～now 没有日志.<span class="token string">"        fi        if [ -s /home/gcweb/<span class="token variable">${IPADD}</span>_<span class="token variable">${TOMCAT}</span>_<span class="token variable">${DATE}</span>.log ]; then                cd /home/gcweb  &amp;&amp;  tar -zcf <span class="token variable">${IPADD}</span>_<span class="token variable">${TOMCAT}</span>_<span class="token variable">${DATE}</span>.tar.gz <span class="token variable">${IPADD}</span>_<span class="token variable">${TOMCAT}</span>_<span class="token variable">${DATE}</span>.log                rm -f /home/gcweb/<span class="token variable">${IPADD}</span>_<span class="token variable">${TOMCAT}</span>_<span class="token variable">${DATE}</span>.log                sz /home/gcweb/<span class="token variable">${IPADD}</span>_<span class="token variable">${TOMCAT}</span>_<span class="token variable">${DATE}</span>.tar.gz                echo "</span>Success to get logs.<span class="token string">"                rm -f /home/gcweb/<span class="token variable">${IPADD}</span>_<span class="token variable">${TOMCAT}</span>_<span class="token variable">${DATE}</span>.tar.gz        fi}get_time() {        case "</span><span class="token variable">$1</span><span class="token string">" in                4)                       N_DATE=`date -d "</span><span class="token variable">$2</span><span class="token string">" +"</span>%Y-%m-%d<span class="token string">" 2>/dev/null<span class="token variable"><span class="token variable">`</span>                 D_DATE<span class="token operator">=</span><span class="token variable">`</span></span>date -d "</span><span class="token variable">$2</span><span class="token string">" +"</span>%Y/%m/%d<span class="token string">" 2>/dev/null<span class="token variable"><span class="token variable">`</span>                 E_DATE<span class="token operator">=</span><span class="token variable">`</span></span>date -d "</span><span class="token variable">$2</span><span class="token string">" +"</span>%h %e,_%Y<span class="token string">" 2>/dev/null|sed 's/ /_/g'<span class="token variable"><span class="token variable">`</span>                 <span class="token keyword">echo</span> $N_DATE $D_DATE $E_DATE                 <span class="token punctuation">;</span><span class="token punctuation">;</span>                      7<span class="token punctuation">)</span>                       TIME<span class="token operator">=</span><span class="token variable">`</span></span>echo <span class="token variable">$2</span> | awk -F'_' '{print <span class="token variable">$1</span>,<span class="token variable">$2</span>}'<span class="token variable"><span class="token variable">`</span>                 N_DATE<span class="token operator">=</span><span class="token variable">`</span></span>date -d "</span><span class="token variable">$TIME</span><span class="token string">" +"</span>%Y-%m-%d_%H<span class="token string">" 2>/dev/null<span class="token variable"><span class="token variable">`</span>                 D_DATE<span class="token operator">=</span><span class="token variable">`</span></span>date -d "</span><span class="token variable">$TIME</span><span class="token string">" +"</span>%Y/%m/%d_%H<span class="token string">" 2>/dev/null<span class="token variable"><span class="token variable">`</span>                 E_DATE<span class="token operator">=</span><span class="token variable">`</span></span>date -d "</span><span class="token variable">$TIME</span><span class="token string">" +"</span>%h %e,_%Y %l<span class="token string">" 2>/dev/null|sed 's/ /_/g'`                 echo  "</span><span class="token variable">$N_DATE</span><span class="token string">"  "</span><span class="token variable">$D_DATE</span><span class="token string">" "</span><span class="token variable">$E_DATE</span><span class="token string">"                ;;                9)                      TIME=<span class="token variable"><span class="token variable">`</span><span class="token keyword">echo</span> $2 <span class="token operator">|</span> <span class="token function">awk</span> -F'_' '<span class="token punctuation">{</span>print $1,$2<span class="token punctuation">}</span>'<span class="token variable">`</span></span>                 N_DATE=`date -d "</span><span class="token variable">$TIME</span><span class="token string">" +"</span>%Y-%m-%d_%H:%M<span class="token string">" 2>/dev/null<span class="token variable"><span class="token variable">`</span>                 D_DATE<span class="token operator">=</span><span class="token variable">`</span></span>date -d "</span><span class="token variable">$TIME</span><span class="token string">" +"</span>%Y/%m/%d_%H:%M<span class="token string">" 2>/dev/null<span class="token variable"><span class="token variable">`</span>                 E_DATE<span class="token operator">=</span><span class="token variable">`</span></span>date -d "</span><span class="token variable">$TIME</span><span class="token string">" +"</span>%h %e,_%Y %l:%M<span class="token string">" 2>/dev/null|sed 's/ /_/g'`                 echo  "</span><span class="token variable">$N_DATE</span><span class="token string">" "</span><span class="token variable">$D_DATE</span><span class="token string">" "</span><span class="token variable">$E_DATE</span><span class="token string">"                ;;                *)                       echo 1                ;;       esac}check_arguments () {        if [ "</span><span class="token variable">$1</span><span class="token string">" == 1 ] || [ -z  "</span><span class="token variable">$1</span><span class="token string">" ] ;then                echo "</span>你输入时间参数的格式无法识别, usage: 0108、0108_10、0108_1020<span class="token string">"                exit 3        fi}check_tomcat () {        if [ ! -s "</span><span class="token variable">${LOGFILE}</span><span class="token string">" ] ;then          echo "</span>tomcat_name: <span class="token variable">${TOMCAT}</span> is not exist<span class="token string">"          echo "</span>you can choose:<span class="token string">"          /bin/ls  /home/gcweb/usr/local/        fi        if [ <span class="token variable">$1</span> -lt 2 ] || [ ! -s "</span><span class="token variable">${LOGFILE}</span><span class="token string">" ];then                echo "</span>usage: <span class="token variable">$0</span> tomcat_name <span class="token punctuation">{</span>begin_time<span class="token operator">|</span>begin_time end_time<span class="token punctuation">}</span><span class="token string">"                exit 2        fi}case "</span>$<span class="token comment" spellcheck="true">#" in</span>    0<span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"usage: <span class="token variable">$0</span> tomcat_name {begin_time|begin_time end_time}"</span>        <span class="token keyword">exit</span> 1        <span class="token punctuation">;</span><span class="token punctuation">;</span>    1<span class="token punctuation">)</span>        check_tomcat $<span class="token comment" spellcheck="true">#</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    2<span class="token punctuation">)</span>        check_tomcat $<span class="token comment" spellcheck="true">#</span>        len<span class="token operator">=</span>`echo <span class="token variable">$2</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print length(<span class="token variable">$0</span>)}'</span>`        A_DATE<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>get_time  $len $BEGIN_TIME<span class="token variable">)</span></span>        <span class="token function">eval</span>  <span class="token punctuation">$(</span> <span class="token keyword">echo</span> <span class="token variable">$A_DATE</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print "N_DATE="<span class="token variable">$1</span>,"D_DATE="<span class="token variable">$2</span>,"E_DATE="<span class="token variable">$3</span>}'</span><span class="token punctuation">)</span>        check_arguments <span class="token string">"<span class="token variable">${N_DATE}</span>"</span>        cut_log <span class="token string">"<span class="token variable">${N_DATE}</span>"</span> <span class="token string">"<span class="token variable">${D_DATE}</span>"</span> <span class="token string">"<span class="token variable">${E_DATE}</span>"</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    3<span class="token punctuation">)</span>        check_tomcat $<span class="token comment" spellcheck="true">#</span>        len1<span class="token operator">=</span>`echo <span class="token variable">$2</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print length(<span class="token variable">$0</span>)}'</span><span class="token variable"><span class="token variable">`</span>        len2<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token variable">$3</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print length(<span class="token variable">$0</span>)}'</span>`        A_DATE<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>get_time $<span class="token punctuation">{</span>len1<span class="token punctuation">}</span>  $BEGIN_TIME<span class="token variable">)</span></span>        <span class="token function">eval</span>  <span class="token punctuation">$(</span> <span class="token keyword">echo</span> <span class="token variable">$A_DATE</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print "N_DATE1="<span class="token variable">$1</span>,"D_DATE1="<span class="token variable">$2</span>,"E_DATE1="<span class="token variable">$3</span>}'</span><span class="token punctuation">)</span>        check_arguments <span class="token string">"<span class="token variable">${N_DATE1}</span>"</span>        A_DATE<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>get_time $<span class="token punctuation">{</span>len2<span class="token punctuation">}</span>  $END_TIME<span class="token variable">)</span></span>        <span class="token function">eval</span>  <span class="token punctuation">$(</span> <span class="token keyword">echo</span> <span class="token variable">$A_DATE</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print "N_DATE="<span class="token variable">$1</span>,"D_DATE="<span class="token variable">$2</span>,"E_DATE="<span class="token variable">$3</span>}'</span><span class="token punctuation">)</span>        check_arguments <span class="token string">"<span class="token variable">${N_DATE}</span>"</span>        cut_log <span class="token variable">${N_DATE1}</span> <span class="token variable">${D_DATE1}</span> <span class="token variable">${E_DATE1}</span> <span class="token string">"<span class="token variable">${N_DATE}</span>"</span> <span class="token string">"<span class="token variable">${D_DATE}</span>"</span> <span class="token string">"<span class="token variable">${E_DATE}</span>"</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"usage: <span class="token variable">$0</span> tomcat_name {begin_time|begin_time end_time};你使用的参数太多哦."</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本93】数组"><a href="#【脚本93】数组" class="headerlink" title="【脚本93】数组"></a>【脚本93】数组</h1><p>写一个脚本让用户输入多个城市的名字（可以是中文），要求不少于5个，然后把这些城市存到一个数组里，最后用for循环把它们打印出来。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>  <span class="token function">read</span> -p <span class="token string">"请输入至少5个城市的名字，用空格分隔:"</span> cityn<span class="token operator">=</span>`echo <span class="token variable">$city</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print NF}'</span>`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -lt 5 <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"输入的城市个数至少为5"</span>    <span class="token keyword">exit</span><span class="token keyword">fi</span>name<span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$city</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">${name[@]}</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本94】批量同步代码"><a href="#【脚本94】批量同步代码" class="headerlink" title="【脚本94】批量同步代码"></a>【脚本94】批量同步代码</h1><ul><li>需求背景是：</li></ul><p>一个业务，有3台服务器（A，B，C）做负载均衡，由于规模太小目前并未使用专业的自动化运维工具。有新的需求时，开发同事改完代码会把变更上传到其中一台服务器A上。但是其他2台服务器也需要做相同变更。</p><p>写一个shell脚本，把A服务器上的变更代码同步到B和C上。</p><p>其中，你需要考虑到不需要同步的目录（假如有tmp、upload、logs、caches）</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">echo</span> <span class="token string">"该脚本将会把A机器上的/data/wwwroot/www.aaa.com目录同步到B,C机器上"</span><span class="token punctuation">;</span><span class="token function">read</span> -p <span class="token string">"是否要继续？(y|n) "</span>rs<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">rsync</span> -azP \    --exclude logs \    --exclude upload \    --exclude caches \    --exclude tmp \www.aaa.com/ <span class="token variable">$1</span>:/data/wwwroot/www.aaa.com/<span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$REPLY</span> <span class="token operator">==</span> <span class="token string">'y'</span> -o <span class="token variable">$REPLY</span> <span class="token operator">==</span> <span class="token string">'Y'</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"即将同步……"</span>    <span class="token function">sleep</span> 2    <span class="token function">cd</span> /data/wwwroot/    rs B机器ip    rs C机器ip    <span class="token keyword">echo</span> <span class="token string">"同步完成。"</span>   <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$REPLY</span> <span class="token operator">==</span> <span class="token string">'n'</span> -o <span class="token variable">$REPLY</span> <span class="token operator">==</span> <span class="token string">'N'</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">exit</span> 1<span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"请输入字母y或者n"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本95】统计并发量"><a href="#【脚本95】统计并发量" class="headerlink" title="【脚本95】统计并发量"></a>【脚本95】统计并发量</h1><ul><li>需求背景：</li></ul><p>需要统计网站的并发量，并绘图。</p><ul><li>思路：</li></ul><p>借助zabbix成图<br>通过统计访问日志每秒的日志条数来判定并发量<br>zabbix获取数据间隔30s</p><ul><li>说明：<br>只需要写出shell脚本即可，不用关心zabbix配置。</li></ul><p>假设日志路径为：</p><pre class="line-numbers language-txt"><code class="language-txt">/data/logs/www.aaa.com_access.log <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>日志格式如下：</p><pre class="line-numbers language-log"><code class="language-log">112.107.15.12 - [07/Nov/2017:09:59:01 +0800] www.aaa.com "/api/live.php" 200"-" "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>log<span class="token operator">=</span>/data/logs/www.aaa.com_access.logt<span class="token operator">=</span>`date -d <span class="token string">"-1 second"</span> +%Y:%H:%M:%S`<span class="token comment" spellcheck="true">#可以大概分析一下每分钟日志的量级，比如说不超过3000</span>n<span class="token operator">=</span>tail -3000 <span class="token variable">$log</span> <span class="token operator">|</span><span class="token function">grep</span> -c <span class="token string">"<span class="token variable">$t</span>"</span><span class="token keyword">echo</span> <span class="token variable">$n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本96】关闭服务"><a href="#【脚本96】关闭服务" class="headerlink" title="【脚本96】关闭服务"></a>【脚本96】关闭服务</h1><p>在centos6系统里，我们可以使用ntsysv关闭不需要开机启动的服务，当然也可以使用chkconfig工具来实现。</p><p>写一个shell脚本，用chkconfig工具把不常用的服务关闭。脚本需要写成交互式的，需要我们给它提供关闭的服务名字。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>LANG<span class="token operator">=</span>enc<span class="token operator">=</span><span class="token string">"1"</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token variable">$c</span> <span class="token operator">==</span> <span class="token string">"q"</span> <span class="token punctuation">]</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> -e <span class="token string">"\033[35mPlease chose a service to close from this list: \033[0m"</span>    <span class="token function">chkconfig</span> --list <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'/3:on/ {print <span class="token variable">$1</span>}'</span>    <span class="token function">read</span> -p <span class="token string">"Which service to close: "</span> s    <span class="token function">chkconfig</span> <span class="token variable">$s</span> off    <span class="token function">service</span> <span class="token variable">$s</span> stop    <span class="token function">read</span> -p  <span class="token string">"If you want's to quit this program, tab "</span>q<span class="token string">", or tab "</span>Ctrl c<span class="token string">": "</span> c<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本97】重启tomcat服务"><a href="#【脚本97】重启tomcat服务" class="headerlink" title="【脚本97】重启tomcat服务"></a>【脚本97】重启tomcat服务</h1><p>在生产环境中，经常遇到tomcat无法彻底关闭，也就是说用tomcat自带shutdown.sh脚本无法将java进程完全关掉。所以，需要借助shell脚本，将进程杀死，然后再启动。</p><p>写一个shell脚本，实现上述功能。彻底杀死一个进程的命令是 kill -9 pid.</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">###功能： 重启 tomcat 进程</span><span class="token comment" spellcheck="true">###要求：对于tomcat中的某些应用，使用shutdown.sh是无法完全停掉所有服务的 实际操作中都需要kill掉tomcat再重启</span><span class="token comment" spellcheck="true">##</span><span class="token comment" spellcheck="true">### root can not run this script.</span><span class="token comment" spellcheck="true">##</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$USER</span> <span class="token operator">=</span> root <span class="token punctuation">]</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"root cann't run this script!please run with other user!"</span>        <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token comment" spellcheck="true">##</span><span class="token comment" spellcheck="true">### check the Parameter</span><span class="token comment" spellcheck="true">##</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> $<span class="token comment" spellcheck="true"># -ne 1 ]]</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"Usage:<span class="token variable">$0</span> tomcatname"</span>        <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token comment" spellcheck="true">##</span><span class="token comment" spellcheck="true">### only one process can run one time</span><span class="token comment" spellcheck="true">##</span>TMP_FILE_U<span class="token operator">=</span>/tmp/.tmp.ps.keyword.<span class="token variable">$USER</span>.956327.txt<span class="token comment" spellcheck="true">#echo $TMP_FILE_U</span>KEYWORD1<span class="token operator">=</span><span class="token string">"<span class="token variable">$0</span>"</span>KEYWORD2<span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span><span class="token comment" spellcheck="true"># 使用赋值会多fork出一个进程,所以要先重定向到一个文本,再统计.</span><span class="token function">ps</span> ux <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"<span class="token variable">$KEYWORD1</span>"</span><span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"\&lt;<span class="token variable">$KEYWORD2</span>\>"</span><span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">"grep"</span> <span class="token operator">></span> <span class="token variable">$TMP_FILE_U</span>Pro_count<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> $TMP_FILE_U <span class="token operator">|</span><span class="token function">wc</span> -l<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$Pro_count</span> -gt 1 <span class="token punctuation">]</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"An other process already running ,exit now!"</span>        <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token comment" spellcheck="true">###################################################</span><span class="token comment" spellcheck="true">#                                                 #</span><span class="token comment" spellcheck="true">#               begin of the script               #</span><span class="token comment" spellcheck="true">#                                                 #</span><span class="token comment" spellcheck="true">###################################################</span><span class="token comment" spellcheck="true">##</span><span class="token comment" spellcheck="true">### set the Parameter</span><span class="token comment" spellcheck="true">##</span>TOM<span class="token operator">=</span>`echo <span class="token variable">$1</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s#/##g'</span>`TOMCAT_DIRECTORY<span class="token operator">=</span>~/usr/local/<span class="token variable">$TOM</span>STARTUP_SCRIPT<span class="token operator">=</span><span class="token variable">$TOMCAT_DIRECTORY</span>/bin/startup.shTOMCAT_LOG<span class="token operator">=</span><span class="token variable">$TOMCAT_DIRECTORY</span>/logs/catalina.outCONF_FILE<span class="token operator">=</span><span class="token variable">$TOMCAT_DIRECTORY</span>/conf/server.xmlTEMPFILE<span class="token operator">=</span>/tmp/.tmpfile.x.89342.c4r3.tmp<span class="token comment" spellcheck="true">##</span><span class="token comment" spellcheck="true">### check if the tomcat directory exist</span><span class="token comment" spellcheck="true">##</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token string">"<span class="token variable">$TOMCAT_DIRECTORY</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"the tomcat \"<span class="token variable">$TOM</span>\" not exist.check again!"</span>        <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token comment" spellcheck="true">##</span><span class="token comment" spellcheck="true">### log roteta and delete log one week ago</span><span class="token comment" spellcheck="true">##</span>rotate_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>TIME_FORMART<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d%H%M%S<span class="token variable">)</span></span>LOG_DIR<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> $TOMCAT_LOG<span class="token variable">)</span></span><span class="token function">mv</span> <span class="token variable">$TOMCAT_LOG</span> <span class="token variable">${TOMCAT_LOG}</span>_<span class="token variable">${TIME_FORMART}</span><span class="token function">find</span> <span class="token variable">$LOG_DIR</span> -type f -ctime +7 -exec <span class="token function">rm</span> -rf <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">##</span><span class="token comment" spellcheck="true">### function start the tomcat</span><span class="token comment" spellcheck="true">##</span>start_tomcat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">#echo start-tomcat-func</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -x  <span class="token string">"<span class="token variable">$STARTUP_SCRIPT</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>        rotate_log        <span class="token variable">$STARTUP_SCRIPT</span>        <span class="token function">sleep</span> 1        <span class="token function">tail</span> -f <span class="token variable">$TOMCAT_LOG</span><span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> -e <span class="token variable">$STARTUP_SCRIPT</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>                <span class="token function">chmod</span> +x <span class="token variable">$STARTUP_SCRIPT</span><span class="token comment" spellcheck="true">#               echo "permition added!"</span>                <span class="token keyword">if</span> <span class="token punctuation">[</span> -x  <span class="token string">"<span class="token variable">$STARTUP_SCRIPT</span>"</span> <span class="token punctuation">]</span>                <span class="token keyword">then</span>                        rotate_log                        <span class="token variable">$STARTUP_SCRIPT</span>                        <span class="token function">sleep</span> 1                        <span class="token function">tail</span> -f <span class="token variable">$TOMCAT_LOG</span>                <span class="token keyword">else</span>                        <span class="token keyword">echo</span> <span class="token string">"The script not have excute permision,Couldn't add permision to Script!"</span>                        <span class="token keyword">exit</span> 1                <span class="token keyword">fi</span>        <span class="token keyword">else</span>                <span class="token keyword">echo</span> <span class="token string">"error,the script \"startup.sh\" not exist!"</span>                <span class="token keyword">exit</span> 1        <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">##</span><span class="token comment" spellcheck="true">### function stop the tomcat</span><span class="token comment" spellcheck="true">##</span>stop_tomcat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">rm</span> -rf <span class="token variable">$TEMPFILE</span><span class="token function">ps</span> ux <span class="token operator">|</span><span class="token function">grep</span> /<span class="token variable">$TOM</span>/ <span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">"grep /<span class="token variable">$TOM</span>/"</span><span class="token operator">|</span><span class="token function">grep</span> java <span class="token operator">></span> <span class="token variable">$TEMPFILE</span>Pro_Count<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> $TEMPFILE<span class="token operator">|</span><span class="token function">wc</span> -l<span class="token variable">`</span></span>PIDS<span class="token operator">=</span>`cat <span class="token variable">$TEMPFILE</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span>`<span class="token function">rm</span> -rf <span class="token variable">$TEMPFILE</span><span class="token comment" spellcheck="true">#echo $Pro_Count</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$Pro_Count</span> -eq 0 <span class="token punctuation">]</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"The tomcat not running now!"</span><span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$Pro_Count</span> -ne 1 <span class="token punctuation">]</span>        <span class="token keyword">then</span>                <span class="token keyword">echo</span> <span class="token string">"The have <span class="token variable">$Pro_Count</span> process running,killed!"</span>                <span class="token function">kill</span> -9 <span class="token variable"><span class="token variable">`</span><span class="token keyword">echo</span> $PIDS<span class="token variable">`</span></span>                WC<span class="token operator">=</span>`ps aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"/<span class="token variable">$TOM</span>/"</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">"grep /<span class="token variable">$TOM</span>/"</span> <span class="token operator">|</span> <span class="token function">grep</span> java <span class="token operator">|</span><span class="token function">wc</span> -l`                <span class="token punctuation">[</span> <span class="token variable">$WC</span> -ne 0 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>echo <span class="token string">"kill process failed!"</span><span class="token punctuation">;</span><span class="token keyword">exit</span> 1<span class="token punctuation">)</span>        <span class="token keyword">else</span>                <span class="token keyword">echo</span> <span class="token string">"Process killed!"</span>                <span class="token function">kill</span> -9 <span class="token variable"><span class="token variable">`</span><span class="token keyword">echo</span> $PIDS<span class="token variable">`</span></span>                WC<span class="token operator">=</span>`ps aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"/<span class="token variable">$TOM</span>/"</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">"grep /<span class="token variable">$TOM</span>/"</span> <span class="token operator">|</span> <span class="token function">grep</span> java <span class="token operator">|</span><span class="token function">wc</span> -l`                <span class="token punctuation">[</span> <span class="token variable">$WC</span> -ne 0 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>echo <span class="token string">"kill process failed!"</span><span class="token punctuation">;</span><span class="token keyword">exit</span> 1<span class="token punctuation">)</span>        <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">###########################</span><span class="token comment" spellcheck="true">####                   ####</span><span class="token comment" spellcheck="true">####  The main script  ####</span><span class="token comment" spellcheck="true">####                   ####</span><span class="token comment" spellcheck="true">###########################</span><span class="token keyword">echo</span> -e <span class="token string">"are you sure restart <span class="token variable">$TOM?</span>(y or n)"</span><span class="token function">read</span> ANS<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$ANS</span>"</span>a <span class="token operator">!=</span> ya <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token keyword">echo</span> -e <span class="token string">"bye! \n"</span>   <span class="token keyword">exit</span> 1<span class="token keyword">fi</span>stop_tomcat<span class="token keyword">echo</span> <span class="token string">"start tomcat ..."</span><span class="token function">sleep</span> 2start_tomcat<span class="token comment" spellcheck="true"># end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本98】取消后缀"><a href="#【脚本98】取消后缀" class="headerlink" title="【脚本98】取消后缀"></a>【脚本98】取消后缀</h1><p>至少用两种方法，批量把当前目录下面所有文件名后缀为.bak的后缀去掉，比如1.txt.bak去掉后为1.txt</p><p>假设取消的后缀为.bak</p><ul><li>方法一：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> *.bak<span class="token variable">`</span></span><span class="token keyword">do</span>     <span class="token function">mv</span> <span class="token variable">$i</span> `echo <span class="token variable">$i</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/\.bak//g'</span>`<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法二：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> *.bak<span class="token variable">`</span></span><span class="token keyword">do</span>     newname<span class="token operator">=</span>`echo <span class="token variable">$i</span><span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">'.bak'</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>`     <span class="token function">mv</span> <span class="token variable">$i</span> <span class="token variable">$newname</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本实例(六)</title>
      <link href="/shell-jiao-ben-shi-li-liu/"/>
      <url>/shell-jiao-ben-shi-li-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="【脚本77】监控cpu使用率"><a href="#【脚本77】监控cpu使用率" class="headerlink" title="【脚本77】监控cpu使用率"></a>【脚本77】监控cpu使用率</h1><p>用shell写一个监控服务器cpu使用率的监控脚本。</p><ul><li><p>思路：<br>用top -bn1 命令，取当前空闲cpu百份比值（只取整数部分），然后用100去剑这个数值。</p></li><li><p>参考代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">while</span> <span class="token keyword">:</span><span class="token keyword">do</span>    idle<span class="token operator">=</span>`top -bn1 <span class="token operator">|</span><span class="token function">sed</span> -n <span class="token string">'3p'</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$5</span>}'</span><span class="token operator">|</span><span class="token function">cut</span> -d <span class="token keyword">.</span> -f1`    use<span class="token operator">=</span>$<span class="token punctuation">[</span>100-<span class="token variable">$idle</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$use</span> -gt 90 <span class="token punctuation">]</span>    <span class="token keyword">then</span>         <span class="token keyword">echo</span> <span class="token string">"cpu use percent too high."</span>        <span class="token comment" spellcheck="true">#发邮件省略</span>    <span class="token keyword">fi</span>    <span class="token function">sleep</span> 10<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本78】获取子进程"><a href="#【脚本78】获取子进程" class="headerlink" title="【脚本78】获取子进程"></a>【脚本78】获取子进程</h1><ul><li>说明：<br>本shell题目是一个网友在公众号中提问的，正好利用这个每日习题的机会拿出来让大家一起做一做。</li></ul><p>给出一个进程PID，打印出该进程下面的子进程以及子进程下面的所有子进程。（只需要考虑子进程的子进程，再往深层次则不考虑）</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">read</span> -p <span class="token string">"please input a pid number: "</span> p<span class="token function">ps</span> -elf <span class="token operator">></span> /tmp/ps.logis_ppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$5</span>}'</span> /tmp/ps.log <span class="token operator">></span> /tmp/ps1.log    <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">grep</span> -qw <span class="token string">"<span class="token variable">$1</span>"</span> /tmp/ps1.log    <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"PID <span class="token variable">$1</span> 不是系统进程号，或者它不是父进程"</span>    <span class="token keyword">return</span> 1    <span class="token keyword">fi</span><span class="token punctuation">}</span>is_ppid <span class="token variable">$p</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">exit</span><span class="token keyword">fi</span>print_cpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    p<span class="token operator">=</span><span class="token variable">$1</span>    <span class="token function">awk</span> -v p1<span class="token operator">=</span><span class="token variable">$p</span> <span class="token string">'<span class="token variable">$5</span> == p1 {print <span class="token variable">$4</span>}'</span> /tmp/ps.log <span class="token operator">|</span><span class="token function">sort</span> -n <span class="token operator">|</span><span class="token function">uniq</span> <span class="token operator">></span>/tmp/p1.log    n<span class="token operator">=</span>`wc -l /tmp/p1.log<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>`    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -ne 0 <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"PID <span class="token variable">$p</span> 子进程 pid 如下:"</span>        <span class="token function">cat</span> /tmp/p1.log    <span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"PID <span class="token variable">$p</span> 没有子进程"</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span>print_cpid <span class="token variable">$p</span><span class="token keyword">for</span> <span class="token function">cp</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /tmp/p1.log<span class="token variable">`</span></span><span class="token keyword">do</span>    print_cpid <span class="token variable">$cp</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，一条命令查询的方法是：</p><pre class="line-numbers language-bash"><code class="language-bash">pstree -p pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="【脚本79】自动添加项目"><a href="#【脚本79】自动添加项目" class="headerlink" title="【脚本79】自动添加项目"></a>【脚本79】自动添加项目</h1><ul><li>需求背景：<br>服务器上，跑的lamp环境，上面有很多客户的项目，每个项目就是一个网站。 由于客户在不断增加，每次增加一个客户，就需要配置相应的mysql、ftp以及httpd. 这种工作是重复性非常强的，所以用脚本实现非常合适。</li></ul><p>mysql增加的是对应客户项目的数据库、用户、密码，ftp增加的是对应项目的用户、密码（使用vsftpd，虚拟用户模式），httpd就是要增加虚拟主机配置段。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>webdir<span class="token operator">=</span>/home/wwwrootftpudir<span class="token operator">=</span>/etc/vsftpd/vuusermysqlc<span class="token operator">=</span><span class="token string">"/usr/bin/mysql -uroot -xxxxxx"</span>httpd_config_f<span class="token operator">=</span><span class="token string">"/usr/local/apache2/conf/extra/httpd-vhosts.conf"</span>add_mysql_user<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mysql_p<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>mkpasswd -s 0 -l 12<span class="token variable">`</span></span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$pro</span> <span class="token variable">$mysql_p</span>"</span> <span class="token operator">></span>/tmp/<span class="token variable">$pro</span>.txt        <span class="token variable">$mysqlc</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF        grant all on <span class="token variable">$p</span>.* to "<span class="token variable">$pro</span>"@'127.0.0.1' identified by "<span class="token variable">$mysql_p</span>";EOF</span><span class="token punctuation">}</span>add_ftp_user<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ftp_p<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>mkpasswd -s 0 -l 12<span class="token variable">`</span></span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$pro</span>"</span> <span class="token operator">>></span> /root/login.txt        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$ftp_p</span>"</span> <span class="token operator">>></span> /root/login.txt        db_load -T -t <span class="token function">hash</span> -f /root/login.txt  /etc/vsftpd/vsftpd_login.db        <span class="token function">cd</span> <span class="token variable">$ftpudir</span>        <span class="token function">cp</span> aaa <span class="token variable">$pro</span>   //这里的aaa是一个文件，是之前的一个项目，可以作为配置模板        <span class="token function">sed</span> -i <span class="token string">"s/aaa/<span class="token variable">$pro</span>/"</span> <span class="token variable">$pro</span>  //把里面的aaa改为新的项目名字        /etc/init.d/vsftpd restart<span class="token punctuation">}</span>config_httpd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">mkdir</span> <span class="token variable">$webdir</span>/<span class="token variable">$pro</span>        <span class="token function">chown</span> vsftpd:vsftpd <span class="token variable">$webdir</span>/<span class="token variable">$pro</span>        <span class="token keyword">echo</span> -e <span class="token string">"&lt;VirtualHost *:80> \n     DocumentRoot "</span>/home/internet/www/<span class="token variable">$pro</span>/<span class="token string">" \n     ServerName <span class="token variable">$dom</span> \n    #ServerAlias \n&lt;/VirtualHost> "</span> <span class="token operator">>></span> <span class="token variable">$httpd_config_f</span>        /usr/local/apache2/bin/apachectl graceful<span class="token punctuation">}</span><span class="token function">read</span> -p <span class="token string">"input the project name: "</span> pro<span class="token function">read</span> -p <span class="token string">"input the domain: "</span> domadd_mysql_useradd_ftp_userconfig_httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本80】计算器"><a href="#【脚本80】计算器" class="headerlink" title="【脚本80】计算器"></a>【脚本80】计算器</h1><p>用shell写一个简易计算器，可以实现加、减、乘、除运算，假如脚本名字为1.sh，执行示例：./1.sh 1 + 2</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token comment" spellcheck="true"># -ne 3 ] </span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"参数个数不为3"</span>    <span class="token keyword">echo</span> <span class="token string">"当使用乘法时，需要加上脱义符号，例如 <span class="token variable">$0</span> 1 \* 2"</span>    <span class="token keyword">exit</span> 1<span class="token punctuation">;</span><span class="token keyword">fi</span>num1<span class="token operator">=</span>`echo <span class="token variable">$1</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/[0-9.]//g'</span>` <span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$num1</span>"</span> <span class="token punctuation">]</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span> 不是数字"</span> <span class="token punctuation">;</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span>num3<span class="token operator">=</span>`echo <span class="token variable">$3</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/[0-9.]//g'</span>` <span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$num3</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$3</span> 不是数字"</span> <span class="token punctuation">;</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token keyword">case</span> <span class="token variable">$2</span> <span class="token keyword">in</span>  +<span class="token punctuation">)</span>    <span class="token keyword">echo</span> <span class="token string">"scale=2;<span class="token variable">$1</span>+<span class="token variable">$3</span>"</span> <span class="token operator">|</span> <span class="token function">bc</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>  -<span class="token punctuation">)</span>    <span class="token keyword">echo</span> <span class="token string">"scale=2;<span class="token variable">$1</span>-<span class="token variable">$3</span>"</span> <span class="token operator">|</span> <span class="token function">bc</span>     <span class="token punctuation">;</span><span class="token punctuation">;</span>  \*<span class="token punctuation">)</span>    <span class="token keyword">echo</span> <span class="token string">"scale=2;<span class="token variable">$1*</span><span class="token variable">$3</span>"</span> <span class="token operator">|</span> <span class="token function">bc</span>     <span class="token punctuation">;</span><span class="token punctuation">;</span>  /<span class="token punctuation">)</span>    <span class="token keyword">echo</span> <span class="token string">"scale=2;<span class="token variable">$1</span>/<span class="token variable">$3</span>"</span> <span class="token operator">|</span> <span class="token function">bc</span>     <span class="token punctuation">;</span><span class="token punctuation">;</span>  *<span class="token punctuation">)</span>   <span class="token keyword">echo</span>  <span class="token string">"<span class="token variable">$2</span> 不是运算符"</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本81】判断没有文件"><a href="#【脚本81】判断没有文件" class="headerlink" title="【脚本81】判断没有文件"></a>【脚本81】判断没有文件</h1><p>判断所给目录内哪些二级目录下没有text.txt文件。</p><p>有text.txt文件的二级目录，根据文件计算选项中单词数最大的值（选项间以|分割，单词间以空格分隔）。</p><p>假如脚本名字为1.sh， 运行脚本的格式为 ./1.sh 123 root，其中123为目录名字，而root为要计算数量的单词。</p><ul><li><p>说明：<br>这个shell脚本题目出的有点歧义。 原题给的描述不是很清楚，我另外又改了一下需求，依然不是很清晰。在这里我再做一个补充： 对于有test.txt的目录，计算出该test.txt文件里面所给出单词的次数。不用找最大。</p></li><li><p>参考代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token comment" spellcheck="true"># -ne 2 ]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"useage <span class="token variable">$0</span> dir word"</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token variable">$1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token function">cd</span> <span class="token variable">$1</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span>目录不存在"</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token keyword">for</span> f <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> $1<span class="token variable">`</span></span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token variable">$f</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -f <span class="token variable">$f</span>/test.txt <span class="token punctuation">]</span>    <span class="token keyword">then</span>        n<span class="token operator">=</span>`grep -cw <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token variable">$f</span>/test.txt`        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span>/<span class="token variable">$f</span>/test.txt 里面有<span class="token variable">$n</span>个<span class="token variable">$2</span>"</span>    <span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span>/<span class="token variable">$f</span> 下面没有test.txt"</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本82】打印正方形"><a href="#【脚本82】打印正方形" class="headerlink" title="【脚本82】打印正方形"></a>【脚本82】打印正方形</h1><p>交互式脚本，根据提示，需要用户输入一个数字作为参数，最终打印出一个正方形。</p><p>在这里我提供一个linux下面的特殊字符■，可以直接打印出来。</p><ul><li>示例：<br>如果用户输入数字为5，则最终显示的效果为：</li></ul><pre class="line-numbers language-txt"><code class="language-txt">■ ■ ■ ■ ■■ ■ ■ ■ ■■ ■ ■ ■ ■■ ■ ■ ■ ■■ ■ ■ ■ ■<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">read</span> -p <span class="token string">"please input a number:"</span> <span class="token function">sum</span>a<span class="token operator">=</span>`echo <span class="token variable">$sum</span> <span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/[0-9]//g'</span>`<span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$a</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"请输入一个纯数字。"</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> $sum<span class="token variable">`</span></span><span class="token keyword">do</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> $sum<span class="token variable">`</span></span>    <span class="token keyword">do</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$m</span> -lt <span class="token variable">$sum</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>            <span class="token keyword">echo</span> -n <span class="token string">"■ "</span>        <span class="token keyword">else</span>            <span class="token keyword">echo</span> <span class="token string">"■"</span>        <span class="token keyword">fi</span>    <span class="token keyword">done</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本83】问候用户"><a href="#【脚本83】问候用户" class="headerlink" title="【脚本83】问候用户"></a>【脚本83】问候用户</h1><p>写一个脚本，依次向/etc/passwd中的每个用户问好，并且说出对方的ID是什么：</p><p>Hello,root，your UID is 0.</p><ul><li>参考命令：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> -F <span class="token string">':'</span> <span class="token string">'{print "Hello,"<span class="token variable">$1</span>",your uid is "<span class="token variable">$3</span>.}'</span> /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="【脚本84】按要求处理文本"><a href="#【脚本84】按要求处理文本" class="headerlink" title="【脚本84】按要求处理文本"></a>【脚本84】按要求处理文本</h1><p>linux系统 /home目录下有一个文件test.xml，内容如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactItems</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactItem</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>zzz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactItem</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactItem</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>yyy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactItem</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;/artifactItem>&lt;groupId>some groupId&lt;/groupId>        &lt;version>1.0.1.2.333.555&lt;/version> &lt;/artifactItem>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactItems</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请写出shell脚本删除文件中的注释部分内容，获取文件中所有artifactItem的内容，并用如下格式逐行输出 artifactItem：groupId：artifactId</p><ul><li><p>分析：<br>这个文件比较特殊，但是却很有规律。注释部分内容其实就是&lt;!– –&gt;中间的内容，所以我们想办法把这些内容删除掉就ok了。而artifactItem的内容，其实就是获取<code>&lt;artifactItem&gt;&lt;/artifactItem&gt;</code>中间的内容。然后想办法用提到的格式输出即可。</p></li><li><p>参考代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">egrep</span> -v <span class="token string">'&lt;!--|-->'</span> 1.txt <span class="token operator">|</span><span class="token function">tee</span> 2.txt  //这行就是删除掉注释的行<span class="token function">grep</span> -n <span class="token string">'artifactItem>'</span> 2.txt <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span> <span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/://'</span> <span class="token operator">></span> /tmp/line_number.txtn<span class="token operator">=</span>`wc -l /tmp/line_number.txt<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>`get_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sed</span> -n <span class="token string">"<span class="token variable">$1</span>,<span class="token variable">$2</span>"</span>p 2.txt<span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">'&lt;'</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span><span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">'>'</span> <span class="token string">'{print <span class="token variable">$1</span>,<span class="token variable">$2</span>}'</span> <span class="token operator">></span> /tmp/value.txt    nu<span class="token operator">=</span>`wc -l /tmp/value.txt<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token variable"><span class="token variable">`</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">`</span></span><span class="token function">seq</span> 1 <span class="token variable">$nu</span><span class="token variable"><span class="token variable">`</span>    <span class="token keyword">do</span>        x<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">sed</span> -n <span class="token string">"<span class="token variable">$i</span>"</span>p /tmp/value.txt<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token variable"><span class="token variable">`</span>        y<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">sed</span> -n <span class="token string">"<span class="token variable">$i</span>"</span>p /tmp/value.txt<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span><span class="token variable"><span class="token variable">`</span>        <span class="token keyword">echo</span> artifactItem:$x:$y    <span class="token keyword">done</span><span class="token punctuation">}</span>n2<span class="token operator">=</span>$<span class="token punctuation">[</span>$n/2<span class="token punctuation">]</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token variable">`</span></span><span class="token function">seq</span> 1 <span class="token variable">$n2</span><span class="token variable"><span class="token variable">`</span><span class="token keyword">do</span>    m1<span class="token operator">=</span>$<span class="token punctuation">[</span>$j*2-1<span class="token punctuation">]</span>    m2<span class="token operator">=</span>$<span class="token punctuation">[</span>$j*2<span class="token punctuation">]</span>    nu1<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">sed</span> -n <span class="token string">"<span class="token variable">$m1</span>"</span>p /tmp/line_number.txt<span class="token variable"><span class="token variable">`</span>    nu2<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">sed</span> -n <span class="token string">"<span class="token variable">$m2</span>"</span>p /tmp/line_number.txt`    nu3<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$nu1</span>+1<span class="token punctuation">]</span>    nu4<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$nu2</span>-1<span class="token punctuation">]</span>    get_value <span class="token variable">$nu3</span> <span class="token variable">$nu4</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本85】判断函数"><a href="#【脚本85】判断函数" class="headerlink" title="【脚本85】判断函数"></a>【脚本85】判断函数</h1><p>请使用条件函数if撰写一个shell函数 函数名为 f_judge，实现以下功能：</p><p>当/home/log 目录存在时 将/home目录下所有tmp开头的文件或目录移/home/log 目录。<br>当/home/log目录不存在时，创建该目录，然后退出。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>f_judge <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -d /home/log <span class="token punctuation">]</span>    <span class="token keyword">then</span>         <span class="token function">mv</span> /home/tmp* /home/log/    <span class="token keyword">else</span>        <span class="token function">mkdir</span> -p /home/log        <span class="token keyword">exit</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本86】批量杀进程"><a href="#【脚本86】批量杀进程" class="headerlink" title="【脚本86】批量杀进程"></a>【脚本86】批量杀进程</h1><p>linux系统中，根目录/root/下有一个文件ip-pwd.ini，内容如下：</p><pre class="line-numbers language-ini"><code class="language-ini">10.111.11.1,root,xyxyxy10.111.11.1,root,xzxzxz10.111.11.1,root,12345610.111.11.1,root,xxxxxx……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件中每一行的格式都为linux服务器的ip,root用户名,root密码，请用一个shell批量将这些服务器中的所有tomcat进程kill掉。</p><ul><li>讲解：<br>有了ip，用户名和密码，剩下的就是登录机器，然后执行命令了。批量登录机器，并执行命令，咱们课程当中有讲过一个expect脚本。所以本题就是需要这个东西来完成。</li></ul><p>首先编辑expect脚本 kill_tomcat.expect：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#!/usr/bin/expect</span><span class="token keyword">set</span> <span class="token function">passwd</span> <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> 0<span class="token punctuation">]</span><span class="token keyword">set</span> host <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> 1<span class="token punctuation">]</span>spawn <span class="token function">ssh</span> root@<span class="token variable">$host</span><span class="token function">expect</span> <span class="token punctuation">{</span>    <span class="token string">"yes/no"</span> <span class="token punctuation">{</span> send <span class="token string">"yes\r"</span><span class="token punctuation">;</span> exp_continue<span class="token punctuation">}</span>    <span class="token string">"password:"</span> <span class="token punctuation">{</span> send <span class="token string">"<span class="token variable">$passwd</span>\r"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">expect</span> <span class="token string">"]*"</span>send <span class="token string">"killall java\r"</span><span class="token function">expect</span> <span class="token string">"]*"</span>send <span class="token string">"exit\r"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编辑完后需要给这个文件执行权限：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> a+x kill_tomcat.expect<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后编辑shell脚本：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>n<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">wc</span> -l ip-pwd.ini<span class="token variable">`</span></span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 $n<span class="token variable">`</span></span><span class="token keyword">do</span>    ip<span class="token operator">=</span>`sed -n <span class="token string">"<span class="token variable">$n</span>"</span>p ip-pwd.ini <span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">','</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token variable"><span class="token variable">`</span>    pw<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">sed</span> -n <span class="token string">"<span class="token variable">$n</span>"</span>p ip-pwd.ini <span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">','</span> <span class="token string">'{print <span class="token variable">$3</span>}'</span>`    ./kill_tomcat.expect <span class="token variable">$pw</span> <span class="token variable">$ip</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本87】处理日志"><a href="#【脚本87】处理日志" class="headerlink" title="【脚本87】处理日志"></a>【脚本87】处理日志</h1><p>写一个脚本查找/data/log目录下，最后创建时间是3天前，后缀是*.log的文件，打包后发送至192.168.1.2服务上的/data/log下，并删除原始.log文件，仅保留打包后的文件</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">find</span> /data/log -name “*.log” -mtime +3 <span class="token operator">></span> /tmp/file.list<span class="token function">cd</span> /data/log<span class="token function">tar</span> czvf log.tar.gz <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /tmp/file.list<span class="token operator">|</span><span class="token function">xargs</span><span class="token variable">`</span></span><span class="token function">rsync</span> -a log.tar.gz  192.168.1.2:/data/log  <span class="token comment" spellcheck="true"># 这一步需要提前做一个免密码登录</span><span class="token keyword">for</span> f <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /tmp/file.list<span class="token variable">`</span></span><span class="token keyword">do</span>    <span class="token function">rm</span> -f <span class="token variable">$f</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本88】处理文本"><a href="#【脚本88】处理文本" class="headerlink" title="【脚本88】处理文本"></a>【脚本88】处理文本</h1><p>有如下文本，其中前5行内容为</p><pre class="line-numbers language-txt"><code class="language-txt">1111111:134432534562222222:132112221221111111:136435435443333333:123412431232222222:12123123123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用shell脚本处理后，按下面格式输出：</p><pre class="line-numbers language-txt"><code class="language-txt">[1111111]1344325345613643543544[2222222]1321122212212123123123[3333333]12341243123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token function">sort</span> -n filename <span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">':'</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token operator">|</span><span class="token function">uniq</span> <span class="token operator">></span>id.txt<span class="token keyword">for</span> <span class="token function">id</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> id.txt<span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>        <span class="token keyword">echo</span> <span class="token string">"[<span class="token variable">$id</span>]"</span>        <span class="token function">awk</span> -v id2<span class="token operator">=</span><span class="token variable">$id</span> -F <span class="token string">':'</span> <span class="token string">'<span class="token variable">$1</span>==id2 {print <span class="token variable">$2</span>}'</span> filename          <span class="token comment" spellcheck="true">#另外的方式为: awk -F ':' '$1=="'$id'" {print $2}' filename  </span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本89】清理日志"><a href="#【脚本89】清理日志" class="headerlink" title="【脚本89】清理日志"></a>【脚本89】清理日志</h1><ul><li>要求：<br>两类机器一共300多台，写个脚本自动清理这两类机器里面的日志文件。在堡垒机批量发布，也要批量发布到crontab里面。</li></ul><p>A类机器日志存放路径很统一，B类机器日志存放路径需要用匹配（因为这个目录里除了日志外，还有其他文件，不能删除。匹配的时候可用.log）</p><p>A类：/opt/cloud/log/ 删除7天前的<br>B类: /opt/cloud/instances/ 删除15天前的</p><p>要求写在一个脚本里面。不用考虑堡垒机上的操作，只需要写出shell脚本。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>dir1<span class="token operator">=</span>/opt/cloud/instances/ dir2<span class="token operator">=</span>/opt/cloud/log/  <span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token variable">$dir1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>      <span class="token function">find</span> <span class="token variable">$dir1</span> -type f -name <span class="token string">"*.log"</span> -mtime +15 <span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">rm</span> -f  <span class="token keyword">elif</span> <span class="token punctuation">[</span> -d <span class="token variable">$dir2</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>      <span class="token function">find</span> <span class="token variable">$dir2</span> -type f -mtime +7 <span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">rm</span> -f  <span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本90】"><a href="#【脚本90】" class="headerlink" title="【脚本90】"></a>【脚本90】</h1><p>贷款有两种还款的方式：等额本金法和等额本息法</p><p>简单说明一下等额本息法与等额本金法的主要区别：</p><p>等额本息法的特点是：每月的还款额相同，在月供中“本金与利息”的分配比例中，前半段时期所还的利息比例大、本金比例小，还款期限过半后逐步转为本金比例大、利息比例小。所支出的总利息比等额本金法多，而且贷款期限越长，利息相差越大。</p><p>等额本金法的特点是：每月的还款额不同，它是将贷款额按还款的总月数均分（等额本金），再加上上期剩余本金的月利息，形成一个月还款额，所以等额本金法第一个月的还款额最多 ，尔后逐月减少，越还越少。所支出的总利息比等额本息法少。</p><p>两种还款方式的比较不是我们今天的讨论范围，我们的任务就是做一个贷款计算器。</p><p>其中：等额本息每月还款额的计算公式是：<br>[贷款本金×月利率×（1+月利率）还款月数]÷[（1+月利率）还款月数－1]</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">read</span> -p <span class="token string">"请输入贷款总额（单位：万元）："</span> dkzewy<span class="token function">read</span> -p <span class="token string">"请输入贷款年利率（如年利率为6.5%，直接输入6.5）："</span> dknll<span class="token function">read</span> -p <span class="token string">"请输入贷款年限（单位：年）："</span> dknx<span class="token keyword">echo</span> <span class="token string">"贷款计算方式："</span><span class="token keyword">echo</span> <span class="token string">"1)等额本金计算法"</span><span class="token keyword">echo</span> <span class="token string">"2)等额本息计算法"</span><span class="token function">read</span> -p <span class="token string">"请选择贷款方式（1|2）"</span> dkfsdkze<span class="token operator">=</span>`echo <span class="token string">"scale=2;<span class="token variable">$dkzewy*10000</span> "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l<span class="token variable"><span class="token variable">`</span>dkll<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"scale=6;<span class="token variable">$dknll</span>/100 "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l<span class="token variable"><span class="token variable">`</span>dkyll<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"scale=6;<span class="token variable">$dkll</span>/12 "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l`dkqc<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$dknx*12</span><span class="token punctuation">]</span><span class="token keyword">echo</span> <span class="token string">"期次 本月还款额 本月利息 未还款额"</span>debjjsf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    yhbj<span class="token operator">=</span>`echo <span class="token string">"scale=2;(<span class="token variable">$dkze</span>/<span class="token variable">$dkqc</span>)/1 "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l`    whbj<span class="token operator">=</span><span class="token variable">$dkze</span>    <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>$dkqc<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>    <span class="token keyword">do</span>        bylx<span class="token operator">=</span>`echo <span class="token string">"scale=2;(<span class="token variable">$whbj*</span><span class="token variable">$dkyll</span>)/1 "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l<span class="token variable"><span class="token variable">`</span>        bybx<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"scale=2;(<span class="token variable">$yhbj</span>+<span class="token variable">$bylx</span>)/1 "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l<span class="token variable"><span class="token variable">`</span>        yhke<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"scale=2;(<span class="token variable">$yhbj*</span><span class="token variable">$i</span>)/1 "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l<span class="token variable"><span class="token variable">`</span>        whbj<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$dkze</span>-<span class="token variable">$yhke</span> "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l<span class="token variable"><span class="token variable">`</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> $i -eq $dkqc <span class="token punctuation">]</span>        <span class="token keyword">then</span>            yhbj<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"scale=2;(<span class="token variable">$yhbj</span>+<span class="token variable">$whbj</span>)/1 "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l`            whbj<span class="token operator">=</span><span class="token string">"0.00"</span>            bybx<span class="token operator">=</span>`echo <span class="token string">"scale=2;(<span class="token variable">$yhbj</span>+<span class="token variable">$bylx</span>)/1 "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l`        <span class="token keyword">fi</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$i</span> <span class="token variable">$bybx</span> <span class="token variable">$bylx</span> <span class="token variable">$whbj</span>"</span>    <span class="token keyword">done</span><span class="token punctuation">}</span>debxjsf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    bybx<span class="token operator">=</span>`echo <span class="token string">"scale=2;<span class="token variable"><span class="token punctuation">((</span>$dkze<span class="token operator">*</span>$dkyll<span class="token operator">*</span><span class="token punctuation">((</span><span class="token number">1</span><span class="token operator">+</span>$dkyll<span class="token punctuation">)</span><span class="token operator">^</span>$dkqc<span class="token punctuation">))</span></span>/<span class="token variable"><span class="token punctuation">((</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>$dkyll<span class="token punctuation">)</span><span class="token operator">^</span>$dkqc<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">))</span></span>/1 "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l`    whbj<span class="token operator">=</span><span class="token variable">$dkze</span>    <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>$dkqc<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>    <span class="token keyword">do</span>        bylx<span class="token operator">=</span>`echo <span class="token string">"scale=2;(<span class="token variable">$whbj*</span><span class="token variable">$dkyll</span>)/1 "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l<span class="token variable"><span class="token variable">`</span>        yhbj<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"scale=2;(<span class="token variable">$bybx</span>-<span class="token variable">$bylx</span>)/1 "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l<span class="token variable"><span class="token variable">`</span>        whbj<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"scale=2;(<span class="token variable">$whbj</span>-<span class="token variable">$yhbj</span>)/1 "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l<span class="token variable"><span class="token variable">`</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> $i -eq $dkqc <span class="token punctuation">]</span>        <span class="token keyword">then</span>            bybx<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"scale=2;(<span class="token variable">$yhbj</span>+<span class="token variable">$whbj</span>)/1 "</span> <span class="token operator">|</span> <span class="token function">bc</span> -l`            whbj<span class="token operator">=</span><span class="token string">"0.00"</span>        <span class="token keyword">fi</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$i</span> <span class="token variable">$bybx</span> <span class="token variable">$bylx</span> <span class="token variable">$whbj</span>"</span>    <span class="token keyword">done</span><span class="token punctuation">}</span><span class="token keyword">case</span> <span class="token variable">$dkfs</span> <span class="token keyword">in</span>    1<span class="token punctuation">)</span> debjjsf       <span class="token punctuation">;</span><span class="token punctuation">;</span>    2<span class="token punctuation">)</span> debxjsf       <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span> <span class="token keyword">exit</span> 1       <span class="token punctuation">;</span><span class="token punctuation">;</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本91】监控磁盘io"><a href="#【脚本91】监控磁盘io" class="headerlink" title="【脚本91】监控磁盘io"></a>【脚本91】监控磁盘io</h1><p>阿里云的机器，今天收到客服来的电话，说服务器的磁盘io很重。于是登录到服务器查看，并没有发现问题，所以怀疑是间歇性地。</p><p>正要考虑写个脚本的时候，幸运的抓到了一个线索，造成磁盘io很高的幕后黑手是mysql。此时去show processlist，但未发现队列。原来只是一瞬间。</p><p>只好继续来写脚本，思路是，每5s检测一次磁盘io，当发现问题去查询mysql的processlist。</p><ul><li><p>提示：<br>你可以用iostat -x 1 5 来判定磁盘的io，主要看%util</p></li><li><p>参考代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">while</span> <span class="token keyword">:</span><span class="token keyword">do</span>    n<span class="token operator">=</span>`iostat -x 1 5 <span class="token operator">|</span><span class="token function">tail</span> -n3<span class="token operator">|</span><span class="token function">head</span> -n1 <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$NF</span>}'</span><span class="token operator">|</span><span class="token function">cut</span> -d. -f1`    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -gt 70 <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">date</span><span class="token variable">`</span></span> util% is <span class="token variable">$n</span>%"</span> <span class="token operator">>></span>/tmp/mysql_processlist.log        mysql -uroot -pxxxxxx -e <span class="token string">"show  full processlist"</span> <span class="token operator">>></span> /tmp/mysql_processlist.log    <span class="token keyword">fi</span>    <span class="token function">sleep</span> 5<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本实例(五)</title>
      <link href="/shell-jiao-ben-shi-li-wu/"/>
      <url>/shell-jiao-ben-shi-li-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="【脚本59】判断日期是否合法"><a href="#【脚本59】判断日期是否合法" class="headerlink" title="【脚本59】判断日期是否合法"></a>【脚本59】判断日期是否合法</h1><p>用shell脚本判断输入的日期是否合法。就是判断日期是都是真实的日期，比如20170110就是合法日期，20171332就不合法</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#check date</span><span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token comment" spellcheck="true"># -ne 1 ] || [ ${#1} -ne 8 ]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Usage: bash <span class="token variable">$0</span> yyyymmdd"</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span>datem<span class="token operator">=</span><span class="token variable">$1</span>year<span class="token operator">=</span><span class="token variable">${datem:0:4}</span>month<span class="token operator">=</span><span class="token variable">${datem:4:2}</span>day<span class="token operator">=</span><span class="token variable">${datem:6:2}</span><span class="token keyword">if</span> <span class="token keyword">echo</span> <span class="token variable">$day</span><span class="token operator">|</span><span class="token function">grep</span> -q <span class="token string">'^0'</span><span class="token keyword">then</span>    day<span class="token operator">=</span>`echo <span class="token variable">$day</span> <span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/^0//'</span><span class="token variable"><span class="token variable">`</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token function">cal</span> $month $year <span class="token operator">></span>/dev/null 2<span class="token operator">></span>/dev/null<span class="token keyword">then</span>    daym<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">cal</span> <span class="token variable">$month</span> <span class="token variable">$year</span><span class="token operator">|</span><span class="token function">egrep</span> -v <span class="token string">"<span class="token variable">$year</span>|Su"</span><span class="token operator">|</span><span class="token function">grep</span> -w <span class="token string">"<span class="token variable">$day</span>"</span>`    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$daym</span>"</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token keyword">echo</span> ok    <span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"Error: Please input a wright date."</span>    <span class="token keyword">exit</span> 1    <span class="token keyword">fi</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Error: Please input a wright date."</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本60】监控网卡"><a href="#【脚本60】监控网卡" class="headerlink" title="【脚本60】监控网卡"></a>【脚本60】监控网卡</h1><ol><li>每10分钟检测一次指定网卡的流量</li><li>如果流量为0，则重启网卡</li></ol><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>LANG<span class="token operator">=</span>enn1<span class="token operator">=</span>`sar -n DEV 1 60 <span class="token operator">|</span><span class="token function">grep</span> eth0 <span class="token operator">|</span><span class="token function">grep</span> -i average<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$5</span>}'</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/\.//g'</span><span class="token variable"><span class="token variable">`</span>n2<span class="token operator">=</span><span class="token variable">`</span></span>sar -n DEV 1 60 <span class="token operator">|</span><span class="token function">grep</span> eth0 <span class="token operator">|</span><span class="token function">grep</span> -i average<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$6</span>}'</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/\.//g'</span>`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n1</span> <span class="token operator">==</span> <span class="token string">"000"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$n2</span> <span class="token operator">==</span> <span class="token string">"000"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token function">ifdown</span> eth0    <span class="token function">ifup</span> eth0<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后写个cron，10分钟执行一次</p><h1 id="【脚本61】监控web可用性"><a href="#【脚本61】监控web可用性" class="headerlink" title="【脚本61】监控web可用性"></a>【脚本61】监控web可用性</h1><p>写一个shell脚本，通过curl -I 返回的状态码来判定所访问的网站是否正常。比如，当状态码为200时，才算正常。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#/bin/bash</span>url<span class="token operator">=</span><span class="token string">"http://www.apelearn.com/index.php"</span>sta<span class="token operator">=</span>`curl -I <span class="token variable">$url</span> 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">head</span> -1 <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span>`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$sta</span> <span class="token operator">!=</span> <span class="token string">"200"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    python /usr/local/sbin/mail.py xxx@qq.com <span class="token string">"<span class="token variable">$url</span> down."</span> <span class="token string">"<span class="token variable">$url</span> down"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本62】文件打包"><a href="#【脚本62】文件打包" class="headerlink" title="【脚本62】文件打包"></a>【脚本62】文件打包</h1><ul><li><p>需求：<br>将用户家目录（考虑到执行脚本的用户可能是普通用户也可能是root）下面小于5KB的文件打包成tar.gz的压缩包，并以当前日期为文件名前缀，例如今天打包的文件为2017-09-15.tar.gz。</p></li><li><p>参考代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>t<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%F<span class="token variable">`</span></span><span class="token function">cd</span> <span class="token variable">$HOME</span><span class="token function">tar</span> czf <span class="token variable">$t</span>.tar.gz <span class="token variable"><span class="token variable">`</span><span class="token function">find</span> <span class="token keyword">.</span> -type f -size -5k<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本63】端口解封"><a href="#【脚本63】端口解封" class="headerlink" title="【脚本63】端口解封"></a>【脚本63】端口解封</h1><p>一个小伙伴提到一个问题，他不小心用iptables规则把sshd端口22给封掉了，结果不能远程登陆，要想解决这问题，还要去机房，登陆真机去删除这规则。 问题来了，要写个监控脚本，监控iptables规则是否封掉了22端口，如果封掉了，给打开。 写好脚本，放到任务计划里，每分钟执行一次。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># check sshd port drop</span>/sbin/iptables -nvL --line-number<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"dpt:22"</span><span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">' '</span> <span class="token string">'{print <span class="token variable">$4</span>}'</span> <span class="token operator">></span> /tmp/drop.txti<span class="token operator">=</span>`cat /tmp/drop.txt<span class="token operator">|</span><span class="token function">head</span> -n 1<span class="token operator">|</span><span class="token function">egrep</span> -iE <span class="token string">"DROP|REJECT"</span><span class="token operator">|</span><span class="token function">wc</span> -l`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -gt 0 <span class="token punctuation">]</span><span class="token keyword">then</span>    /sbin/iptables -I INPUT 1 -p tcp --dport 22 -j ACCEPT<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本64】统计分析日志"><a href="#【脚本64】统计分析日志" class="headerlink" title="【脚本64】统计分析日志"></a>【脚本64】统计分析日志</h1><p>已知nginx访问的日志文件在/usr/local/nginx/logs/access.log内</p><p>请统计下早上10点到12点 来访ip最多的是哪个?</p><ul><li>日志样例：</li></ul><pre class="line-numbers language-log"><code class="language-log">111.199.186.68 – [15/Sep/2017:09:58:37 +0800]  “//plugin.php?id=security:job” 200 “POST //plugin.php?id=security:job HTTP/1.1″”http://a.lishiming.net/forum.php?mod=viewthread&tid=11338&extra=page%3D1%26filter%3Dauthor%26orderby%3Ddateline” “Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3141.7 Safari/537.36” “0.516”203.208.60.208 – [15/Sep/2017:09:58:46 +0800] “/misc.php?mod=patch&action=ipnotice&_r=0.05560809863330207&inajax=1&ajaxtarget=ip_notice” 200 “GET /misc.php?mod=patch&action=ipnotice&_r=0.05560809863330207&inajax=1&ajaxtarget=ip_notice HTTP/1.1″”http://a.lishiming.net/forum.php?mod=forumdisplay&fid=65&filter=author&orderby=dateline” “Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3141.7 Safari/537.36” “0.065”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实现这个需求使用如下命令即可：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">'15/Sep/2017:1[0-2]:[0-5][0-9]:'</span> /usr/local/nginx/logs/access.log<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token operator">|</span><span class="token function">sort</span> -n<span class="token operator">|</span><span class="token function">uniq</span> -c <span class="token operator">|</span><span class="token function">sort</span> -n<span class="token operator">|</span><span class="token function">tail</span> -n1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="【脚本65】打印数字"><a href="#【脚本65】打印数字" class="headerlink" title="【脚本65】打印数字"></a>【脚本65】打印数字</h1><p>写一个shell脚本。提示你输入一个暂停的数字，然后从1打印到该数字。然后询问是否继续。继续的话在输入个在数字 接着打印。不继续退出。</p><ul><li><p>例：<br>如果输入的是5，打印1 2 3 4 5 然后继续 输入15 然后打印 6 7 …14 15 依此类推。</p></li><li><p>参考代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">read</span> -p <span class="token string">"请输入您想要暂停的数字："</span> number_1<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 $number_1<span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>        <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span class="token function">read</span> -p <span class="token string">"是否继续输入数字？"</span> a<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token string">"yes"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token function">read</span> -p <span class="token string">"请继续输入您想要暂停的数字："</span> number_2        number_3<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$number_1</span>+1<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$number_2</span> -gt <span class="token variable">$number_1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>                <span class="token keyword">for</span> h <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> $number_3 $number_2<span class="token variable">`</span></span><span class="token punctuation">;</span>                <span class="token keyword">do</span>                        <span class="token keyword">echo</span> <span class="token variable">$h</span>                <span class="token keyword">done</span>        <span class="token keyword">else</span>                <span class="token keyword">echo</span> <span class="token string">"输入数字错误，请输入大于的数字!"</span>        <span class="token keyword">fi</span><span class="token keyword">else</span>        <span class="token keyword">exit</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本66】给文档增加内容"><a href="#【脚本66】给文档增加内容" class="headerlink" title="【脚本66】给文档增加内容"></a>【脚本66】给文档增加内容</h1><p>在文本文档1.txt第5行（假设文件行数大于5）后面增加如下内容：</p><pre class="line-numbers language-log"><code class="language-log"># This is a test file.# Test insert line into this file.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>参考命令：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">"5a # This is a test file.\n# Test insert line into this file."</span> 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="【脚本67】备份etc下面文件"><a href="#【脚本67】备份etc下面文件" class="headerlink" title="【脚本67】备份etc下面文件"></a>【脚本67】备份etc下面文件</h1><p>设计一个shell程序，在每月第一天备份并压缩/etc目录的所有内容，存放在/root/bak目录里，且文件名为如下形式”yymmdd_etc.tar.gz”，yy为年，mm为月，dd为日。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span> <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d /root/bak <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token function">mkdir</span> /root/bak<span class="token keyword">fi</span>prefix<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%y%m%d<span class="token variable">`</span></span>d<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%d<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$d</span> <span class="token operator">==</span> <span class="token string">"01"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token function">cd</span> /etc/    <span class="token function">tar</span> czf  /root/bak/<span class="token variable">$prefix_etc</span>.tar.gz ./<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本68】计算单词重复次数"><a href="#【脚本68】计算单词重复次数" class="headerlink" title="【脚本68】计算单词重复次数"></a>【脚本68】计算单词重复次数</h1><p>将文件内所有的单词的重复次数计算出来，只需要列出重复次数最多的10个单词。</p><p>假设文档名字叫做a.txt，使用如下命令即可：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'s/[^a-zA-Z]/ /g'</span> a.txt<span class="token operator">|</span><span class="token function">xargs</span> -n1 <span class="token operator">|</span><span class="token function">sort</span> <span class="token operator">|</span><span class="token function">uniq</span> -c <span class="token operator">|</span><span class="token function">sort</span> -nr <span class="token operator">|</span><span class="token function">head</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="【脚本69】成员分组"><a href="#【脚本69】成员分组" class="headerlink" title="【脚本69】成员分组"></a>【脚本69】成员分组</h1><ul><li>需求<br>把所有的成员平均得分成若干个小组。这里，我会提供一个人员列表，比如成员有50人，需要分成7个小组，要求随机性，每次和每次分组的结构应该不一致。</li></ul><p>假设成员列表文件为members.txt</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>f<span class="token operator">=</span>members.txtn<span class="token operator">=</span>`wc -l <span class="token variable">$f</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token variable"><span class="token variable">`</span>get_n<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    l<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token variable">$1</span><span class="token operator">|</span><span class="token function">wc</span> -c<span class="token variable"><span class="token variable">`</span>    n1<span class="token operator">=</span>$RANDOM    n2<span class="token operator">=</span>$<span class="token punctuation">[</span>$n1+$l<span class="token punctuation">]</span>    g_id<span class="token operator">=</span>$<span class="token punctuation">[</span>$n1%7<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> $g_id -eq 0 <span class="token punctuation">]</span>    <span class="token keyword">then</span>        g_id<span class="token operator">=</span>7    <span class="token keyword">fi</span>    <span class="token keyword">echo</span> $g_id<span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">`</span></span><span class="token function">seq</span> 1 7<span class="token variable"><span class="token variable">`</span><span class="token keyword">do</span>    <span class="token punctuation">[</span> -f n_$i.txt <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -f n_$i.txt<span class="token keyword">done</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">`</span></span><span class="token function">seq</span> 1 <span class="token variable">$n</span><span class="token variable"><span class="token variable">`</span><span class="token keyword">do</span>    name<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">sed</span> -n <span class="token string">"<span class="token variable">$i</span>"</span>p <span class="token variable">$f</span><span class="token variable"><span class="token variable">`</span>    g<span class="token operator">=</span><span class="token variable">`</span></span>get_n <span class="token variable">$name</span>`    <span class="token keyword">echo</span> <span class="token variable">$name</span> <span class="token operator">>></span> n_<span class="token variable">$g</span>.txt<span class="token keyword">done</span>nu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">wc</span> -l <span class="token variable">$1</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token punctuation">}</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ma<span class="token operator">=</span>0    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 7<span class="token variable">`</span></span>    <span class="token keyword">do</span>        n<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>nu n_$i.txt<span class="token variable">`</span></span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -gt <span class="token variable">$ma</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>            ma<span class="token operator">=</span><span class="token variable">$n</span>       <span class="token keyword">fi</span>    <span class="token keyword">done</span>    <span class="token keyword">echo</span> <span class="token variable">$ma</span><span class="token punctuation">}</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    mi<span class="token operator">=</span>50    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 7<span class="token variable">`</span></span>    <span class="token keyword">do</span>       n<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>nu n_$i.txt<span class="token variable">`</span></span>       <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -lt <span class="token variable">$mi</span> <span class="token punctuation">]</span>       <span class="token keyword">then</span>           mi<span class="token operator">=</span><span class="token variable">$n</span>       <span class="token keyword">fi</span>    <span class="token keyword">done</span>    <span class="token keyword">echo</span> <span class="token variable">$mi</span><span class="token punctuation">}</span>ini_min<span class="token operator">=</span>1<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$ini_min</span> -le 7 <span class="token punctuation">]</span><span class="token keyword">do</span>    m1<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>max<span class="token variable">`</span></span>    m2<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>min<span class="token variable">`</span></span>    ini_min<span class="token operator">=</span>m2    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 7<span class="token variable">`</span></span>    <span class="token keyword">do</span>        n<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>nu n_$i.txt<span class="token variable">`</span></span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -eq <span class="token variable">$m1</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>           f1<span class="token operator">=</span>n_<span class="token variable">$i</span>.txt        <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -eq <span class="token variable">$m2</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>          f2<span class="token operator">=</span>n_<span class="token variable">$i</span>.txt        <span class="token keyword">fi</span>    <span class="token keyword">done</span>    name<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">tail</span> -n1 $f1<span class="token variable">`</span></span>    <span class="token keyword">echo</span> <span class="token variable">$name</span> <span class="token operator">>></span> <span class="token variable">$f2</span>    <span class="token function">sed</span> -i <span class="token string">"/<span class="token variable">$name</span>/d"</span> <span class="token variable">$f1</span>    ini_min<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$ini_min</span>+1<span class="token punctuation">]</span><span class="token keyword">done</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 7<span class="token variable">`</span></span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$i</span> 组成员有："</span>    <span class="token function">cat</span> n_<span class="token variable">$i</span>.txt    <span class="token keyword">echo</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本70】shell中的小数"><a href="#【脚本70】shell中的小数" class="headerlink" title="【脚本70】shell中的小数"></a>【脚本70】shell中的小数</h1><p>有一组式子如下：<br>a=0.5<br>b=3<br>c=a*b<br>求c的值</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>a<span class="token operator">=</span>0.5b<span class="token operator">=</span>3c<span class="token operator">=</span>`echo <span class="token string">"scale=1;<span class="token variable">$a*</span><span class="token variable">$b</span>"</span><span class="token operator">|</span>bc`<span class="token keyword">echo</span> <span class="token variable">$c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本71】a-txt有b-txt没有"><a href="#【脚本71】a-txt有b-txt没有" class="headerlink" title="【脚本71】a.txt有b.txt没有"></a>【脚本71】a.txt有b.txt没有</h1><p>有两个文件a.txt和b.txt，需求是，把a.txt中有的并且b.txt中没有的行找出来，并写入到c.txt，然后计算c.txt文件的行数。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>n<span class="token operator">=</span>`wc -l a.txt<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token variable"><span class="token variable">`</span><span class="token punctuation">[</span> -f c.txt <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -f c.txt<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">`</span></span><span class="token function">seq</span> 1 <span class="token variable">$n</span><span class="token variable"><span class="token variable">`</span><span class="token keyword">do</span>    l<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">sed</span> -n <span class="token string">"<span class="token variable">$i</span>"</span>p a.txt`    <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">grep</span> -q <span class="token string">"^<span class="token variable">$l</span>$"</span> b.txt    <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token variable">$l</span> <span class="token operator">>></span>c.txt    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token function">wc</span> -l c.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者用grep实现</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> -vwf b.txt a.txt <span class="token operator">></span> c.txt； <span class="token function">wc</span> -l c.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="【脚本72】杀死进程"><a href="#【脚本72】杀死进程" class="headerlink" title="【脚本72】杀死进程"></a>【脚本72】杀死进程</h1><p>把当前用户下所有进程名字中含有”java”的进程关闭。</p><ul><li>参考答案：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -u <span class="token variable">$USER</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'<span class="token variable">$NF</span> ~ /java/ {print <span class="token variable">$1</span>}'</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">kill</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="【脚本73】备份数据表"><a href="#【脚本73】备份数据表" class="headerlink" title="【脚本73】备份数据表"></a>【脚本73】备份数据表</h1><p>用shell实现，以并发进程的形式将mysql数据库所有的表备份到当前目录，并把所有的表压缩到一个压缩包文件里。</p><p>假设数据库名字为mydb，用户名为zero，密码为passwd。</p><ul><li><p>提示：<br>在shell中加上&amp;可以将命令丢到后台，从而可以同时执行多条命令达到并发的效果。</p></li><li><p>参考代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>pre<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%F<span class="token variable">`</span></span> <span class="token keyword">for</span> d <span class="token keyword">in</span> `mysql -uaming -ppasswd mydb -e <span class="token string">"show tables"</span><span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">'Tables_in_'</span>`<span class="token keyword">do</span>    mysqldump -uaming -ppasswd mydb <span class="token variable">$d</span> <span class="token operator">></span> <span class="token variable">$d</span>.sql <span class="token operator">&amp;</span><span class="token keyword">done</span><span class="token function">tar</span> czf <span class="token variable">$pre</span>.tar.gz *.sql <span class="token function">rm</span> -f *.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本74】监控节点"><a href="#【脚本74】监控节点" class="headerlink" title="【脚本74】监控节点"></a>【脚本74】监控节点</h1><p>一个网站，使用了cdn，全国各地有几十个节点。需要你写一个shell脚本来监控各个节点是否正常。</p><ul><li>假如：</li></ul><p>监控的url为<a href="http://www.xxx.com/index.php" target="_blank" rel="noopener">www.xxx.com/index.php</a><br>源站ip为88.88.88.88</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>url<span class="token operator">=</span><span class="token string">"www.xxx.com/index.php"</span>s_ip<span class="token operator">=</span><span class="token string">"88.88.88.88"</span>curl -x <span class="token variable">$s_ip</span>:80 <span class="token variable">$url</span> <span class="token operator">></span> /tmp/source.html 2<span class="token operator">></span>/dev/null<span class="token keyword">for</span> ip <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /tmp/ip.txt<span class="token variable">`</span></span><span class="token keyword">do</span>    curl -x <span class="token variable">$ip</span>:80 <span class="token variable">$url</span> 2<span class="token operator">></span>/dev/null <span class="token operator">></span>/tmp/<span class="token variable">$ip</span>.html    <span class="token punctuation">[</span> -f /tmp/<span class="token variable">$ip</span>.diff <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -f /tmp/<span class="token variable">$ip</span>.diff    <span class="token function">touch</span> /tmp/<span class="token variable">$ip</span>.diff    <span class="token function">diff</span> /tmp/source.html /tmp/<span class="token variable">$ip</span>.html <span class="token operator">></span> /tmp/<span class="token variable">$ip</span>.diff 2<span class="token operator">></span>/dev/null    n<span class="token operator">=</span>`wc -l /tmp/<span class="token variable">$ip</span>.diff<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>`    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -lt 0 <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"node <span class="token variable">$ip</span> sth wrong."</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本75】破解字符串"><a href="#【脚本75】破解字符串" class="headerlink" title="【脚本75】破解字符串"></a>【脚本75】破解字符串</h1><p>已知下面的字符串是通过RANDOM随机数变量md5sum|cut-c 1-8截取后的结果，请破解这些字符串对应的md5sum前的RANDOM对应数字？</p><p>21029299<br>00205d1c<br>a3da1677<br>1f6d12dd<br>890684ba</p><p>-解题思路：<br>通过每次传递一个参数的方式，来实现依次破解，$RANDOM的范围为0-32767。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token punctuation">{</span>0<span class="token punctuation">..</span>32767<span class="token punctuation">}</span><span class="token keyword">do</span>        MD5<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token keyword">echo</span> $n <span class="token operator">|</span> md5sum <span class="token operator">|</span> <span class="token function">cut</span> -c 1-8<span class="token variable">`</span></span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$MD5</span>"</span> <span class="token operator">==</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>            <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$n</span> <span class="token variable">$1</span> "</span>            <span class="token keyword">break</span>        <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本76】判断cpu厂商"><a href="#【脚本76】判断cpu厂商" class="headerlink" title="【脚本76】判断cpu厂商"></a>【脚本76】判断cpu厂商</h1><ul><li>写一个脚本：</li></ul><p>判断当前主机的CPU生产商，其信息在/proc/cpuinfo文件中vendor id一行中。<br>如果其生产商为AuthenticAMD，就显示其为AMD公司；<br>如果其生产商为GenuineIntel，就显示其为Intel公司；<br>否则，就说其为非主流公司。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>m<span class="token operator">=</span>`cat /proc/cpuinfo <span class="token operator">|</span><span class="token function">grep</span> vendor_id<span class="token operator">|</span><span class="token function">awk</span>  -F<span class="token string">":"</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span><span class="token operator">|</span><span class="token function">tail</span> -1`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$m</span> <span class="token operator">==</span> <span class="token string">"GenuineIntel"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>     <span class="token keyword">echo</span> <span class="token string">"cpu is 英特尔"</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$m</span> <span class="token operator">==</span> <span class="token string">"AuthenticAMD"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>     <span class="token keyword">echo</span> <span class="token string">"cpu is AMD"</span><span class="token keyword">else</span>     <span class="token keyword">echo</span> <span class="token string">"cpu is 非主流"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本实例(四)</title>
      <link href="/shell-jiao-ben-shi-li-si/"/>
      <url>/shell-jiao-ben-shi-li-si/</url>
      
        <content type="html"><![CDATA[<h1 id="【脚本41】获取ip"><a href="#【脚本41】获取ip" class="headerlink" title="【脚本41】获取ip"></a>【脚本41】获取ip</h1><p>提示用户输入网卡的名字，然后我们用脚本输出网卡的ip。 看似简单，但是需要考虑多个方面，比如我们输入的不符合网卡名字的规范，怎么应对。名字符合规范，但是根本就没有这个网卡有怎么应对。</p><ul><li>代码参考：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">while</span> <span class="token keyword">:</span><span class="token keyword">do</span>     <span class="token function">read</span> -p <span class="token string">"请输入网卡名: "</span> e     e1<span class="token operator">=</span>`echo <span class="token string">"<span class="token variable">$e</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/[-0-9]//g'</span><span class="token variable"><span class="token variable">`</span>     e2<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$e</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/[a-zA-Z]//g'</span>`     <span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token variable">$e</span> <span class="token punctuation">]</span>     <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"你没有输入任何东西"</span>        <span class="token keyword">continue</span>     <span class="token keyword">elif</span> <span class="token punctuation">[</span> -z <span class="token variable">$e1</span> <span class="token punctuation">]</span>     <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"不要输入纯数字在centos中网卡名是以eth开头后面加数字"</span>        <span class="token keyword">continue</span>     <span class="token keyword">elif</span> <span class="token punctuation">[</span> -z <span class="token variable">$e2</span> <span class="token punctuation">]</span>     <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"不要输入纯字母在centos中网卡名是以eth开头后面加数字"</span>        <span class="token keyword">continue</span>     <span class="token keyword">else</span>        <span class="token keyword">break</span>     <span class="token keyword">fi</span><span class="token keyword">done</span>ip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> -A1 <span class="token string">"<span class="token variable">$1</span> "</span> <span class="token operator">|</span><span class="token function">tail</span> -1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">":"</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span><span class="token punctuation">}</span>myip<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>ip $e<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token variable">$myip</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"抱歉，没有这个网卡。"</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"你的网卡IP地址是<span class="token variable">$myip</span>"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本42】列出子目录"><a href="#【脚本42】列出子目录" class="headerlink" title="【脚本42】列出子目录"></a>【脚本42】列出子目录</h1><ul><li><p>脚本的功能：<br>脚本可以带参数也可以不带，参数可以有多个，每个参数必须是一个目录，脚本检查参数个数，若等于0，则列出当前目录本身；否则，显示每个参数包含的子目录。</p></li><li><p>参考代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token comment" spellcheck="true"># == 0 ]</span><span class="token keyword">then</span>    <span class="token function">ls</span> -ld <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span><span class="token keyword">else</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> `seq 1 $<span class="token comment" spellcheck="true">#`</span>    <span class="token keyword">do</span>        a<span class="token operator">=</span><span class="token variable">$i</span>        <span class="token keyword">echo</span> <span class="token string">"ls <span class="token variable">${!a}</span>"</span>        <span class="token function">ls</span> -l <span class="token variable">${!a}</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'^d'</span>    <span class="token keyword">done</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>标注：</li></ul><p>你可能会对${!a}有疑问，这里是一个特殊用法，在shell中，$1为第一个参数，$2为第二个参数，以此类推，那么这里的数字要是一个变量如何表示呢？比如n=3,我想取第三个参数，能否写成 $$n？ shell中是不支持的，那怎么办？ 就用脚本中的这种方法：  a=$n, echo ${!a}</p><h1 id="【脚本43】下载文件"><a href="#【脚本43】下载文件" class="headerlink" title="【脚本43】下载文件"></a>【脚本43】下载文件</h1><p>创建一个函数，能接受两个参数：</p><p>第一个参数为URL，即可下载的文件；第二个参数为目录，即下载后保存的位置；<br>如果用户给的目录不存在，则提示用户是否创建；如果创建就继续执行，否则，函数返回一个51的错误值给调用脚本；<br>如果给的目录存在，则下载文件；下载命令执行结束后测试文件下载成功与否；如果成功，则&gt;返回0给调用脚本，否则，返回52给调用脚本；<br>提示，在函数中返回错误值给调用脚本，使用return</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$2</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"please make directory"</span>    <span class="token keyword">exit</span> 51<span class="token keyword">fi</span><span class="token function">cd</span> <span class="token variable">$2</span><span class="token function">wget</span> <span class="token variable">$1</span>n<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token keyword">echo</span> $?<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">exit</span> 0<span class="token keyword">else</span>    <span class="token keyword">exit</span> 52<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本44】猜数字"><a href="#【脚本44】猜数字" class="headerlink" title="【脚本44】猜数字"></a>【脚本44】猜数字</h1><p>写一个猜数字脚本，当用户输入的数字和预设数字（随机生成一个小于100的数字）一样时，直接退出，否则让用户一直输入，并且提示用户的数字比预设数字大或者小。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>m<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token keyword">echo</span> $RANDOM<span class="token variable">`</span></span>n1<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$m</span>%100<span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token keyword">:</span><span class="token keyword">do</span>    <span class="token function">read</span> -p <span class="token string">"Please input a number: "</span> n    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> <span class="token operator">==</span> <span class="token variable">$n1</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token keyword">break</span>    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -gt <span class="token variable">$n1</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"bigger"</span>        <span class="token keyword">continue</span>    <span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"smaller"</span>        <span class="token keyword">continue</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token string">"You are right."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本45】抽签脚本"><a href="#【脚本45】抽签脚本" class="headerlink" title="【脚本45】抽签脚本"></a>【脚本45】抽签脚本</h1><ol><li>写一个脚本执行后，输入名字，产生随机数01-99之间的数字。</li><li>如果相同的名字重复输入，抓到的数字还是第一次抓取的结果，</li><li>前面已经抓到的数字，下次不能在出现相同数字。</li><li>第一个输入名字后，屏幕输出信息，并将名字和数字记录到文件里，程序不能退出<br>继续等待别的学生输入。</li></ol><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token keyword">:</span><span class="token keyword">do</span>    <span class="token function">read</span> -p  <span class="token string">"Please input a name:"</span> name    <span class="token keyword">if</span> <span class="token punctuation">[</span> -f /work/test/1.log <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    bb<span class="token operator">=</span>`cat /work/test/1.log <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print <span class="token variable">$1</span>}'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"<span class="token variable">$name</span>"</span>`    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$bb</span>"</span> <span class="token operator">!=</span> <span class="token string">"<span class="token variable">$name</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token comment" spellcheck="true">#名字不重复情况下</span>        aa<span class="token operator">=</span>`echo <span class="token variable">$RANDOM</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">""</span> <span class="token string">'{print <span class="token variable">$2</span> <span class="token variable">$3</span>}'</span><span class="token variable"><span class="token variable">`</span>        <span class="token keyword">while</span> <span class="token keyword">:</span>        <span class="token keyword">do</span>          dd<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">cat</span>  /work/test/1.log <span class="token operator">|</span>  <span class="token function">awk</span> -F: <span class="token string">'{print <span class="token variable">$2</span>}'</span>  <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"<span class="token variable">$aa</span>"</span>`          <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$aa</span>"</span>  <span class="token operator">==</span>  <span class="token string">"<span class="token variable">$dd</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>   <span class="token comment" spellcheck="true">#数字已经存在情况下</span>              <span class="token keyword">echo</span> <span class="token string">"数字已存在."</span>              aa<span class="token operator">=</span>`echo <span class="token variable">$RANDOM</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">""</span> <span class="token string">'{print <span class="token variable">$2</span> <span class="token variable">$3</span>}'</span>`          <span class="token keyword">else</span>              <span class="token keyword">break</span>          <span class="token keyword">fi</span>        <span class="token keyword">done</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$name</span>:<span class="token variable">$aa</span>"</span> <span class="token operator">|</span> <span class="token function">tee</span> -a /work/test/1.log     <span class="token keyword">else</span>     aa<span class="token operator">=</span>`cat /work/test/1.log <span class="token operator">|</span>  <span class="token function">grep</span> <span class="token string">"<span class="token variable">$name</span>"</span> <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print <span class="token variable">$2</span>}'</span>` <span class="token comment" spellcheck="true">#名字重复</span>     <span class="token keyword">echo</span> <span class="token variable">$aa</span>     <span class="token keyword">echo</span> <span class="token string">"重复名字."</span>     <span class="token keyword">fi</span>  <span class="token keyword">else</span>      aa<span class="token operator">=</span>`echo <span class="token variable">$RANDOM</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">""</span> <span class="token string">'{print <span class="token variable">$2</span> <span class="token variable">$3</span>}'</span>`      <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$name</span>:<span class="token variable">$aa</span>"</span> <span class="token operator">|</span> <span class="token function">tee</span> -a  /work/test/1.log  <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本46】打印只有一个数字的行"><a href="#【脚本46】打印只有一个数字的行" class="headerlink" title="【脚本46】打印只有一个数字的行"></a>【脚本46】打印只有一个数字的行</h1><p>如题，把一个文本文档中只有一个数字的行给打印出来。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>f<span class="token operator">=</span>/etc/passwdline<span class="token operator">=</span>`wc -l <span class="token variable">$f</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token variable"><span class="token variable">`</span><span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token variable">`</span></span><span class="token function">seq</span> 1 <span class="token variable">$line</span><span class="token variable"><span class="token variable">`</span><span class="token punctuation">;</span> <span class="token keyword">do</span>     n<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">sed</span> -n <span class="token string">"<span class="token variable">$l</span>"</span>p <span class="token variable">$f</span><span class="token operator">|</span><span class="token function">grep</span> -o <span class="token string">'[0-9]'</span><span class="token operator">|</span><span class="token function">wc</span> -l`<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -eq 1 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token function">sed</span> -n <span class="token string">"<span class="token variable">$l</span>"</span>p <span class="token variable">$f</span>     <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本47】日志归档"><a href="#【脚本47】日志归档" class="headerlink" title="【脚本47】日志归档"></a>【脚本47】日志归档</h1><p>类似于日志切割，系统有个logrotate程序，可以完成归档。但现在我们要自己写一个shell脚本实现归档。</p><ul><li><p>举例：<br>假如服务的输出日志是1.log，我要求每天归档一个，1.log第二天就变成1.log.1，第三天1.log.2, 第四天 1.log.3 一直到1.log.5</p></li><li><p>参考答案：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> e_df<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">[</span> -f <span class="token variable">$1</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -f <span class="token variable">$1</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 5 -1 2<span class="token variable">`</span></span><span class="token keyword">do</span>    i2<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$i</span>-1<span class="token punctuation">]</span>    e_df /data/1.log.<span class="token variable">$i</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -f /data/1.log.<span class="token variable">$i2</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token function">mv</span> /data/1.log.<span class="token variable">$i2</span> /data/1.log.<span class="token variable">$i</span>    <span class="token keyword">fi</span><span class="token keyword">done</span>e_df /data/1.log.1<span class="token function">mv</span> /data/1.log  /data/1.log.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本48】找出活动ip"><a href="#【脚本48】找出活动ip" class="headerlink" title="【脚本48】找出活动ip"></a>【脚本48】找出活动ip</h1><p>写一个shell脚本，把192.168.0.0/24网段在线的ip列出来。</p><ul><li><p>思路：<br>for循环， 0.1 — 0.254 依次去ping，能通说明在线。</p></li><li><p>参考代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>ips<span class="token operator">=</span><span class="token string">"192.168.1."</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 254<span class="token variable">`</span></span><span class="token keyword">do</span><span class="token function">ping</span> -c 2 <span class="token variable">$ips</span><span class="token variable">$i</span> <span class="token operator">></span>/dev/null 2<span class="token operator">></span>/dev/null<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">==</span> 0 <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"echo <span class="token variable">$ips</span><span class="token variable">$i</span> is online"</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"echo <span class="token variable">$ips</span><span class="token variable">$i</span> is not online"</span><span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本49】检查错误"><a href="#【脚本49】检查错误" class="headerlink" title="【脚本49】检查错误"></a>【脚本49】检查错误</h1><p>写一个shell脚本，检查指定的shell脚本是否有语法错误，若有错误，首先显示错误信息，然后提示用户输入q或者Q退出脚本，输入其他内容则直接用vim打开该shell脚本。</p><ul><li><p>提醒：<br>检查shell脚本有没有语法错误的命令是 sh -n xxx.sh</p></li><li><p>参考代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>sh -n <span class="token variable">$1</span> 2<span class="token operator">></span>/tmp/err<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq <span class="token string">"0"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"The script is OK."</span><span class="token keyword">else</span>    <span class="token function">cat</span> /tmp/err    <span class="token function">read</span> -p <span class="token string">"Please inpupt Q/q to exit, or others to edit it by vim. "</span> n    <span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token variable">$n</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        vim <span class="token variable">$1</span>        <span class="token keyword">exit</span>    <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> <span class="token operator">==</span> <span class="token string">"q"</span> -o <span class="token variable">$n</span> <span class="token operator">==</span> <span class="token string">"Q"</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token keyword">exit</span>    <span class="token keyword">else</span>        vim <span class="token variable">$1</span>        <span class="token keyword">exit</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本50】格式化输出"><a href="#【脚本50】格式化输出" class="headerlink" title="【脚本50】格式化输出"></a>【脚本50】格式化输出</h1><p>输入一串随机数字，然后按千分位输出。</p><p>比如输入数字串为“123456789”，输出为123,456,789</p><ul><li>代码参考：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">read</span> -p <span class="token string">"输入一串数字："</span> numv<span class="token operator">=</span>`echo <span class="token variable">$num</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/[0-9]//g'</span>`<span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$v</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"请输入纯数字."</span>    <span class="token keyword">exit</span><span class="token keyword">fi</span>length<span class="token operator">=</span><span class="token variable">${#num}</span>len<span class="token operator">=</span>0sum<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> 1 $length<span class="token variable">)</span></span><span class="token keyword">do</span>        len<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$len</span>+1<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$len</span> <span class="token operator">==</span> 3 <span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">then</span>                sum<span class="token operator">=</span><span class="token string">','</span><span class="token variable">${num:$[0-$i]:1}</span><span class="token variable">$sum</span>                len<span class="token operator">=</span>0        <span class="token keyword">else</span>                sum<span class="token operator">=</span><span class="token variable">${num:$[0-$i]:1}</span><span class="token variable">$sum</span>        <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> -n <span class="token punctuation">$(</span>echo <span class="token variable">$sum</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'^,'</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token variable">${sum:1}</span><span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token variable">$sum</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个实现比较复杂，下面再来一个sed的：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">read</span> -p <span class="token string">"输入一串数字："</span> numv<span class="token operator">=</span>`echo <span class="token variable">$num</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/[0-9]//g'</span>`<span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$v</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"请输入纯数字."</span>    <span class="token keyword">exit</span><span class="token keyword">fi</span><span class="token keyword">echo</span> <span class="token variable">$num</span><span class="token operator">|</span><span class="token function">sed</span> -r <span class="token string">'{:number;s/([0-9]+)([0-9]{3})/\1,\2/;t number}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本51】"><a href="#【脚本51】" class="headerlink" title="【脚本51】"></a>【脚本51】</h1><ol><li>编写一个名为iffile程序，它执行时判断/bin目录下date文件是否存在？</li></ol><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -f /bin/date  <span class="token punctuation">]</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"/bin/date file exist."</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"/bin/date not exist."</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>编写一个名为greet的问候程序，它执行时能根据系统当前的时间向用户输出问候信息。设从半夜到中午为早晨，中午到下午六点为下午，下午六点到半夜为晚上。</li></ol><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>h<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%H<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$h</span> -ge 0 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$h</span> -lt 12 <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Good morning."</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$h</span> -ge 12 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$h</span> -lt 18 <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Good afternoon."</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Good evening."</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本52】判断用户登录"><a href="#【脚本52】判断用户登录" class="headerlink" title="【脚本52】判断用户登录"></a>【脚本52】判断用户登录</h1><ol><li>编写一个名为ifuser的程序，它执行时带用户名作为命令行参数，判断该用户是否已经在系统中登录，并给出相关信息。</li></ol><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">read</span> -p <span class="token string">"Please input the username: "</span> user<span class="token keyword">if</span> <span class="token function">who</span> <span class="token operator">|</span> <span class="token function">grep</span> -qw <span class="token variable">$user</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token variable">$user</span> is online.<span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token variable">$user</span> not online.<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>编写一个名为menu的程序，实现简单的弹出式菜单功能，用户能根据显示的菜单项从键盘选择执行对应的命令。</li></ol><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> message<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"0\. w"</span>    <span class="token keyword">echo</span> <span class="token string">"1\. ls"</span>    <span class="token keyword">echo</span> <span class="token string">"2.quit"</span>    <span class="token function">read</span> -p <span class="token string">"Please input parameter: "</span> Par<span class="token punctuation">}</span>message<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$Par</span> -ne <span class="token string">'2'</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">case</span> <span class="token variable">$Par</span> <span class="token keyword">in</span>    0<span class="token punctuation">)</span>        w        <span class="token punctuation">;</span><span class="token punctuation">;</span>    1<span class="token punctuation">)</span>        <span class="token function">ls</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    2<span class="token punctuation">)</span>        <span class="token keyword">exit</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"Unkown command"</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>  esac  message<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本53】更改后缀名"><a href="#【脚本53】更改后缀名" class="headerlink" title="【脚本53】更改后缀名"></a>【脚本53】更改后缀名</h1><ol><li>编写一个名为chname的程序，将当前目录下所有的.txt文件更名为.doc文件。</li></ol><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">find</span> <span class="token keyword">.</span> -type f -name <span class="token string">"*.txt"</span> <span class="token operator">></span> /tmp/txt.list<span class="token keyword">for</span> f <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /tmp/txt.list<span class="token variable">`</span></span><span class="token keyword">do</span>    n<span class="token operator">=</span>`echo <span class="token variable">$f</span><span class="token operator">|</span><span class="token function">sed</span> -r <span class="token string">'s/(.*)\.txt/\1/'</span>`    <span class="token keyword">echo</span> <span class="token string">"mv <span class="token variable">$f</span> <span class="token variable">$n</span>.doc"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>编写一个名为chuser的程序，执行中每隔5分钟检查指定的用户是否登录系统，用户名从命令行输入；如果指定的用户已经登录，则显示相关信息。</li></ol><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">read</span> -p <span class="token string">"Please input the username: "</span> user<span class="token keyword">while</span> <span class="token keyword">:</span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token function">who</span> <span class="token operator">|</span> <span class="token function">grep</span> -qw <span class="token variable">$user</span>    <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token variable">$user</span> login.    <span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token variable">$user</span> not login.    <span class="token keyword">fi</span>    <span class="token function">sleep</span> 300<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本54】判断pid是否一致"><a href="#【脚本54】判断pid是否一致" class="headerlink" title="【脚本54】判断pid是否一致"></a>【脚本54】判断pid是否一致</h1><p>先普及一小段知识,我们用ps aux可以查看到进程的PID，而每个PID都会在/proc内产生。如果查看到的pid而proc内是没有的，则是进程被人修改了，这就代表你的系统很有可能已经被<em>*</em>过了。</p><p>请大家用上面知识编写一个shell，定期检查下自己的系统是否被人***过。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'/[0-9]/ {print <span class="token variable">$2</span>}'</span><span class="token operator">|</span><span class="token keyword">while</span> <span class="token function">read</span> pid<span class="token keyword">do</span>    result<span class="token operator">=</span>`find /proc/ -maxdepth 1 -type d -name <span class="token string">"<span class="token variable">$pid</span>"</span>`    <span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token variable">$result</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$pid</span> abnormal!"</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本55】一列变三行"><a href="#【脚本55】一列变三行" class="headerlink" title="【脚本55】一列变三行"></a>【脚本55】一列变三行</h1><p>比如1.txt内容：</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>处理后应该是：</p><p>1 2 3<br>4 5 6<br>7<br>可使用sed命令完成：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'N;N;s/\n/ /g'</span> 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="【脚本56】shell的getops"><a href="#【脚本56】shell的getops" class="headerlink" title="【脚本56】shell的getops"></a>【脚本56】shell的getops</h1><p>写一个getinterface.sh 脚本可以接受选项[i，I]，完成下面任务：</p><p>使用一下形式：getinterface.sh [-i interface | -I ip]<br>当用户使用-i选项时，显示指定网卡的IP地址；当用户使用-I选项时，显示其指定ip所属的网卡。</p><ul><li>例：<br>sh getinterface.sh -i eth0<br>sh getinterface.sh -I 192.168.0.1</li></ul><p>当用户使用除[-i | -I]选项时，显示[-i interface | -I ip]此信息。<br>当用户指定信息不符合时，显示错误。（比如指定的eth0没有，而是eth1时）</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>ip add <span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">":"</span> <span class="token string">'<span class="token variable">$1</span> ~ /^[1-9]/ {print <span class="token variable">$2</span>}'</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/ //g'</span> <span class="token operator">></span> /tmp/eths.txt<span class="token punctuation">[</span> -f /tmp/eth_ip.log <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -f /tmp/eth_ip.log<span class="token keyword">for</span> eth <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /tmp/eths.txt<span class="token variable">`</span></span><span class="token keyword">do</span>    ip<span class="token operator">=</span>`ip add <span class="token operator">|</span><span class="token function">grep</span> -A2 <span class="token string">": <span class="token variable">$eth</span>"</span> <span class="token operator">|</span><span class="token function">grep</span> inet <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span><span class="token function">cut</span> -d <span class="token string">'/'</span> -f 1`    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$eth</span>:<span class="token variable">$ip</span>"</span> <span class="token operator">>></span> /tmp/eth_ip.log<span class="token keyword">done</span>useage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Please useage: <span class="token variable">$0</span> -i 网卡名字 or <span class="token variable">$0</span> -I ip地址"</span><span class="token punctuation">}</span>wrong_eth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">awk</span> -F <span class="token string">':'</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span> /tmp/eth_ip.log <span class="token operator">|</span> <span class="token function">grep</span> -qw <span class="token string">"^<span class="token variable">$1</span>$"</span>    <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"请指定正确的网卡名字"</span>        <span class="token keyword">exit</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span>wrong_ip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">awk</span> -F <span class="token string">':'</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span> /tmp/eth_ip.log <span class="token operator">|</span> <span class="token function">grep</span> -qw <span class="token string">"^<span class="token variable">$1</span>$"</span>    <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"请指定正确的ip地址"</span>        <span class="token keyword">exit</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token comment" spellcheck="true"># -ne 2 ]</span><span class="token keyword">then</span>    useage    <span class="token keyword">exit</span><span class="token keyword">fi</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>    -i<span class="token punctuation">)</span>    wrong_eth <span class="token variable">$2</span>     <span class="token function">grep</span> -w <span class="token variable">$2</span> /tmp/eth_ip.log <span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">':'</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    -I<span class="token punctuation">)</span>    wrong_ip <span class="token variable">$2</span>    <span class="token function">grep</span> -w <span class="token variable">$2</span> /tmp/eth_ip.log <span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">':'</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>    useage    <span class="token keyword">exit</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本57】3位随机数字"><a href="#【脚本57】3位随机数字" class="headerlink" title="【脚本57】3位随机数字"></a>【脚本57】3位随机数字</h1><p>写一个脚本产生随机3位的数字，并且可以根据用户的输入参数来判断输出几组。 比如，脚本名字为 number3.sh。</p><ul><li>执行方法：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> number3.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接产生一组3位数字。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> number3.sh 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>插上10组3位数字。</p><ul><li><p>思路：<br>可以使用echo $RANDOM获取一个随机数字，然后再除以10，取余获取0-9随机数字，三次运算获得一组。</p></li><li><p>参考代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>get_a_num<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$RANDOM</span>%10<span class="token punctuation">]</span>    <span class="token keyword">echo</span> <span class="token variable">$n</span><span class="token punctuation">}</span>get_numbers<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> 1 2 3<span class="token punctuation">;</span> <span class="token keyword">do</span>        a<span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>get_a_num<span class="token variable">`</span></span>    <span class="token keyword">done</span>    <span class="token keyword">echo</span> <span class="token variable">${a[@]}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    m<span class="token operator">=</span>`echo <span class="token variable">$1</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/[0-9]//g'</span>`    <span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$m</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"Useage bash <span class="token variable">$0</span> n, n is a number, example: bash <span class="token variable">$0</span> 5"</span>        <span class="token keyword">exit</span>    <span class="token keyword">else</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 $1<span class="token variable">`</span></span>        <span class="token keyword">do</span>            get_numbers        <span class="token keyword">done</span>    <span class="token keyword">fi</span><span class="token keyword">else</span>    get_numbers<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本58】检查服务"><a href="#【脚本58】检查服务" class="headerlink" title="【脚本58】检查服务"></a>【脚本58】检查服务</h1><p>先判断是否安装http和mysql，没有安装进行安装，安装了检查是否启动服务，若没有启动则需要启动服务。</p><ul><li><p>说明：<br>操作系统为centos6，httpd和mysql全部为rpm包安装。</p></li><li><p>参考代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>if_install<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span>`rpm -qa<span class="token operator">|</span><span class="token function">grep</span> -cw <span class="token string">"<span class="token variable">$1</span>"</span>`    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -eq 0 <span class="token punctuation">]</span>    <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span> not install."</span>    yum <span class="token function">install</span> -y <span class="token variable">$1</span>    <span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span> installed."</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span>if_install httpdif_install mysql-serverchk_ser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    p_n<span class="token operator">=</span>`ps -C <span class="token string">"<span class="token variable">$1</span>"</span> --no-heading <span class="token operator">|</span><span class="token function">wc</span> -l`    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$p_n</span> -eq 0 <span class="token punctuation">]</span>    <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span> not start."</span>    /etc/init.d/<span class="token variable">$1</span> start    <span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span> started."</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span>chk_httpdchk_mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本实例(三)</title>
      <link href="/shell-jiao-ben-shi-li-san/"/>
      <url>/shell-jiao-ben-shi-li-san/</url>
      
        <content type="html"><![CDATA[<h1 id="【脚本25】找规律打印数字"><a href="#【脚本25】找规律打印数字" class="headerlink" title="【脚本25】找规律打印数字"></a>【脚本25】找规律打印数字</h1><p>请详细查看如下几个数字的规律，并使用shell脚本输出后面的十个数字。</p><p>10 31 53 77 105 141 …….<br>试题解析：<br>我想大多数人都会去比较这些数字的差值：</p><p>10  31  53  77  105  141<br>21   22   24   28   36<br>但是这个差值看，并没有什么规律，而我们再仔细看的时候，发现这个差值的差值是有规律的：</p><p>10  31  53  77  105  141<br>21   22   24   28   36<br>1      2     4     8</p><ul><li>脚本实现：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span>x<span class="token operator">=</span>21m<span class="token operator">=</span>10<span class="token keyword">echo</span> <span class="token variable">$m</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 0 14<span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> j<span class="token operator">=</span>$<span class="token punctuation">[</span>2**<span class="token variable">$i</span><span class="token punctuation">]</span> m<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$m</span>+<span class="token variable">$x</span><span class="token punctuation">]</span> <span class="token keyword">echo</span> <span class="token variable">$m</span> x<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$x</span>+<span class="token variable">$j</span><span class="token punctuation">]</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本26】统计普通用户"><a href="#【脚本26】统计普通用户" class="headerlink" title="【脚本26】统计普通用户"></a>【脚本26】统计普通用户</h1><p>写个shell，看看你的Linux系统中是否有自定义用户（普通用户），若是有，一共有几个？</p><p>假设所有普通用户都是uid大于1000的</p><ul><li>脚本实现：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span> n<span class="token operator">=</span>`awk -F <span class="token string">':'</span> <span class="token string">'<span class="token variable">$3</span>>1000'</span> /etc/passwd<span class="token operator">|</span><span class="token function">wc</span> -l` <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -gt 0 <span class="token punctuation">]</span> <span class="token keyword">then</span>     <span class="token keyword">echo</span> <span class="token string">"There are <span class="token variable">$n</span> common users."</span> <span class="token keyword">else</span>     <span class="token keyword">echo</span> <span class="token string">"No common users."</span> <span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本27】监控磁盘使用率"><a href="#【脚本27】监控磁盘使用率" class="headerlink" title="【脚本27】监控磁盘使用率"></a>【脚本27】监控磁盘使用率</h1><p>写一个shell脚本，检测所有磁盘分区使用率和inode使用率并记录到以当天日期为命名的日志文件里，当发现某个分区容量或者inode使用量大于85%时，发邮件通知你自己。</p><ul><li><p>思路：<br>就是先df -h 然后过滤出已使用的那一列，然后再想办法过滤出百分比的整数部分，然后和85去比较，同理，inode也是一样的思路。</p></li><li><p>实现代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">## This script is for record Filesystem Use%,IUse% everyday and send alert mail when % is more than 85%.</span>log<span class="token operator">=</span>/var/log/disk/<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%F<span class="token variable">`</span></span>.log<span class="token function">date</span> +<span class="token string">'%F %T'</span> <span class="token operator">></span> <span class="token variable">$log</span><span class="token function">df</span> -h <span class="token operator">>></span> <span class="token variable">$log</span><span class="token keyword">echo</span> <span class="token operator">>></span> <span class="token variable">$log</span><span class="token function">df</span> -i <span class="token operator">>></span> <span class="token variable">$log</span><span class="token keyword">for</span> i <span class="token keyword">in</span> `df -h<span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">'Use%'</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/%//'</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$5</span>}'</span><span class="token variable"><span class="token variable">`</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> $i -gt 85 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        use<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">df</span> -h<span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">'Use%'</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/%//'</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'<span class="token variable">$5</span>=='</span><span class="token variable">$i</span><span class="token string">' {print <span class="token variable">$1</span>,<span class="token variable">$5</span>}'</span>`        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$use</span>"</span> <span class="token operator">>></span> use    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -e use <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token comment" spellcheck="true">##这里可以使用咱们之前介绍的mail.py发邮件</span>    mail -s <span class="token string">"Filesystem Use% check"</span> root@localhost <span class="token operator">&lt;</span> use    <span class="token function">rm</span> -rf use<span class="token keyword">fi</span><span class="token keyword">for</span> j <span class="token keyword">in</span> `df -i<span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">'IUse%'</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/%//'</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$5</span>}'</span><span class="token variable"><span class="token variable">`</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> $j -gt 85 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        iuse<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">df</span> -i<span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">'IUse%'</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/%//'</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'<span class="token variable">$5</span>=='</span><span class="token variable">$j</span><span class="token string">' {print <span class="token variable">$1</span>,<span class="token variable">$5</span>}'</span>`        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$iuse</span>"</span> <span class="token operator">>></span> iuse    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -e iuse <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    mail -s <span class="token string">"Filesystem IUse% check"</span> root@localhost <span class="token operator">&lt;</span> iuse    <span class="token function">rm</span> -rf iuse<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>思路：</li></ul><p>df -h、df -i 记录磁盘分区使用率和inode使用率，date +%F 日志名格式<br>取出使用率(第5列)百分比序列，for循环逐一与85比较，大于85则记录到新文件里，当for循环结束后，汇总超过85的一并发送邮件(邮箱服务因未搭建，发送本地root账户)。<br>此脚本正确运行前提：</p><p>该系统没有逻辑卷的情况下使用，因为逻辑卷df -h、df -i 时，使用率百分比是在第4列，而不是第5列。如有逻辑卷，则会漏统计逻辑卷使用情况。</p><h1 id="【脚本28】获取文件列表"><a href="#【脚本28】获取文件列表" class="headerlink" title="【脚本28】获取文件列表"></a>【脚本28】获取文件列表</h1><p>有一台服务器作为web应用，有一个目录（/data/web/attachment）不定时地会被用户上传新的文件，但是不知道什么时候会上传。所以，需要我们每5分钟做一次检测是否有新文件生成。</p><p>请写一个shell脚本去完成检测。检测完成后若是有新文件，还需要将新文件的列表输出到一个按年、月、日、时、分为名字的日志里。请不要想的太复杂，核心命令只有一个 find /data/web/attachment -mmin -5</p><ul><li><p>思路：<br>每5分钟检测一次，那肯定需要有一个计划任务，每5分钟去执行一次。脚本检测的时候，就是使用find命令查找5分钟内有过更新的文件，若是有更新，那这个命令会输出东西，否则是没有输出的。固，我们可以把输出结果的行数作为比较对象，看看它是否大于0。</p></li><li><p>实现代码：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>d<span class="token operator">=</span>`date -d <span class="token string">"-5 min"</span> +%Y%m%d%H%M<span class="token variable"><span class="token variable">`</span>basedir<span class="token operator">=</span>/data/web/attachment<span class="token function">find</span> $basedir/ -type f  -mmin -5 <span class="token operator">></span> /tmp/newf.txtn<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">wc</span> -l /tmp/newf.txt`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -gt 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    /bin/mv /tmp/newf.txt /tmp/<span class="token variable">$d</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本29】统计常用命令"><a href="#【脚本29】统计常用命令" class="headerlink" title="【脚本29】统计常用命令"></a>【脚本29】统计常用命令</h1><p>写一个shell脚本来看看你使用最多的命令是哪些，列出你最常用的命令top10。</p><p>思路：我们要用到一个文件就是.bash_history，然后再去sort、uniq，剩下的就不用我多说了吧。很简单一个shell。</p><p>一条命令即可：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sort</span> /root/.bash_history <span class="token operator">|</span><span class="token function">uniq</span> -c <span class="token operator">|</span><span class="token function">sort</span> -nr <span class="token operator">|</span><span class="token function">head</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="【脚本30】统计日志大小"><a href="#【脚本30】统计日志大小" class="headerlink" title="【脚本30】统计日志大小"></a>【脚本30】统计日志大小</h1><p>假如我们需要每小时都去执行你写的脚本。在脚本中实现这样的功能，当时间是0点和12点时，需要将目录/data/log/下的文件全部清空，注意只能清空文件内容而不能删除文件。而其他时间只需要统计一下每个文件的大小，一个文件一行，输出到一个按日期和时间为名字的日志里。 需要考虑/data/log/目录下的二级、三级、… 等子目录里面的文件。</p><ul><li>实现代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>logdir<span class="token operator">=</span><span class="token string">"/data/log"</span>t<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%H<span class="token variable">`</span></span>d<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%F-%H<span class="token variable">`</span></span><span class="token punctuation">[</span> -d /tmp/log_size <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">mkdir</span> /tmp/log_size<span class="token keyword">for</span> log <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">find</span> $logdir -type f<span class="token variable">`</span></span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$t</span> <span class="token operator">==</span> <span class="token string">"0"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token variable">$t</span> <span class="token operator">==</span> <span class="token string">"12"</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>    <span class="token boolean">true</span> <span class="token operator">></span> <span class="token variable">$log</span>    <span class="token keyword">else</span>    <span class="token function">du</span> -sh <span class="token variable">$log</span> <span class="token operator">>></span>/tmp/log_size/<span class="token variable">$d</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本31】统计数字并求和"><a href="#【脚本31】统计数字并求和" class="headerlink" title="【脚本31】统计数字并求和"></a>【脚本31】统计数字并求和</h1><p>计算文档a.txt中每一行中出现的数字个数并且要计算一下整个文档中一共出现了几个数字。例如a.txt内容如下：</p><p>12aa*lkjskdj<br>alskdflkskdjflkjj</p><p>我们脚本名字为 ncount.sh, 运行它时：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> ncount.sh a.txt输入结果应该为：20sum:2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>n<span class="token operator">=</span>`wc -l a.txt<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token variable"><span class="token variable">`</span>sum<span class="token operator">=</span>0<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">`</span></span><span class="token function">seq</span> 1 <span class="token variable">$n</span><span class="token variable"><span class="token variable">`</span><span class="token keyword">do</span>    line<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">sed</span> -n <span class="token string">"<span class="token variable">$i</span>"</span>p a.txt<span class="token variable"><span class="token variable">`</span>    n_n<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> -n <span class="token variable">$line</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/[^0-9]//g'</span><span class="token operator">|</span><span class="token function">wc</span> -c`    <span class="token keyword">echo</span> line <span class="token variable">$i</span> number: <span class="token variable">$n_n</span>    sum<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$sum</span>+<span class="token variable">$n_n</span><span class="token punctuation">]</span><span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token function">sum</span> is <span class="token variable">$sum</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本32】检测文件改动"><a href="#【脚本32】检测文件改动" class="headerlink" title="【脚本32】检测文件改动"></a>【脚本32】检测文件改动</h1><p>有两台Linux服务器A和B，假如A可以直接ssh到B，不用输入密码。A和B都有一个目录叫做/data/web/ 这下面有很多文件，当然我们不知道具体有几层子目录，假若之前A和B上该目录下的文件都是一模一样的。但现在不确定是否一致了。固需要我们写一个脚本实现这样的功能，检测A机器和B机器/data/web/目录下文件的异同，我们以A机器上的文件作为标准。比如，假若B机器少了一个a.txt文件，那我们应该能够检测出来，或者B机器上的b.txt文件有过改动，我们也应该能够检测出来（B机器上多了文件我们不用考虑）。</p><ul><li>提示：</li></ul><p>使用核心命令 md5sum a.txt 算出md5值，去和B机器上的比较。</p><ul><li>实现代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#假设A机器到B机器已经做了无密码登录设置</span>dir<span class="token operator">=</span>/data/web<span class="token comment" spellcheck="true">##假设B机器的IP为192.168.0.100</span>B_ip<span class="token operator">=</span>192.168.0.100<span class="token function">find</span> <span class="token variable">$dir</span> -type f <span class="token operator">|</span><span class="token function">xargs</span> md5sum <span class="token operator">></span>/tmp/md5.txt<span class="token function">ssh</span> <span class="token variable">$B_ip</span> <span class="token string">"find <span class="token variable">$dir</span> -type f |xargs md5sum >/tmp/md5_b.txt"</span><span class="token function">scp</span> <span class="token variable">$B_ip</span>:/tmp/md5_b.txt /tmp<span class="token keyword">for</span> f <span class="token keyword">in</span> `awk <span class="token string">'{print <span class="token variable">$2</span>}'</span> /tmp/md5.txt`<span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token function">grep</span> -q <span class="token string">"<span class="token variable">$f</span>"</span> /tmp/md5_b.txt    <span class="token keyword">then</span>        md5_a<span class="token operator">=</span>`grep <span class="token variable">$f</span> /tmp/md5.txt<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token variable"><span class="token variable">`</span>        md5_b<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">grep</span> <span class="token variable">$f</span> /tmp/md5_b.txt<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>`        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$md5_a</span> <span class="token operator">!=</span> <span class="token variable">$md5_b</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>             <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$f</span> changed."</span>        <span class="token keyword">fi</span>    <span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$f</span> deleted. "</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本33】统计网卡流量"><a href="#【脚本33】统计网卡流量" class="headerlink" title="【脚本33】统计网卡流量"></a>【脚本33】统计网卡流量</h1><p>写一个脚本,检测你的网络流量，并记录到一个日志里。需要按照如下格式，并且一分钟统计一次（只需要统计外网网卡，假设网卡名字为eth0)：</p><p>2017-08-04 01:11<br>eth0 input: 1000bps<br>eth0 output : 200000bps</p><p>################<br>2017-08-04 01:12<br>eth0 input: 1000bps<br>eth0 output : 200000bps</p><p><strong>提示：</strong>使用sar -n DEV 1 59 这样可以统计一分钟的平均网卡流量，只需要最后面的平均值。另外，注意换算一下，1byt=8bit</p><ul><li>实现代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">while</span> <span class="token keyword">:</span><span class="token keyword">do</span>    LANG<span class="token operator">=</span>en    DATE<span class="token operator">=</span>`date +<span class="token string">"%Y-%m-%d %H:%M"</span><span class="token variable"><span class="token variable">`</span>    LOG_PATH<span class="token operator">=</span>/tmp/traffic_check/<span class="token variable">`</span></span><span class="token function">date</span> +%Y%m<span class="token variable"><span class="token variable">`</span>    LOG_FILE<span class="token operator">=</span>$LOG_PATH/traffic_check_<span class="token variable">`</span></span><span class="token function">date</span> +%d`.log    <span class="token punctuation">[</span> -d <span class="token variable">$LOG_PATH</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">mkdir</span> -p <span class="token variable">$LOG_PATH</span>    <span class="token keyword">echo</span> <span class="token string">" <span class="token variable">$DATE</span>"</span> <span class="token operator">>></span> <span class="token variable">$LOG_FILE</span>    sar -n DEV 1 59<span class="token operator">|</span><span class="token function">grep</span> Average<span class="token operator">|</span><span class="token function">grep</span> eth0 \     <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print "\n",<span class="token variable">$2</span>,"\t","input:",<span class="token variable">$5*1000*8</span>,"bps", \    "\t","\n",<span class="token variable">$2</span>,"\t","output:",<span class="token variable">$6*1000*8</span>,"bps" }'</span> \     <span class="token operator">>></span> <span class="token variable">$LOG_FILE</span>    <span class="token keyword">echo</span> <span class="token string">"#####################"</span> <span class="token operator">>></span> <span class="token variable">$LOG_FILE</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本34】系统-批量杀进程"><a href="#【脚本34】系统-批量杀进程" class="headerlink" title="【脚本34】系统-批量杀进程"></a>【脚本34】系统-批量杀进程</h1><p>今天发现网站访问超级慢，top看如下：</p><img src="img/1.png"><p>有很多sh进程，再ps查看：</p><img src="img/2.png"><p>这个脚本，运行很慢，因为制定了cron，上一次还没有运行完，又有了新的运行任务。太多肯定会导致系统负载升高。当务之急就是先把这些在跑的给kill掉。那么我们可以使用一条命令，直接杀死所有的sh。</p><p>命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span><span class="token function">grep</span> clearmem.sh <span class="token operator">|</span><span class="token function">grep</span> -v <span class="token function">grep</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">kill</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="【脚本35】判断是否开启80端口"><a href="#【脚本35】判断是否开启80端口" class="headerlink" title="【脚本35】判断是否开启80端口"></a>【脚本35】判断是否开启80端口</h1><p>写一个脚本判断你的Linux服务器里是否开启web服务？（监听80端口）如果开启了，请判断出跑的是什么服务，是httpd呢还是nginx又或者是其他的什么？</p><ul><li>实现代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span> port<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">netstat</span> -lnp <span class="token operator">|</span> <span class="token function">grep</span> 80<span class="token variable">`</span></span> <span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token string">"port"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>     <span class="token keyword">echo</span> <span class="token string">"not start service."</span><span class="token punctuation">;</span>     <span class="token keyword">exit</span><span class="token punctuation">;</span> <span class="token keyword">fi</span> web_server<span class="token operator">=</span>`echo <span class="token variable">$port</span> <span class="token operator">|</span> <span class="token function">awk</span> -F<span class="token string">'/'</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span><span class="token operator">|</span><span class="token function">awk</span> -F <span class="token keyword">:</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>` <span class="token keyword">case</span> <span class="token variable">$web_server</span> <span class="token keyword">in</span>   httpd <span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"apache server."</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span>   nginx <span class="token punctuation">)</span>       <span class="token keyword">echo</span> <span class="token string">"nginx server."</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span>   * <span class="token punctuation">)</span>       <span class="token keyword">echo</span> <span class="token string">"other server."</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span> esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本36】监控mysql服务"><a href="#【脚本36】监控mysql服务" class="headerlink" title="【脚本36】监控mysql服务"></a>【脚本36】监控mysql服务</h1><p>假设，当前MySQL服务的root密码为123456，写脚本检测MySQL服务是否正常（比如，可以正常进入mysql执行show processlist），并检测一下当前的MySQL服务是主还是从，如果是从，请判断它的主从服务是否异常。如果是主，则不需要做什么。</p><ul><li>实现代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>Mysql_c<span class="token operator">=</span><span class="token string">"mysql -uroot -p123456"</span><span class="token variable">$Mysql_c</span> -e <span class="token string">"show processlist"</span> <span class="token operator">></span>/tmp/mysql_pro.log 2<span class="token operator">></span>/tmp/mysql_log.errn<span class="token operator">=</span>`wc -l /tmp/mysql_log.err<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -gt 0 <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"mysql service sth wrong."</span><span class="token keyword">else</span>    <span class="token variable">$Mysql_c</span> -e <span class="token string">"show slave status\G"</span> <span class="token operator">></span>/tmp/mysql_s.log    n1<span class="token operator">=</span>`wc -l /tmp/mysql_s.log<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token variable"><span class="token variable">`</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> $n1 -gt 0 <span class="token punctuation">]</span>    <span class="token keyword">then</span>        y1<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">grep</span> <span class="token string">'Slave_IO_Running:'</span> /tmp/mysql_s.log<span class="token operator">|</span><span class="token function">awk</span> -F <span class="token keyword">:</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/ //g'</span><span class="token variable"><span class="token variable">`</span>        y2<span class="token operator">=</span><span class="token variable">`</span></span><span class="token function">grep</span> <span class="token string">'Slave_SQL_Running:'</span> /tmp/mysql_s.log<span class="token operator">|</span><span class="token function">awk</span> -F <span class="token keyword">:</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/ //g'</span>`        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$y1</span> <span class="token operator">==</span> <span class="token string">"Yes"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$y2</span> <span class="token operator">==</span> <span class="token string">"Yes"</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>            <span class="token keyword">echo</span> <span class="token string">"slave status good."</span>        <span class="token keyword">else</span>            <span class="token keyword">echo</span> <span class="token string">"slave down."</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本37】带选项的用户脚本"><a href="#【脚本37】带选项的用户脚本" class="headerlink" title="【脚本37】带选项的用户脚本"></a>【脚本37】带选项的用户脚本</h1><ul><li>要求如下：</li></ul><p>只支持三个选项 ‘–del’ ‘–add’ –help输入其他选项报错。<br>使用‘–add’需要验证用户名是否存在，存在则反馈存在。且不添加。 不存在则创建该用户，切&gt;添加与该用户名相同的密码。并且反馈。<br>使用‘–del’ 需要验证用户名是否存在，存在则删除用户及其家目录。不存在则反馈该用户不存&gt;在。<br>–help 选项反馈出使用方法<br>支持以，分隔 一次删除多个或者添加多个用户。<br>能用echo $? 检测脚本执行情况 成功删除或者添加为0,报错信息为其他数字。<br>能以，分割。一次性添加或者 删除多个用户。 例如 adddel.sh –add user1,user2,user3…….<br>不允许存在明显bug。</p><ul><li>代码参考：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#written by aming.</span><span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token comment" spellcheck="true"># -eq 0 -o $# -gt 2 ]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"use <span class="token variable">$0</span> --add username or <span class="token variable">$0</span> --del username or <span class="token variable">$0</span> --help."</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>    --add<span class="token punctuation">)</span>        n<span class="token operator">=</span>0        <span class="token keyword">for</span> u <span class="token keyword">in</span> `echo <span class="token variable">$2</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/,/ /g'</span>`<span class="token punctuation">;</span> <span class="token keyword">do</span>            <span class="token keyword">if</span> <span class="token function">awk</span> -F: <span class="token string">'{print <span class="token variable">$1</span>}'</span> /etc/passwd <span class="token operator">|</span><span class="token function">grep</span> -qw <span class="token string">"<span class="token variable">$u</span>"</span>            <span class="token keyword">then</span>               <span class="token keyword">echo</span> <span class="token string">"The user <span class="token variable">$u</span> exist."</span>            <span class="token keyword">else</span>                <span class="token function">useradd</span> <span class="token variable">$u</span>                <span class="token keyword">echo</span> -e <span class="token string">"<span class="token variable">$u</span>\n<span class="token variable">$u</span>"</span><span class="token operator">|</span><span class="token function">passwd</span> <span class="token variable">$u</span> <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1                <span class="token keyword">echo</span> <span class="token string">"The user <span class="token variable">$u</span> added successfully."</span>                n<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$n</span>+1<span class="token punctuation">]</span>            <span class="token keyword">fi</span>        <span class="token keyword">done</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token keyword">exit</span> 2        <span class="token keyword">fi</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    --del<span class="token punctuation">)</span>        n<span class="token operator">=</span>0        <span class="token keyword">for</span> u <span class="token keyword">in</span> `echo <span class="token variable">$2</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/,/ /g'</span>`<span class="token punctuation">;</span> <span class="token keyword">do</span>            <span class="token keyword">if</span> <span class="token function">awk</span> -F: <span class="token string">'{print <span class="token variable">$1</span>}'</span> /etc/passwd<span class="token operator">|</span><span class="token function">grep</span> -qw <span class="token string">"<span class="token variable">$u</span>"</span>            <span class="token keyword">then</span>               <span class="token function">userdel</span> -r <span class="token variable">$u</span>                <span class="token keyword">echo</span> <span class="token string">"The user <span class="token variable">$u</span> deleted successfully."</span>                n<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$n</span>+1<span class="token punctuation">]</span>            <span class="token keyword">else</span>                <span class="token keyword">echo</span> <span class="token string">"The user <span class="token variable">$u</span> not exist."</span>            <span class="token keyword">fi</span>        <span class="token keyword">done</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                <span class="token keyword">exit</span> 3        <span class="token keyword">fi</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    --help<span class="token punctuation">)</span>        <span class="token keyword">echo</span> -e <span class="token string">"--add can add user,and the passwd is the same as username.         It can add multiuser such as --add user1,user2,user3..."</span>        <span class="token keyword">echo</span> <span class="token string">"--del cat delete user.It can delete user such as --del user1,user2,user3..."</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"use <span class="token variable">$0</span> --add username or <span class="token variable">$0</span> --del username or <span class="token variable">$0</span> --help."</span>        <span class="token keyword">exit</span> 1        <span class="token punctuation">;</span><span class="token punctuation">;</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本38】被3整除"><a href="#【脚本38】被3整除" class="headerlink" title="【脚本38】被3整除"></a>【脚本38】被3整除</h1><p>写一个脚本： 计算100以内所有能被3整除的正整数的和</p><ul><li>代码参考：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>sum<span class="token operator">=</span>0<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">{</span>1<span class="token punctuation">..</span>100<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token punctuation">[</span><span class="token variable">$i</span>%3<span class="token punctuation">]</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    sum<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$i</span>+<span class="token variable">$sum</span><span class="token punctuation">]</span>     <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token string">"sum:<span class="token variable">$sum</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本39】脚本传参"><a href="#【脚本39】脚本传参" class="headerlink" title="【脚本39】脚本传参"></a>【脚本39】脚本传参</h1><p>使用传参的方法写个脚本，实现加减乘除的功能。例如： sh a.sh 1 2，这样会分别计算加、减、乘、除的结果。</p><ul><li>要求：</li></ul><p>脚本需判断提供的两个数字必须为整数<br>当做减法或者除法时，需要判断哪个数字大<br>减法时需要用大的数字减小的数字<br>除法时需要用大的数字除以小的数字，并且结果需要保留两个小数点。</p><ul><li>参考代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token comment" spellcheck="true"># -ne 2 ]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"The number of parameter is not 2, Please useage: ./<span class="token variable">$0</span> 1 2"</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span>is_int<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span>"</span><span class="token operator">|</span><span class="token function">grep</span> -q <span class="token string">'[^0-9]'</span>    <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span> is not integer number."</span>    <span class="token keyword">exit</span> 1    <span class="token keyword">fi</span><span class="token punctuation">}</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> -ge <span class="token variable">$2</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token variable">$1</span>    <span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token variable">$2</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> -lt <span class="token variable">$2</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token variable">$1</span>    <span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token variable">$2</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span> + <span class="token variable">$2</span> = $[<span class="token variable">$1</span>+<span class="token variable">$2</span>]"</span><span class="token punctuation">}</span>minus<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    big<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>max $1 $2<span class="token variable">`</span></span>    small<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>min $1 $2<span class="token variable">`</span></span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$big</span> - <span class="token variable">$small</span> = $[<span class="token variable">$big</span>-<span class="token variable">$small</span>]"</span><span class="token punctuation">}</span>mult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span> * <span class="token variable">$2</span> = $[<span class="token variable">$1*</span><span class="token variable">$2</span>]"</span><span class="token punctuation">}</span>div<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    big<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>max $1 $2<span class="token variable">`</span></span>    small<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>min $1 $2<span class="token variable">`</span></span>    d<span class="token operator">=</span>`echo <span class="token string">"scale =2; <span class="token variable">$big</span> / <span class="token variable">$small</span>"</span><span class="token operator">|</span>bc`    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$big</span> / <span class="token variable">$small</span> = <span class="token variable">$d</span>"</span><span class="token punctuation">}</span>is_int <span class="token variable">$1</span>is_int <span class="token variable">$2</span><span class="token function">sum</span> <span class="token variable">$1</span> <span class="token variable">$2</span>minus <span class="token variable">$1</span> <span class="token variable">$2</span>mult <span class="token variable">$1</span> <span class="token variable">$2</span>div <span class="token variable">$1</span> <span class="token variable">$2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本40】用户交互脚本"><a href="#【脚本40】用户交互脚本" class="headerlink" title="【脚本40】用户交互脚本"></a>【脚本40】用户交互脚本</h1><p>写一个脚本，执行后，打印一行提示“Please input a number:”，要求用户输入数值，然后打印出该数值，然后再次要求用户输入数值。直到用户输入”end”停止。</p><ul><li>代码参考：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">while</span> <span class="token keyword">:</span><span class="token keyword">do</span> <span class="token function">read</span> -p <span class="token string">"Please input a number:(end for exit) "</span> n num<span class="token operator">=</span>` <span class="token keyword">echo</span> <span class="token variable">$n</span> <span class="token operator">|</span><span class="token function">sed</span> -r <span class="token string">'s/[0-9]//g'</span><span class="token operator">|</span><span class="token function">wc</span> -c ` <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> <span class="token operator">==</span> <span class="token string">"end"</span> <span class="token punctuation">]</span> <span class="token keyword">then</span>     <span class="token keyword">exit</span> <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$num</span> -ne 1 <span class="token punctuation">]</span> <span class="token keyword">then</span>     <span class="token keyword">echo</span> <span class="token string">"what you input is not a number!Try again!"</span> <span class="token keyword">else</span>     <span class="token keyword">echo</span> <span class="token string">"your input number is: <span class="token variable">$n</span>"</span> <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本实例(二)</title>
      <link href="/shell-jiao-ben-shi-li-er/"/>
      <url>/shell-jiao-ben-shi-li-er/</url>
      
        <content type="html"><![CDATA[<h1 id="【脚本12】批量更改文件名"><a href="#【脚本12】批量更改文件名" class="headerlink" title="【脚本12】批量更改文件名"></a>【脚本12】批量更改文件名</h1><p>需求：</p><p>找到/123目录下所有后缀名为.txt的文件<br>批量修改.txt为.txt.bak<br>把所有.bak文件打包压缩为123.tar.gz<br>批量还原文件的名字，即把增加的.bak再删除<br>代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>now<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%F_%T<span class="token variable">`</span></span><span class="token function">mkdir</span> /tmp/123_<span class="token variable">$now</span><span class="token keyword">for</span> txt <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> /123/*.txt<span class="token variable">`</span></span><span class="token keyword">do</span>  <span class="token function">mv</span> <span class="token variable">$txt</span> <span class="token variable">$txt</span>.bak  <span class="token keyword">for</span> f <span class="token keyword">in</span> <span class="token variable">$txt</span>  <span class="token keyword">do</span>    <span class="token function">cp</span> <span class="token variable">$txt</span>.bak /tmp/123_<span class="token variable">$now</span>  <span class="token keyword">done</span><span class="token keyword">done</span><span class="token function">cd</span> /tmp/<span class="token function">tar</span> czf 123.tar.gz 123_<span class="token variable">$now</span>/<span class="token keyword">for</span> txt <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> /123/*.txt.bak<span class="token variable">`</span></span><span class="token keyword">do</span>  name<span class="token operator">=</span>`echo <span class="token variable">$txt</span> <span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">'.'</span> <span class="token string">'{OFS="."} {print <span class="token variable">$1</span>,<span class="token variable">$2</span>}'</span>`  <span class="token function">mv</span> <span class="token variable">$txt</span> <span class="token variable">$name</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本13】监控80端口"><a href="#【脚本13】监控80端口" class="headerlink" title="【脚本13】监控80端口"></a>【脚本13】监控80端口</h1><p>需求：<br>写一个脚本，判断本机的80端口（假如服务为httpd）是否开启着，如果开启着什么都不做，如果发现端口不存在，那么重启一下httpd服务，并发邮件通知你自己。脚本写好后，可以每一分钟执行一次，也可以写一个死循环的脚本，30s检测一次。<br>发邮件的脚本参考【脚本11】的示例代码。<br>代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>email<span class="token operator">=</span><span class="token string">"user@example.com"</span><span class="token keyword">if</span> <span class="token function">netstat</span> -lntp <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">':80'</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'httpd'</span><span class="token keyword">then</span>   <span class="token keyword">echo</span> <span class="token string">"80 port no problem"</span>   <span class="token keyword">exit</span><span class="token keyword">else</span>   /usr/local/apache2.4/bin/apachectl restart   python mail.py <span class="token variable">$email</span> <span class="token string">"check_80port"</span> <span class="token string">"The 80 port is down."</span>   n<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> aux <span class="token operator">|</span><span class="token function">grep</span> httpd<span class="token operator">|</span><span class="token function">grep</span> -cv <span class="token function">grep</span><span class="token variable">`</span></span>   <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -eq 0 <span class="token punctuation">]</span>   <span class="token keyword">then</span>      /usr/local/apache2/bin/apachectl start 2<span class="token operator">></span>/tmp/apache_start.err   <span class="token keyword">fi</span>   <span class="token keyword">if</span> <span class="token punctuation">[</span> -s /tmp/apache_start.err <span class="token punctuation">]</span>     <span class="token keyword">then</span>      python mail.py  <span class="token variable">$mail</span> <span class="token string">'apache_start_error'</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /tmp/apache_start.err<span class="token variable">`</span></span>   <span class="token keyword">fi</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本14】备份数据库"><a href="#【脚本14】备份数据库" class="headerlink" title="【脚本14】备份数据库"></a>【脚本14】备份数据库</h1><p>需求：</p><p>设计一个shell脚本来备份数据库，首先在本地服务器上保存一份数据，然后再远程拷贝一份，本地保存一周的数据，远程保存一个月。</p><p>假定，我们知道mysql root账号的密码，要备份的库为discuz，本地备份目录为/bak/mysql, 远程服务器ip为192.168.123.30，远程提供了一个rsync服务，备份的地址是 192.168.123.30::backup . 写完脚本后，需要加入到cron中，每天凌晨3点执行。<br>脚本代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>PATH<span class="token operator">=</span><span class="token variable">$PATHi</span>:/usr/local/mysql/binweek<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%w<span class="token variable">`</span></span>today<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +d<span class="token variable">`</span></span>passwd<span class="token operator">=</span><span class="token string">"123456"</span>backdir<span class="token operator">=</span><span class="token string">"/data/mysql"</span>r_backupIP<span class="token operator">=</span><span class="token string">"192.168.123.30::backup"</span><span class="token function">exec</span> 1<span class="token operator">></span>/var/log/mysqlbak.log 2<span class="token operator">></span>/var/log/mysqlbak.log<span class="token keyword">echo</span> <span class="token string">"mysql backup begin at <span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%F %T<span class="token variable">`</span></span>."</span><span class="token comment" spellcheck="true"># 本地备份</span>mysqldump -uroot -p<span class="token variable">$passwd</span> --default-character-set<span class="token operator">=</span>utf8 discuz <span class="token operator">></span><span class="token variable">$backdir</span>/<span class="token variable">$week</span>.sql<span class="token comment" spellcheck="true"># 同步备份到远程机器</span><span class="token function">rsync</span> -az <span class="token variable">$backdir</span>/<span class="token variable">$week</span>.sql <span class="token variable">$r_backupIP</span>/<span class="token variable">$today</span>.sql<span class="token keyword">echo</span> <span class="token string">"mysql backup end at <span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%F %T<span class="token variable">`</span></span>."</span>然后加入cron0 3 * * * /bin/bash /usr/local/sbin/mysqlbak.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本15】自动重启php-fpm服务"><a href="#【脚本15】自动重启php-fpm服务" class="headerlink" title="【脚本15】自动重启php-fpm服务"></a>【脚本15】自动重启php-fpm服务</h1><p>服务器上跑的是LNMP环境，近期总是有502现象。502为网站访问的状态码，200正常，502错误是nginx最为普通的错误状态码。由于502只是暂时的，并且只要一重启php-fpm服务则502消失，但不重启的话，则会一直持续很长时间。所以有必要写一个监控脚本，监控访问日志的状态码，一旦发生502，则自动重启一下php-fpm。</p><p>我们设定：</p><p>access_log /data/log/access.log<br>脚本死循环，每10s检测一次（假设每10s钟的日志条数为300左右）<br>重启php-fpm的方法是 /etc/init.d/php-fpm restart<br>脚本代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>access_log<span class="token operator">=</span><span class="token string">"/data/log/access.log"</span>N<span class="token operator">=</span>10<span class="token keyword">while</span> <span class="token keyword">:</span><span class="token keyword">do</span>   <span class="token comment" spellcheck="true"># 因为10秒大概产生300条日志记录</span>   <span class="token function">tail</span> -n300 <span class="token variable">$access_log</span> <span class="token operator">></span> /tmp/log   <span class="token comment" spellcheck="true"># 拿出log中包含502的日志行数</span>   n_502<span class="token operator">=</span>`grep -c <span class="token string">"502"</span> /tmp/log`   <span class="token comment" spellcheck="true"># 如果行数大于10</span>   <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n_502</span> -ge <span class="token variable">$N</span> <span class="token punctuation">]</span>   <span class="token keyword">then</span>      <span class="token comment" spellcheck="true"># 就记录一下系统状态</span>      <span class="token function">top</span> -bn1 <span class="token operator">></span> /tmp/<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%H%M%S<span class="token variable">`</span></span>-top.log      <span class="token function">vmstat</span> 1 5 <span class="token operator">></span> /tmp/<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%H%M%S<span class="token variable">`</span></span>-vm.log      <span class="token comment" spellcheck="true"># 然后才重启服务，并把错误信息重定向</span>      /etc/init.d/php-fpm restart 2<span class="token operator">></span> /dev/null      <span class="token comment" spellcheck="true"># 重启php-fpm服务后，应先暂缓1分钟，而后继续每隔10s检测一次</span>      sleep<span class="token punctuation">(</span>60<span class="token punctuation">)</span>   <span class="token keyword">fi</span>   sleep<span class="token punctuation">(</span>10<span class="token punctuation">)</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本16】文本替换"><a href="#【脚本16】文本替换" class="headerlink" title="【脚本16】文本替换"></a>【脚本16】文本替换</h1><p>将memcached里的数据导出到文件中，然后再导入memcached里却发现数据过期了，这是因为导出的数据是带有一个时间戳的，这个时间戳就是该条数据过期的时间点，如果当前时间已经超过该时间戳，那么是导入不进去的。不过可以修改文件中的时间戳来保证导入时数据的有效期。可以写一个简单的脚本批量替换这些文件中的时间戳：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>hour<span class="token operator">=</span>`date -d <span class="token string">"+1 hour"</span> +%s`  <span class="token comment" spellcheck="true"># 一个小时之后的时间戳</span>data_time<span class="token operator">=</span>`cat data.txt <span class="token operator">|</span><span class="token function">grep</span> add <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$4</span>}'</span> <span class="token operator">|</span><span class="token function">sort</span> -n <span class="token operator">|</span>uniq`<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$data_time</span><span class="token keyword">do</span>   <span class="token function">sed</span> -i <span class="token string">"s/<span class="token variable">$i</span>/<span class="token variable">$hour</span>/g"</span> <span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> $i -rl /root/data.txt<span class="token variable">`</span></span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本17】启动容器"><a href="#【脚本17】启动容器" class="headerlink" title="【脚本17】启动容器"></a>【脚本17】启动容器</h1><p>docker每次关闭都会连带着将运行中的容器关闭，所以每次启动docker后都需要逐个去启动容器，很麻烦，由于是实验用的虚拟机不是线上的机器，所以就直接写了一个很简单的循环来启动容器：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>/usr/bin/systemctl start docker<span class="token keyword">for</span> i <span class="token keyword">in</span> `docker <span class="token function">ps</span> -a <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'Exited'</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>`<span class="token keyword">do</span>  /usr/bin/docker start <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本18】删除文本中的字母"><a href="#【脚本18】删除文本中的字母" class="headerlink" title="【脚本18】删除文本中的字母"></a>【脚本18】删除文本中的字母</h1><p>要求：把一个文本文档的前5行中包含字母的行删除掉，同时把6到10行中的全部字母删除掉。</p><p>参考答案：假设文本名字叫做1.txt，并且文本行数大于10，脚本如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">## 先获取该文本的行数</span>rows<span class="token operator">=</span>`wc -l 1.txt <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>`<span class="token comment" spellcheck="true">## 对前5行进行处理</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 5<span class="token variable">`</span></span><span class="token keyword">do</span>  <span class="token comment" spellcheck="true">## 使用sed把每一行的内容赋值给变量</span>  row<span class="token operator">=</span>`sed -n <span class="token string">"<span class="token variable">$i</span>"</span>p 1.txt`  <span class="token comment" spellcheck="true">## 用grep 判定是否匹配字母，-v取反，-q不输出内容</span>  <span class="token keyword">if</span> <span class="token keyword">echo</span> <span class="token variable">$row</span> <span class="token operator">|</span><span class="token function">grep</span> -vq <span class="token string">'[a-zA-Z]'</span>  <span class="token keyword">then</span>     <span class="token keyword">echo</span> <span class="token variable">$row</span>  <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token comment" spellcheck="true">## 对6-10行做删除字母处理</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 6 10<span class="token variable">`</span></span><span class="token keyword">do</span>  row<span class="token operator">=</span>`sed -n <span class="token string">"<span class="token variable">$i</span>"</span>p 1.txt`  <span class="token keyword">echo</span> <span class="token variable">$row</span> <span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/[a-zA-Z]//g'</span><span class="token keyword">done</span><span class="token comment" spellcheck="true">## 剩余的直接输出</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 11 $rows<span class="token variable">`</span></span><span class="token keyword">do</span>  <span class="token function">sed</span> -n <span class="token string">"<span class="token variable">$i</span>"</span>p 1.txt<span class="token keyword">done</span><span class="token comment" spellcheck="true">##若想把更改内容写入到1.txt，还需要把以上内容重定向到一个文本中，然后删除1.txt，再把刚刚重定向的文件更名为1.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本19】查找字母数小于6的单词"><a href="#【脚本19】查找字母数小于6的单词" class="headerlink" title="【脚本19】查找字母数小于6的单词"></a>【脚本19】查找字母数小于6的单词</h1><p>用shell打印下面这句话中字母数小于6的单词。<br>Bash also interprets a number of multi-character options.</p><ul><li>脚本如下：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> s <span class="token keyword">in</span> Bash also interprets a number of multi-character options<span class="token keyword">do</span>  n<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token keyword">echo</span> $s <span class="token operator">|</span><span class="token function">wc</span> -c<span class="token variable">`</span></span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -lt 6 <span class="token punctuation">]</span>  <span class="token keyword">then</span>     <span class="token keyword">echo</span> <span class="token variable">$s</span>  <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本20】输入数字执行对应命令"><a href="#【脚本20】输入数字执行对应命令" class="headerlink" title="【脚本20】输入数字执行对应命令"></a>【脚本20】输入数字执行对应命令</h1><p>写一个脚本实现如下功能： 输入一个数字，然后运行对应的一个命令。显示命令如下：</p><p>cmd meau* 1—date 2–ls 3–who 4–pwd<br>当输入1时，会运行date, 输入2时运行ls, 依此类推。</p><p>实现脚本如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">echo</span> <span class="token string">"*cmd meau**  1—date 2–ls 3–who 4–pwd"</span><span class="token function">read</span> -p <span class="token string">"please input a number 1-4: "</span> n<span class="token keyword">case</span> <span class="token variable">$n</span> <span class="token keyword">in</span>   1<span class="token punctuation">)</span>      <span class="token function">date</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span>   2<span class="token punctuation">)</span>      <span class="token function">ls</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span>   3<span class="token punctuation">)</span>      <span class="token function">who</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span>   4<span class="token punctuation">)</span>      <span class="token function">pwd</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span>   *<span class="token punctuation">)</span>      <span class="token keyword">echo</span> <span class="token string">"Please input a number: 1-4"</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本21】批量创建用户并设置密码"><a href="#【脚本21】批量创建用户并设置密码" class="headerlink" title="【脚本21】批量创建用户并设置密码"></a>【脚本21】批量创建用户并设置密码</h1><p>用shell脚本实现如下需求：<br>添加user_00 – user_09 10个用户，并且给他们设置一个随机密码，密码要求10位包含大小写字母以及数字，注意需要把每个用户的密码记录到一个日志文件里。</p><ul><li>提示：</li></ul><p>随机密码使用命令 mkpasswd<br>在脚本中给用户设置密码，可以使用echo 然后管道passwd命令<br>实现脚本如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 00 09<span class="token variable">`</span></span><span class="token keyword">do</span>   <span class="token function">useradd</span> user_<span class="token variable">$i</span>   p<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>mkpasswd -s 0 -l 10<span class="token variable">`</span></span>   <span class="token keyword">echo</span> <span class="token string">"user_<span class="token variable">$i</span> <span class="token variable">$p</span>"</span> <span class="token operator">>></span> /tmp/user0_9.pw   <span class="token keyword">echo</span> <span class="token variable">$p</span> <span class="token operator">|</span><span class="token function">passwd</span> -stdin user_<span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#【脚本22】监控httpd进程</p><p>在服务器上，写一个监控脚本。</p><p>每隔10s去检测一次服务器上的httpd进程数，如果大于等于500的时候，就需要自动重启一下apache服务，并检测启动是否成功？<br>若没有正常启动还需再一次启动，最大不成功数超过5次则需要理解发邮件通知管理员，并且以后不需要再检测！<br>如果启动成功后，1分钟后再次检测httpd进程数，若正常则重复之前操作（每隔10s检测一次），若还是大于等于500，那放弃重启并需要发邮件给管理员，然后自动退出该脚本。假设其中发邮件脚本为mail.py</p><ul><li>实现脚本如下：<pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>check_service(){<br>  n=0<br>  for i in <code>seq 1 5</code><br>  do<br>    # apachectl命令所在路径<br>    /usr/local/apache2/bin/apachectl restart 2&gt; /tmp/apache.err<br>    if [$? -ne 0 ]<br>    then<br>       n=$[$n-1]<br>    else<br>       break<br>    fi</p><p>  done</p><p>  if [ $n -eq 5 ]<br>  then<br>    ## mail.py的内容参考<a href="https://coding.net/u/aminglinux/p/aminglinux-book/git/blob/master/D22Z/mail.py" target="_blank" rel="noopener">https://coding.net/u/aminglinux/p/aminglinux-book/git/blob/master/D22Z/mail.py</a><br>    python mail.py “<a href="mailto:123@qq.com" target="_blank" rel="noopener">123@qq.com</a>“ “httpd service down” <code>cat /tmp/apache.err</code><br>    exit</p><p>  fi<br>}</p><p>while :<br>do<br>  t_n=<code>ps -C httpd --no-heading |wc -l</code><br>  if [ $t_n -ge 500 ]<br>  then<br>     /usr/local/apache2/bin/apachectl restart<br>     if [ $? -ne 0 ]<br>     then<br>        check_service<br>     fi<br>     sleep 60<br>     t_n=<code>ps -C httpd --no-heading |wc -l</code><br>     if [ $t_n -ge 500]<br>     then<br>        python mail.py “<a href="mailto:123@qq.com" target="_blank" rel="noopener">123@qq.com</a>“ “httpd service somth wrong” “the httpd process is budy.”<br>        exit<br>     fi<br>  fi<br>  sleep 10<br>done</p><pre><code># 【脚本23】封ip- 需求： 根据web服务器上的访问日志，把一些请求量非常高的ip给拒绝掉！- 分析： 我们要做的，不仅是要找到哪些ip请求量不合法，并且还要每隔一段时间把之前封掉的ip（若不再继续请求了）给解封。 所以该脚本的关键点在于定一个合适的时间段和阈值。比如， 我们可以每一分钟去查看一下日志，把上一分钟的日志给过滤出来分析，并且只要请求的ip数量超过100次那么就直接封掉。 而解封的时间又规定为每半小时分析一次，把几乎没有请求量的ip给解封！- 参考日志文件片段：157.55.39.107 [20/Mar/2015:00:01:24 +0800] www.aminglinux.com “/bbs/thread-5622-3-1.html” 200 “-” “Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)”61.240.150.37 [20/Mar/2015:00:01:34 +0800] www.aminglinux.com “/bbs/search.php?mod=forum&amp;srchtxt=LNMP&amp;formhash=8f0c7da9&amp;searchsubmit=true&amp;source=hotsearch” 200 “-” “Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)”- 脚本实现如下：``` bash#!/bin/bash## 日志文件路径log_file=&quot;/home/logs/client/access.log&quot;## 当前时间减一分钟的时间d1=`date -d &quot;-1 minute&quot; +%H:%M`## 当前时间的分钟段d2=`date +%M`## iptables命令所在的路径ipt=&quot;/sbin/iptables&quot;## 用于存储访问日志里的ipips=&quot;/tmp/ips.txt&quot;## 封ipblock(){   ## 把日志文件中的ip过滤出来，去掉重复的ip，并统计ip的重复次数以及对ip进行排序，最后将结果写到一个文件中   grep &quot;$d1:&quot; $log_file |awk &#39;{print $1}&#39; |sort -n |uniq -c |sort -n &gt; $ips   ## 将文件里重复次数大于100的ip迭代出来   for ip in `awk &#39;$1 &gt; 100 {print $2}&#39; $ips`   do      ## 通过防火墙规则对这些ip进行封禁      $ipt -I INPUT -p -tcp --dport 80 -s $ip -j REJECT      ## 将已经封禁的ip输出到一个文件里存储      echo &quot;`date +%F-%T` $ip&quot; &gt;&gt; /tmp/badip.txt   done}## 解封ipunblock(){   ## 将流量小于15的规则索引过滤出来   for i in `$ipt -nvL --line-number |grep &#39;0.0.0.0/0&#39; |awk &#39;$2 &lt; 15 {print $1}&#39; |sort -nr`   do      ## 通过索引来删除规则      $ipt -D INPUT $i   done   ## 清空规则中的数据包计算器和字节计数器   $ipt -Z}## 为整点或30分钟就是过了半个小时，就需要再进行分析if [ $d2 == &quot;00&quot; ] || [ $d2 == &quot;30&quot; ]then   unblock   blockelse   blockfi</code></pre><h1 id="【脚本24】部署前端项目"><a href="#【脚本24】部署前端项目" class="headerlink" title="【脚本24】部署前端项目"></a>【脚本24】部署前端项目</h1><p>最近做了一个web前端的项目，需要编写一个脚本完成项目的上线。</p><ul><li>脚本实现如下：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 使用方法：</span><span class="token comment" spellcheck="true"># mmall：front_deploy.sh mmall-fe</span><span class="token comment" spellcheck="true"># admin：front_deploy.sh admin-fe</span><span class="token comment" spellcheck="true">#</span>GIT_HOME<span class="token operator">=</span>/developer/git-repository/   <span class="token comment" spellcheck="true"># 从git仓库拉取下来的源码的存放路径</span>DEST_PATH<span class="token operator">=</span>/product/frontend/    <span class="token comment" spellcheck="true"># 项目打包后的发布路径</span><span class="token comment" spellcheck="true"># cd dir</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -n <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"请输入要发布的项目！"</span>    <span class="token keyword">exit</span><span class="token keyword">fi</span> <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"mmall-fe"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"===========Enter mall-fe============="</span>    <span class="token function">cd</span> <span class="token variable">$GIT_HOME</span><span class="token variable">$1</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">"admin-fe"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"===========Enter mall-fe============="</span>    <span class="token function">cd</span> <span class="token variable">$GIT_HOME</span><span class="token variable">$1</span><span class="token keyword">else</span>     <span class="token keyword">echo</span> -e <span class="token string">"输入的项目名没有找到！"</span>    <span class="token keyword">exit</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># clear git dist</span><span class="token keyword">echo</span> -e <span class="token string">"===========Clear Git Dist============="</span><span class="token function">rm</span> -rf ./dist<span class="token comment" spellcheck="true"># git操作</span><span class="token keyword">echo</span> -e <span class="token string">"===========git checkout master============="</span><span class="token function">git</span> checkout master<span class="token keyword">echo</span> -e <span class="token string">"===========git pull============="</span><span class="token function">git</span> pull<span class="token comment" spellcheck="true"># npm install</span><span class="token keyword">echo</span> -e <span class="token string">"===========npm install============="</span><span class="token function">npm</span> <span class="token function">install</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># npm run dist</span><span class="token keyword">echo</span> -e <span class="token string">"===========npm run dist============="</span><span class="token function">npm</span> run dist<span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token string">"./dist"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token comment" spellcheck="true"># backup dest</span>    <span class="token keyword">echo</span> -e <span class="token string">"===========dest backup============="</span>    <span class="token function">mv</span> <span class="token variable">$DEST_PATH</span><span class="token variable">$1</span>/dist <span class="token variable">$DEST_PATH</span><span class="token variable">$1</span>/dist.bak    <span class="token comment" spellcheck="true"># copy</span>    <span class="token keyword">echo</span> -e <span class="token string">"===========copy============="</span>    <span class="token function">cp</span> -R ./dist <span class="token variable">$DEST_PATH</span><span class="token variable">$1</span>    <span class="token comment" spellcheck="true"># echo result</span>    <span class="token keyword">echo</span> -e <span class="token string">"===========Deploy Success============="</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> -e <span class="token string">"===========Deploy Error============="</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本实例(一)</title>
      <link href="/shell-jiao-ben-shi-li/"/>
      <url>/shell-jiao-ben-shi-li/</url>
      
        <content type="html"><![CDATA[<h1 id="【脚本1】打印形状"><a href="#【脚本1】打印形状" class="headerlink" title="【脚本1】打印形状"></a>【脚本1】打印形状</h1><p>打印等腰三角形、直角三角形、倒直角三角形、菱形</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># 等腰三角形</span><span class="token function">read</span> -p <span class="token string">"Please input the length: "</span> n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 $n<span class="token variable">`</span></span><span class="token keyword">do</span>   <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>j<span class="token operator">=</span>$n<span class="token punctuation">;</span>j<span class="token operator">></span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">))</span></span>   <span class="token keyword">do</span>      <span class="token keyword">echo</span> -n <span class="token string">" "</span>   <span class="token keyword">done</span>   <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 $i<span class="token variable">`</span></span>   <span class="token keyword">do</span>     <span class="token keyword">echo</span> -n <span class="token string">"* "</span>   <span class="token keyword">done</span>   <span class="token keyword">echo</span> <span class="token keyword">done</span><span class="token comment" spellcheck="true"># 倒直角三角形</span><span class="token function">read</span> -p <span class="token string">"Please input the length: "</span> len<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 $len<span class="token variable">`</span></span><span class="token keyword">do</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> $i $len<span class="token variable">`</span></span>    <span class="token keyword">do</span>       <span class="token keyword">echo</span> -n <span class="token string">"* "</span>    <span class="token keyword">done</span>    <span class="token keyword">echo</span><span class="token keyword">done</span><span class="token comment" spellcheck="true"># 直角三角形</span><span class="token function">read</span> -p <span class="token string">"Please input the length: "</span> len<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 $len<span class="token variable">`</span></span><span class="token keyword">do</span>    <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>$i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">))</span></span>    <span class="token keyword">do</span>       <span class="token keyword">echo</span> -n <span class="token string">"* "</span>    <span class="token keyword">done</span>    <span class="token keyword">echo</span><span class="token keyword">done</span><span class="token comment" spellcheck="true"># 菱形</span><span class="token function">read</span> -p <span class="token string">"Please input the length: "</span> n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 $n<span class="token variable">`</span></span><span class="token keyword">do</span>   <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>j<span class="token operator">=</span>$n<span class="token punctuation">;</span>j<span class="token operator">></span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">))</span></span>   <span class="token keyword">do</span>      <span class="token keyword">echo</span> -n <span class="token string">" "</span>   <span class="token keyword">done</span>   <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 $i<span class="token variable">`</span></span>   <span class="token keyword">do</span>     <span class="token keyword">echo</span> -n <span class="token string">"* "</span>   <span class="token keyword">done</span>   <span class="token keyword">echo</span> <span class="token keyword">done</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 $n<span class="token variable">`</span></span><span class="token keyword">do</span>    <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>$i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">))</span></span>    <span class="token keyword">do</span>       <span class="token keyword">echo</span> -n <span class="token string">" "</span>    <span class="token keyword">done</span>    <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>k<span class="token operator">=</span>$i<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>$len<span class="token number">-1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">))</span></span>    <span class="token keyword">do</span>          <span class="token keyword">echo</span> -n <span class="token string">"* "</span>    <span class="token keyword">done</span>    <span class="token keyword">echo</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本2】截取字符串"><a href="#【脚本2】截取字符串" class="headerlink" title="【脚本2】截取字符串"></a>【脚本2】截取字符串</h1><p>现有一个字符串如下：</p><p><a href="http://www.aaa.com/root/123.htm" target="_blank" rel="noopener">http://www.aaa.com/root/123.htm</a><br>请根据以下要求截取出字符串中的字符：</p><p>1.取出<a href="http://www.aaa.com/root/123.htm" target="_blank" rel="noopener">www.aaa.com/root/123.htm</a></p><p>2.取出123.htm</p><p>3.取出<a href="http://www.aaa.com/root" target="_blank" rel="noopener">http://www.aaa.com/root</a></p><p>4.取出http:</p><p>5.取出http://</p><p>6.取出<a href="http://www.aaa.com/root/123.htm" target="_blank" rel="noopener">www.aaa.com/root/123.htm</a></p><p>7.取出123</p><p>8.取出123.htm</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>var<span class="token operator">=</span><span class="token string">"http://www.aaa.com/root/123.htm"</span><span class="token comment" spellcheck="true">#1.</span><span class="token keyword">echo</span> <span class="token variable">$var</span> <span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">'//'</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span><span class="token comment" spellcheck="true">#2.</span><span class="token keyword">echo</span> <span class="token variable">$var</span> <span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">'/'</span> <span class="token string">'{print <span class="token variable">$5</span>}'</span><span class="token comment" spellcheck="true">#3.</span><span class="token keyword">echo</span> <span class="token variable">$var</span> <span class="token operator">|</span><span class="token function">grep</span> -o <span class="token string">'http.*root'</span><span class="token comment" spellcheck="true">#4.</span><span class="token keyword">echo</span> <span class="token variable">$var</span> <span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">'/'</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token comment" spellcheck="true">#5.</span><span class="token keyword">echo</span> <span class="token variable">$var</span> <span class="token operator">|</span><span class="token function">grep</span> -o <span class="token string">'http://'</span><span class="token comment" spellcheck="true">#6.</span><span class="token keyword">echo</span> <span class="token variable">$var</span> <span class="token operator">|</span><span class="token function">grep</span> -o <span class="token string">'www.*htm'</span><span class="token comment" spellcheck="true">#7.</span><span class="token keyword">echo</span> <span class="token variable">$var</span> <span class="token operator">|</span><span class="token function">grep</span> -o <span class="token string">'123'</span><span class="token comment" spellcheck="true">#8.</span><span class="token keyword">echo</span> <span class="token variable">$var</span> <span class="token operator">|</span><span class="token function">grep</span> -o <span class="token string">'123.htm'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本3】tomcat启动脚本"><a href="#【脚本3】tomcat启动脚本" class="headerlink" title="【脚本3】tomcat启动脚本"></a>【脚本3】tomcat启动脚本</h1><p>emm。。这个脚本是因为tomcat没有自带的能够给service开机启动的脚本，我就琢磨着自己写了一个简单的启动脚本，如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># chkconfig:2345 64 36</span><span class="token comment" spellcheck="true"># description: Tomcat start/stop/restart script.</span><span class="token comment" spellcheck="true">### BEGIN INIT INFO</span><span class="token comment" spellcheck="true"># Provides: tomcat</span><span class="token comment" spellcheck="true"># Required-Start: </span><span class="token comment" spellcheck="true"># Should-Start: </span><span class="token comment" spellcheck="true"># Required-Stop: </span><span class="token comment" spellcheck="true"># Default-Start: 2 3 4 5</span><span class="token comment" spellcheck="true"># Default-Stop: 0 1 6</span><span class="token comment" spellcheck="true"># Short-Description: start and stop Tomcat</span><span class="token comment" spellcheck="true"># Description: Tomcat Service start&amp;restart&amp;stop script</span><span class="token comment" spellcheck="true">### END INIT INFO</span><span class="token comment" spellcheck="true">##Written by zero.##</span>JAVA_HOME<span class="token operator">=</span>/usr/local/jdk1.8/JAVA_BIN<span class="token operator">=</span>/usr/local/jdk1.8/binJRE_HOME<span class="token operator">=</span>/usr/local/jdk1.8/jrePATH<span class="token operator">=</span><span class="token variable">$PATH</span>:/usr/local/jdk1.8/bin:/usr/local/jdk1.8/jre/binCLASSPATH<span class="token operator">=</span>/usr/local/jdk1.8/jre/lib:/usr/local/jdk1.8/lib:/usr/local/jdk1.8/jre/lib/charsets.jarTOMCAT_BIN<span class="token operator">=</span>/usr/local/tomcat/binRETVAL<span class="token operator">=</span>0prog<span class="token operator">=</span><span class="token string">"Tomcat"</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">"Starting <span class="token variable">$prog</span>......"</span>   /bin/bash <span class="token variable">$TOMCAT_BIN</span>/startup.sh   RETVAL<span class="token operator">=</span><span class="token variable">$?</span>   <span class="token keyword">return</span> <span class="token variable">$RETVAL</span><span class="token punctuation">}</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">"Stopping <span class="token variable">$prog</span>......"</span>   /bin/bash <span class="token variable">$TOMCAT_BIN</span>/shutdown.sh   RETVAL<span class="token operator">=</span><span class="token variable">$?</span>   <span class="token keyword">return</span> <span class="token variable">$RETVAL</span><span class="token punctuation">}</span>restart<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">"Restarting <span class="token variable">$prog</span>......"</span>   stop   start<span class="token punctuation">}</span><span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>   start<span class="token punctuation">)</span>        start        <span class="token punctuation">;</span><span class="token punctuation">;</span>   stop<span class="token punctuation">)</span>       stop       <span class="token punctuation">;</span><span class="token punctuation">;</span>   restart<span class="token punctuation">)</span>       restart       <span class="token punctuation">;</span><span class="token punctuation">;</span>   *<span class="token punctuation">)</span>       <span class="token keyword">echo</span> $<span class="token string">"Usage: <span class="token variable">$0</span> {start|stop|restart}"</span>       RETVAL<span class="token operator">=</span>1esac<span class="token keyword">exit</span> <span class="token variable">$RETVAL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本4】自定义rm命令"><a href="#【脚本4】自定义rm命令" class="headerlink" title="【脚本4】自定义rm命令"></a>【脚本4】自定义rm命令</h1><p>linux系统的rm命令太危险，一不小心就会删除掉系统文件。 写一个shell脚本来替换系统的rm命令，要求当删除一个文件或者目录时，都要做一个备份，然后再删除。下面分两种情况，做练习：</p><ol><li>简单的实现：</li></ol><p>假设有一个大的分区/data/，每次删除文件或者目录之前，都要先在/data/下面创建一个隐藏目录，以日期/时间命名，比如/data/.201703271012/，然后把所有删除的文件同步到该目录下面，可以使用rsync -R 把文件路径一同同步，示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>fileName<span class="token operator">=</span><span class="token variable">$1</span>now<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d%H%M<span class="token variable">`</span></span><span class="token function">read</span> -p <span class="token string">"Are you sure delete the file or directory <span class="token variable">$1?</span> yes|no: "</span> input<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$input</span> <span class="token operator">==</span> <span class="token string">"yes"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token variable">$input</span> <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token function">mkdir</span> /data/.<span class="token variable">$now</span>    <span class="token function">rsync</span> -aR <span class="token variable">$1</span>/ /data/.<span class="token variable">$now</span>/<span class="token variable">$1</span>/    /bin/rm -rf <span class="token variable">$1</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$input</span> <span class="token operator">==</span> <span class="token string">"no"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token variable">$input</span> <span class="token operator">==</span> <span class="token string">"n"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">exit</span> 0<span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Only input yes or no"</span>    <span class="token keyword">exit</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>复杂的实现：</li></ol><p>不知道哪个分区有剩余空间，在删除之前先计算要删除的文件或者目录大小，然后对比系统的磁盘空间，如果够则按照上面的规则创建隐藏目录，并备份，如果没有足够空间，要提醒用户没有足够的空间备份并提示是否放弃备份，如果用户输入yes，则直接删除文件或者目录，如果输入no，则提示未删除，然后退出脚本，示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>fileName<span class="token operator">=</span><span class="token variable">$1</span>now<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d%H%M<span class="token variable">`</span></span>f_size<span class="token operator">=</span>`du -sk <span class="token variable">$1</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token variable"><span class="token variable">`</span>disk_size<span class="token operator">=</span><span class="token variable">`</span></span>LANG<span class="token operator">=</span>en<span class="token punctuation">;</span> <span class="token function">df</span> -k <span class="token operator">|</span><span class="token function">grep</span> -vi filesystem <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$4</span>}'</span> <span class="token operator">|</span><span class="token function">sort</span> -n <span class="token operator">|</span><span class="token function">tail</span> -n1<span class="token variable"><span class="token variable">`</span>big_filesystem<span class="token operator">=</span><span class="token variable">`</span></span>LANG<span class="token operator">=</span>en<span class="token punctuation">;</span> <span class="token function">df</span> -k <span class="token operator">|</span><span class="token function">grep</span> -vi filesystem <span class="token operator">|</span><span class="token function">sort</span> -n -k4 <span class="token operator">|</span><span class="token function">tail</span> -n1 <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$NF</span>}'</span>`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$f_size</span> -lt <span class="token variable">$disk_size</span> <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token function">read</span> -p <span class="token string">"Are you sure delete the file or directory: <span class="token variable">$1</span> ? yes|no: "</span> input   <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$input</span> <span class="token operator">==</span> <span class="token string">"yes"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token variable">$input</span> <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token punctuation">]</span>   <span class="token keyword">then</span>      <span class="token function">mkdir</span> -p <span class="token variable">$big_filesystem</span>/.<span class="token variable">$now</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rsync</span> -aR <span class="token variable">$1</span> <span class="token variable">$big_filesystem</span>/.<span class="token variable">$now</span>/ <span class="token operator">&amp;&amp;</span> /bin/rm -rf <span class="token variable">$1</span>   <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$input</span> <span class="token operator">==</span> <span class="token string">"no"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token variable">$input</span> <span class="token operator">==</span> <span class="token string">"n"</span> <span class="token punctuation">]</span>   <span class="token keyword">then</span>      <span class="token keyword">exit</span> 0   <span class="token keyword">else</span>      <span class="token keyword">echo</span> <span class="token string">"Only input 'yes' or 'no'."</span>   <span class="token keyword">fi</span><span class="token keyword">else</span>   <span class="token keyword">echo</span> <span class="token string">"The disk size is not enough to backup the file: <span class="token variable">$1</span>."</span>   <span class="token function">read</span> -p <span class="token string">"Do you want to delete "</span><span class="token variable">$1</span><span class="token string">"? yes|no: "</span> input   <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$input</span> <span class="token operator">==</span> <span class="token string">"yes"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token variable">$input</span> <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token punctuation">]</span>   <span class="token keyword">then</span>       <span class="token keyword">echo</span> <span class="token string">"It will delete "</span><span class="token variable">$1</span><span class="token string">" after 5 seconds whitout backup."</span>       <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 5<span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token keyword">echo</span> -ne <span class="token string">"."</span><span class="token punctuation">;</span> <span class="token function">sleep</span> 1<span class="token punctuation">;</span> <span class="token keyword">done</span>     <span class="token keyword">echo</span>       /bin/rm -rf <span class="token variable">$1</span>   <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$input</span> <span class="token operator">==</span> <span class="token string">"no"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token variable">$input</span> <span class="token operator">==</span> <span class="token string">"n"</span> <span class="token punctuation">]</span>   <span class="token keyword">then</span>       <span class="token keyword">echo</span> <span class="token string">"It will not delete <span class="token variable">$1</span>."</span>       <span class="token keyword">exit</span> 0   <span class="token keyword">else</span>       <span class="token keyword">echo</span> <span class="token string">"Only input 'yes' or 'no'."</span>   <span class="token keyword">fi</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本5】数字求和"><a href="#【脚本5】数字求和" class="headerlink" title="【脚本5】数字求和"></a>【脚本5】数字求和</h1><p>编写shell脚本，要求输入一个数字，然后计算出从1到输入数字的和，要求，如果输入的数字小于1，则重新输入，直到输入正确的数字为止，示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">while</span> <span class="token keyword">:</span><span class="token keyword">do</span>   <span class="token function">read</span> -p <span class="token string">"Please enter a positive integer: "</span> n   <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$n</span> -lt 1 <span class="token punctuation">]</span>   <span class="token keyword">then</span>      <span class="token keyword">echo</span> <span class="token string">"It can't be less than 1"</span>   <span class="token keyword">else</span>      <span class="token keyword">break</span>   <span class="token keyword">fi</span><span class="token keyword">done</span>num<span class="token operator">=</span>1<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 2 $n<span class="token variable">`</span></span><span class="token keyword">do</span>   num<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$num</span>+<span class="token variable">$i</span><span class="token punctuation">]</span><span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token variable">$num</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本6】拷贝目录"><a href="#【脚本6】拷贝目录" class="headerlink" title="【脚本6】拷贝目录"></a>【脚本6】拷贝目录</h1><p>编写shell脚本，把/root/目录下的所有目录（只需要一级）拷贝到/tmp/目录下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">cd</span> /root/list<span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span><span class="token variable">`</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">${list[@]}</span><span class="token keyword">do</span>   <span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token variable">$i</span> <span class="token punctuation">]</span>   <span class="token keyword">then</span>       <span class="token function">cp</span> -r <span class="token variable">$i</span> /tmp/   <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本7】批量建立用户"><a href="#【脚本7】批量建立用户" class="headerlink" title="【脚本7】批量建立用户"></a>【脚本7】批量建立用户</h1><p>编写shell脚本，批量建立用户user_00, user_01, … user_100并且所有用户同属于users组：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>group<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /etc/group <span class="token operator">|</span><span class="token function">grep</span> -o <span class="token function">users</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$group</span> <span class="token operator">==</span> <span class="token string">"users"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 0 100<span class="token variable">`</span></span>    <span class="token keyword">do</span>      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -lt 10 <span class="token punctuation">]</span>      <span class="token keyword">then</span>          <span class="token function">useradd</span> -g <span class="token function">users</span> user_0<span class="token variable">$i</span>      <span class="token keyword">else</span>          <span class="token function">useradd</span> -g <span class="token function">users</span> user_<span class="token variable">$i</span>      <span class="token keyword">fi</span>    <span class="token keyword">done</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"users group not found!"</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除以上脚本批量添加的用户：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 0 100<span class="token variable">`</span></span><span class="token keyword">do</span>   <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -lt 10 <span class="token punctuation">]</span>   <span class="token keyword">then</span>       <span class="token function">userdel</span> -r user_0<span class="token variable">$i</span>   <span class="token keyword">else</span>       <span class="token function">userdel</span> -r user_<span class="token variable">$i</span>   <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本8】每日生成一个文件"><a href="#【脚本8】每日生成一个文件" class="headerlink" title="【脚本8】每日生成一个文件"></a>【脚本8】每日生成一个文件</h1><p>要求：请按照这样的日期格式（xxxx-xx-xx）每日生成一个文件，例如今天生成的文件为）2017-07-05.log， 并且把磁盘的使用情况写到到这个文件中，（不用考虑cron，仅仅写脚本即可）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>fileName<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%F<span class="token variable">`</span></span>c<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">df</span> -h<span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$c</span>"</span> <span class="token operator">></span> /root/<span class="token variable">$fileName</span>.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【脚本9】统计ip"><a href="#【脚本9】统计ip" class="headerlink" title="【脚本9】统计ip"></a>【脚本9】统计ip</h1><p>有一个日志文件，日志片段：如下：</p><p>112.111.12.248 – [25/Sep/2013:16:08:31 +0800]formula-x.haotui.com “/seccode.php?update=0.5593110133088248″ 200″<a href="http://formula-x.haotui.com/registerbbs.php”" target="_blank" rel="noopener">http://formula-x.haotui.com/registerbbs.php”</a> “Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1;)”<br>61.147.76.51 – [25/Sep/2013:16:08:31 +0800]xyzdiy.5d6d.com “/attachment.php?aid=4554&amp;k=9ce51e2c376bc861603c7689d97c04a1&amp;t=1334564048&amp;fid=9&amp;sid=zgohwYoLZq2qPW233ZIRsJiUeu22XqE8f49jY9mouRSoE71″ 301″<a href="http://xyzdiy.×××thread-1435-1-23.html”" target="_blank" rel="noopener">http://xyzdiy.×××thread-1435-1-23.html”</a> “Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)”<br>要求： 统计出每个IP的访问量有多少？</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span> 1.log <span class="token operator">|</span><span class="token function">sort</span> -n <span class="token operator">|</span><span class="token function">uniq</span> -c <span class="token operator">|</span><span class="token function">sort</span> -n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解释：sort -n会按照数值而不是ASCII码来排序awk截取出来的IP。然后uniq命令用于报告或忽略文件中的重复行，加上-c选项后会在每列旁边显示该行重复出现的次数，在这一步就完成了统计。不过最后还得再让sort -n排序一下uniq -c统计出来的结果。</p><h1 id="【脚本10】统计内存使用"><a href="#【脚本10】统计内存使用" class="headerlink" title="【脚本10】统计内存使用"></a>【脚本10】统计内存使用</h1><p>写一个脚本计算一下linux系统所有进程占用内存大小的和。</p><ul><li>实现代码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>count<span class="token operator">=</span>0<span class="token comment" spellcheck="true"># 这个循环会遍历出每个进程占用的内存大小</span><span class="token keyword">for</span> i <span class="token keyword">in</span> `ps aux <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$6</span>}'</span> <span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">'RSS'</span>`<span class="token keyword">do</span>   <span class="token comment" spellcheck="true"># 将遍历出来的数字进行累加</span>   count<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$count</span>+<span class="token variable">$i</span><span class="token punctuation">]</span><span class="token keyword">done</span><span class="token comment" spellcheck="true"># 就得到所有进程占用内存大小的和了</span><span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$count</span>/kb"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用awk 一条命令计算：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">'RSS TTY'</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{sum=sum+<span class="token variable">$6</span>};END{print sum}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解释：grep -v是忽略 ‘RSS TTY’ 所存在的那一行，后面的awk声明了一个变量sum，sum将前面命令列出来的数字进行累加，END之后就将累加后的sum打印出来，就得到所有进程占用内存大小的和了。</p><h1 id="【脚本11】简单的监控脚本"><a href="#【脚本11】简单的监控脚本" class="headerlink" title="【脚本11】简单的监控脚本"></a>【脚本11】简单的监控脚本</h1><p>设计一个简单的脚本，监控远程的一台机器(假设ip为123.23.11.21)的存活状态，当发现宕机时发一封邮件给你自己。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>ip<span class="token operator">=</span><span class="token string">"123.23.11.21"</span>email<span class="token operator">=</span><span class="token string">"user@example"</span><span class="token keyword">while</span> 1<span class="token keyword">do</span>  <span class="token function">ping</span> -c10 <span class="token variable">$ip</span> <span class="token operator">></span> /dev/null 2<span class="token operator">></span>/dev/null  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span>  <span class="token keyword">then</span>       <span class="token comment" spellcheck="true"># 调用一个用于发邮件的脚本</span>     python /usr/local/sbin/mail.py <span class="token variable">$email</span> <span class="token string">"<span class="token variable">$ip</span> down"</span> <span class="token string">"<span class="token variable">$ip</span> is down"</span>  <span class="token keyword">fi</span>  <span class="token function">sleep</span> 30<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mail.py 脚本代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#-*- coding: UTF-8 -*-</span><span class="token keyword">import</span> os<span class="token punctuation">,</span>sysreload<span class="token punctuation">(</span>sys<span class="token punctuation">)</span>sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token keyword">import</span> getopt<span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>MIMEText <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>MIMEMultipart <span class="token keyword">import</span> MIMEMultipart<span class="token keyword">from</span>  subprocess <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">sendqqmail</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>mailfrom<span class="token punctuation">,</span>mailto<span class="token punctuation">,</span>subject<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 邮箱的服务地址</span>    gserver <span class="token operator">=</span> <span class="token string">'smtp.qq.com'</span>    gport <span class="token operator">=</span> <span class="token number">25</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        msg <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>unicode<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        msg<span class="token punctuation">[</span><span class="token string">'from'</span><span class="token punctuation">]</span> <span class="token operator">=</span> mailfrom        msg<span class="token punctuation">[</span><span class="token string">'to'</span><span class="token punctuation">]</span> <span class="token operator">=</span> mailto        msg<span class="token punctuation">[</span><span class="token string">'Reply-To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> mailfrom        msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subject        smtp <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span>gserver<span class="token punctuation">,</span> gport<span class="token punctuation">)</span>        smtp<span class="token punctuation">.</span>set_debuglevel<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        smtp<span class="token punctuation">.</span>ehlo<span class="token punctuation">(</span><span class="token punctuation">)</span>        smtp<span class="token punctuation">.</span>login<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span>        smtp<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>mailfrom<span class="token punctuation">,</span> mailto<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        smtp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span>err<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Send mail failed. Error: %s"</span> <span class="token operator">%</span> err<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    to<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    subject<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    content<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#定义QQ邮箱的账号和密码，你需要修改成你自己的账号和密码</span>    sendqqmail<span class="token punctuation">(</span><span class="token string">'1234567@qq.com'</span><span class="token punctuation">,</span><span class="token string">'aaaaaaaaaa'</span><span class="token punctuation">,</span><span class="token string">'1234567@qq.com'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span>subject<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#####脚本使用说明######</span><span class="token comment" spellcheck="true">#1\. 首先定义好脚本中的邮箱账号和密码</span><span class="token comment" spellcheck="true">#2\. 脚本执行命令为：python mail.py 目标邮箱 "邮件主题" "邮件内容"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 定义全局变量</title>
      <link href="/python-ding-yi-quan-ju-bian-liang/"/>
      <url>/python-ding-yi-quan-ju-bian-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="根据global定义全局变量"><a href="#根据global定义全局变量" class="headerlink" title="根据global定义全局变量"></a><font color="blue">根据global定义全局变量</font></h1><ul><li><font color="orange">示例</font></li></ul><p>中利用global定义全局变量(<font color="red">accessKey、accessSecret、region</font>)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#libs/base.py</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> importlib<span class="token keyword">import</span> configparser<span class="token keyword">import</span> sys<span class="token comment" spellcheck="true">#importlib.reload(sys)</span><span class="token comment" spellcheck="true">#利用configparser读取ini文件内容</span>config <span class="token operator">=</span> configparser<span class="token punctuation">.</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#注：这个conf/路径不要写错</span>config<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">"conf/acskey.ini"</span><span class="token punctuation">)</span><span class="token keyword">global</span> region<span class="token punctuation">,</span> accessKey<span class="token punctuation">,</span> accessSecretaccessKey <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"aliyunAK"</span><span class="token punctuation">,</span> <span class="token string">"accessKey"</span><span class="token punctuation">)</span>accessSecret <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"aliyunAK"</span><span class="token punctuation">,</span> <span class="token string">"accessSecret"</span><span class="token punctuation">)</span>region <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"aliyunAK"</span><span class="token punctuation">,</span> <span class="token string">"region"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><font color="orange">引用</font></li></ul><p><font color="red">注意：全局变量引用请使用如下方式</font></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#声明全局变量的模块</span><span class="token keyword">from</span> libs<span class="token punctuation">.</span>base <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font color="red">根据上面设置完成，程序直接引用<strong><em>变量名</em></strong>即可</font></p><h1 id="根据设置函数，并调用函数中的字典"><a href="#根据设置函数，并调用函数中的字典" class="headerlink" title="根据设置函数，并调用函数中的字典"></a><font color="blue">根据设置函数，并调用函数中的字典</font></h1><ul><li><font color="orange">示例</font></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#libs/acskey.py</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> importlib<span class="token keyword">import</span> configparser<span class="token keyword">import</span> sysimportlib<span class="token punctuation">.</span>reload<span class="token punctuation">(</span>sys<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定义函数</span><span class="token keyword">def</span> <span class="token function">mydict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">##读取ini文件内容</span>    <span class="token comment" spellcheck="true">#首先先定义一个空字典</span>    my_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    config <span class="token operator">=</span> configparser<span class="token punctuation">.</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">"conf/acskey.ini"</span><span class="token punctuation">)</span>    accessKey <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"aliyunAK"</span><span class="token punctuation">,</span> <span class="token string">"accessKey"</span><span class="token punctuation">)</span>    accessSecret <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"aliyunAK"</span><span class="token punctuation">,</span> <span class="token string">"accessSecret"</span><span class="token punctuation">)</span>    region <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"aliyunAK"</span><span class="token punctuation">,</span> <span class="token string">"region"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#将key.value写入到字典中</span>    my_dict<span class="token punctuation">[</span><span class="token string">'accessKey'</span><span class="token punctuation">]</span> <span class="token operator">=</span> accessKey    my_dict<span class="token punctuation">[</span><span class="token string">'accessSecret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> accessSecret    my_dict<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span> <span class="token operator">=</span> region    <span class="token keyword">return</span> my_dict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><font color="orange">引用</font></li></ul><ol><li>首先声明模块</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#声明模块</span><span class="token keyword">from</span> libs<span class="token punctuation">.</span>acskey <span class="token keyword">import</span> mydict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>引用mydict中的字典，并取值</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#将mydict字典赋值给mykey</span>mykey <span class="token operator">=</span> mydict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#取字典中的值(accesskey, accessSecret, region)</span>accessKey <span class="token operator">=</span> mykey<span class="token punctuation">[</span><span class="token string">'accessKey'</span><span class="token punctuation">]</span> accessSecret <span class="token operator">=</span> mykey<span class="token punctuation">[</span><span class="token string">'accessSecret'</span><span class="token punctuation">]</span>region <span class="token operator">=</span> mykey<span class="token punctuation">[</span><span class="token string">'region'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3中Dictionary(字典)操作详解</title>
      <link href="/python3-zhong-dictionary-zi-dian-cao-zuo-xiang-jie/"/>
      <url>/python3-zhong-dictionary-zi-dian-cao-zuo-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>在绝大部分的开发语言中与实际开发过程中，Dictionary扮演着举足轻重的角色。从我们的数据模型到服务器返回的参数到数据库的应用等等，Dictionary的身影无处不在。那么，在Python中，Dictionary是一个怎么样的数据类型呢？</p><p>在Python中，Dictionary是一种可变的容器类型。所谓容器类型，就是我们放置数据的地方。不同于List的有序、操作时对数据类型统一性的要求较严格，Dictionary是一种可变的、不限存储对象、无序的数据模型。</p><p>在Dictionary的数据模型中，主要是以Key（键）和Value（值）的组合来储存数据的。Key与Value一一对应，且Key不可重复。我们可以用字符串、数字、元组等类型来充当Key（这单较之其他语言如OC，增加了许多可拓展性），可以以任意的对象来充当Value的角色。 那么Dictionary，是如何创建的呢？</p><ul><li><strong>Dictionary的创建</strong></li></ul><p>创建一个Dictionary，我们主要可以用以下几种方法：</p><ul><li><strong>直接按照数据格式</strong></li></ul><pre class="line-numbers language-python"><code class="language-python">my_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'drink'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'location'</span><span class="token punctuation">:</span><span class="token string">'厦门'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Dictionary是以大括号{}括起来、里边填充键值对群、键值对中以”:“分格、键在前值在后、键值对以逗号分格的一种数据类型。所以当我们在写一些静态常用的Dictionary的时候，常常可以直接按照数据格式的方式来创造。</p><ul><li><strong>通过动态值来创建Dictionary</strong></li></ul><pre class="line-numbers language-python"><code class="language-python">my_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>name <span class="token operator">=</span> <span class="token string">'drink'</span>age <span class="token operator">=</span> <span class="token number">28</span>location <span class="token operator">=</span> <span class="token string">'厦门'</span>my_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> namemy_dict<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> agemy_dict<span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span> <span class="token operator">=</span> location<span class="token comment" spellcheck="true"># my_dict = {'name':'drink', 'age':28, 'location':'厦门'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以通过先创建一个空Dictionary，然后往后面一一填入我们需要的数据的方式来动态创建。这种创建方式，常常会用在一些我们事先并不知道返回结果的场景中，如服务器返回数据。当我们获得这些返回结果的时候，再一一向Dictionary中添加既可以。</p><ul><li><strong>通过系统的dict()方法</strong></li></ul><pre class="line-numbers language-python"><code class="language-python">my_dict  <span class="token operator">=</span> dict<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'drink'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">,</span> location <span class="token operator">=</span> <span class="token string">'Xiamen'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># my_dict = {'name':'drink', 'age':28, 'location':'厦门'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>dict()这个方法是一个动态参数的方法，意思是它不会去限制我们传入的限制类型和个数，然后会以变量名去充当键值对中的键，以变量的值去充当键值对中的值。这种方法创建Dictionary语法简单而且简洁明了、不易出错。</p><p>注意：使用这个方法的时候，键必须都是字符串才行，否则系统抛异常。</p><ul><li><strong>通过键值元素表</strong></li></ul><pre class="line-numbers language-python"><code class="language-python">my_dict <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">''</span>name<span class="token string">', '</span>drink<span class="token string">'), ('</span>age<span class="token string">', 28), ('</span>location<span class="token string">', '</span>厦门'<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># my_dict = {'name':'drink', 'age':28, 'location':'厦门'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种方法，是往dict()方法中，传入一个List类型数据，List类型数据的元素都是由包含两个元素的元组来组成。系统会取List中每个元组来生成一个键值对，以元组的第一个元素来充当Dictionary的键，第二个元素来充当Dictionary的值。</p><ul><li><strong>通过赋予默认值</strong></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdictmy_dict <span class="token operator">=</span> defaultdict<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span><span class="token string">'dafault_value'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 'nothing'</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># defaultdict(&lt;function __main__.&lt;lambda>()>, {'name': 'nothing'})</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过赋予默认值的方法来创建的话，首先要为工程导入collections库中的defaultdict文件。然后在初始化Dictionary的时候，就对字典设置默认值。这样当添加的键值对中，没有被赋予值的话，就会被赋予默认值。</p><ul><li><strong>通过Key获取Value</strong></li></ul><pre class="line-numbers language-python"><code class="language-python">my_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'drink'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'location'</span><span class="token punctuation">:</span><span class="token string">'厦门'</span><span class="token punctuation">}</span>my_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>          <span class="token comment" spellcheck="true"># drink</span>my_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 28</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Dictionary取值主要用两种方法，第一种是直接在Dictionary名后加[]，并在[]中填入要查询的Key；第二种是使用.get()方法获取，传的参数就是所要查询的key</p><ul><li><strong>修改Dictionary里的值</strong></li></ul><pre class="line-numbers language-python"><code class="language-python">my_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'drink'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'location'</span><span class="token punctuation">:</span><span class="token string">'厦门'</span><span class="token punctuation">}</span>my_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'louis'</span>    <span class="token comment" spellcheck="true"># my_dict = {'name':'louis', 'age':28, 'location':'厦门'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改Dictionary中值的方法，其实和上述创建Dictionary的第二种方法一样（严格来说，是向Dictionary中添加值的方法）。直接在Dictionary变量名后添加[]，并在[]中填入要修改的值。当值存在的时候，就会修改成要修改的值。当值不存在的时候，就会向Dictionary中添加一堆新的键值对。</p><ul><li><strong>删除Dictionary里的值</strong></li></ul><pre class="line-numbers language-python"><code class="language-python">my_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'drink'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'location'</span><span class="token punctuation">:</span><span class="token string">'厦门'</span><span class="token punctuation">}</span><span class="token keyword">del</span> my_dict<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># my_dict = {'name':'drink', 'location':'厦门'}</span>my_dict<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 清空Dictionary内所有键值对</span><span class="token keyword">del</span> my_dict        <span class="token comment" spellcheck="true"># 删除Dictionary变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除Dictionary值的时候，只需要在变量名前加上del命令，然后再变量后添加[]，并在[]中填入所要删除键值对的Key即可。</p><p>如果在变量名前添加del命令，但是没有传参数也没有()的话，会将Dictionary变量直接删除，整个Dictionary都将不再存在。</p><p>当要清空Dictionary中的所有键值对的时候，可以使用clear方法。在变量名后调用clear方法，会将Dictionary中的所有键值对清除。</p><p><font color="red">Dictionary的注意事项</font></p><p>不允许同一个键出现两次。如果对同一个键添加多次的话，Dictionary中只会保留一个键，并保留最后一次添加的值<br>键必须是不可变的，所以可以用所有的不可变数据类型充当键，如：Nunber、String、Tuple。不能使用List、Set、Dictionary当键，因为他们是可变数据类型<br>Dictionary内置函数与方法</p><ul><li><strong>内置函数</strong></li></ul><pre class="line-numbers language-python"><code class="language-python">cmp<span class="token punctuation">(</span>dict1<span class="token punctuation">,</span> dict2<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#比较两个字典元素。</span>len<span class="token punctuation">(</span>dict<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#计算字典元素个数，即键的总数。</span>str<span class="token punctuation">(</span>dict<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#输出字典可打印的字符串表示。</span>type<span class="token punctuation">(</span>variable<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#返回输入的变量类型，如果变量是字典就返回字典类型。 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>内置方法</strong></li></ul><pre class="line-numbers language-python"><code class="language-python">dict<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 返回一个字典的浅复制</span>dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># 创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</span>dict<span class="token punctuation">.</span>has_key<span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># 如果键在字典dict里返回true，否则返回false</span>dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># 以列表返回可遍历的(键, 值) 元组数组</span>dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 以列表返回一个字典所有的键</span>dict<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>key<span class="token punctuation">,</span> defalut <span class="token operator">=</span> None<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 和get()类似, 但如果键不已经存在于字典中，将会添加键并将值设为default</span>dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dict2<span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># 把字典dict2的键值对更新到dict里</span>dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true"># 以列表返回字典中的所有值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用阿里云SDK查看ecs列表</title>
      <link href="/shi-yong-a-li-yun-sdk-cha-kan-ecs-lie-biao/"/>
      <url>/shi-yong-a-li-yun-sdk-cha-kan-ecs-lie-biao/</url>
      
        <content type="html"><![CDATA[<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a><font color="red">目录结构</font></h3><pre class="line-numbers language-txt"><code class="language-txt">    ├── conf   #定义基础配置中心    │   ├── acskey.ini    │   └── mail.ini    ├── ecs2xls.py    ├── ecsList.py    └── libs   #定义公共中心        ├── __init__.py        └── base.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><font color="orange">acskey.ini</font>将阿里云用户的AK根据ini文件中***进行替换</li></ol><pre class="line-numbers language-txt"><code class="language-txt">[aliyunAK]accessKey=******accessSecret=*****region=*****<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><font color="orange">base.py</font>中利用global定义全局变量(<font color="red">accessKey、accessSecret、region</font>)</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> importlib<span class="token keyword">import</span> configparser<span class="token keyword">import</span> sys<span class="token comment" spellcheck="true">#importlib.reload(sys)</span><span class="token comment" spellcheck="true">#利用configparser读取ini文件内容</span>config <span class="token operator">=</span> configparser<span class="token punctuation">.</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#注：这个conf/路径不要写错</span>config<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">"conf/acskey.ini"</span><span class="token punctuation">)</span><span class="token keyword">global</span> region<span class="token punctuation">,</span> accessKey<span class="token punctuation">,</span> accessSecretaccessKey <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"aliyunAK"</span><span class="token punctuation">,</span> <span class="token string">"accessKey"</span><span class="token punctuation">)</span>accessSecret <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"aliyunAK"</span><span class="token punctuation">,</span> <span class="token string">"accessSecret"</span><span class="token punctuation">)</span>region <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"aliyunAK"</span><span class="token punctuation">,</span> <span class="token string">"region"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><font color="orange">libs/<strong>init</strong>.py</font>中，定义跨路径模块调用的路径</li></ol><pre class="line-numbers language-python"><code class="language-python">__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'base'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="red">注意：全局变量引用请使用如下方式</font></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#声明全局变量的模块</span><span class="token keyword">from</span> libs<span class="token punctuation">.</span>base <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font color="red">根据上面设置完成，程序直接引用<strong><em>变量名</em></strong>即可</font></p><hr><h1 id="通过阿里云SDK获取ECS列表"><a href="#通过阿里云SDK获取ECS列表" class="headerlink" title="通过阿里云SDK获取ECS列表"></a><font color="blue">通过阿里云SDK获取ECS列表</font></h1><p><font color="red">注意：具体参数请查看阿里云SDK<br>连接地址：<a href="https://help.aliyun.com/document_detail/25506.html?spm=a2c4g.11186623.2.16.6b2815304wYt7L#doc-api-Ecs-DescribeInstances" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/25506.html?spm=a2c4g.11186623.2.16.6b2815304wYt7L#doc-api-Ecs-DescribeInstances</a></font></p><ul><li>编辑Python脚本文件：ecsList.py</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> json<span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>client <span class="token keyword">import</span> AcsClient<span class="token keyword">from</span> aliyunsdkcore<span class="token punctuation">.</span>acs_exception<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ClientException<span class="token keyword">from</span> aliyunsdkecs<span class="token punctuation">.</span>request<span class="token punctuation">.</span>v20140526 <span class="token keyword">import</span> DescribeInstancesRequest<span class="token keyword">from</span> aliyunsdkecs<span class="token punctuation">.</span>request<span class="token punctuation">.</span>v20140526 <span class="token keyword">import</span> StopInstanceRequest<span class="token keyword">import</span> datetime<span class="token keyword">from</span> prettytable <span class="token keyword">import</span> PrettyTable<span class="token keyword">from</span> libs<span class="token punctuation">.</span>base <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#定义标题</span>title_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"实例名称"</span><span class="token punctuation">,</span><span class="token string">"操作系统"</span><span class="token punctuation">,</span><span class="token string">"vpc私网IP"</span><span class="token punctuation">,</span><span class="token string">"外网IP"</span><span class="token punctuation">,</span><span class="token string">"内网IP"</span><span class="token punctuation">,</span><span class="token string">"cpu核数"</span><span class="token punctuation">,</span><span class="token string">"内存(GB)"</span><span class="token punctuation">,</span><span class="token string">"状态"</span><span class="token punctuation">,</span><span class="token string">"付费方式"</span><span class="token punctuation">,</span><span class="token string">"创建时间"</span><span class="token punctuation">,</span><span class="token string">"到期时间"</span><span class="token punctuation">]</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">utc2local</span><span class="token punctuation">(</span>utctime<span class="token punctuation">)</span><span class="token punctuation">:</span>    dt <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>utctime<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%dT%H:%MZ"</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dtclt <span class="token operator">=</span> AcsClient<span class="token punctuation">(</span>accessKey<span class="token punctuation">,</span>accessSecret<span class="token punctuation">,</span>region<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>region<span class="token punctuation">,</span> accessKey<span class="token punctuation">,</span> accessSecret<span class="token punctuation">)</span>pt <span class="token operator">=</span> PrettyTable<span class="token punctuation">(</span>title_list<span class="token punctuation">)</span>pt<span class="token punctuation">.</span>align<span class="token punctuation">[</span><span class="token string">"实例ID"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"l"</span>pt<span class="token punctuation">.</span>padding_width <span class="token operator">=</span> <span class="token number">2</span>request <span class="token operator">=</span> DescribeInstancesRequest<span class="token punctuation">.</span>DescribeInstancesRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>set_accept_format<span class="token punctuation">(</span><span class="token string">'json'</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>set_PageSize<span class="token punctuation">(</span><span class="token string">'100'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> clt<span class="token punctuation">.</span>do_action_with_exception<span class="token punctuation">(</span>request<span class="token punctuation">)</span>ecsinfo <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>ecslist <span class="token operator">=</span> ecsinfo<span class="token punctuation">[</span><span class="token string">'Instances'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Instance'</span><span class="token punctuation">]</span><span class="token keyword">for</span> instance <span class="token keyword">in</span> ecslist<span class="token punctuation">:</span>    instancename <span class="token operator">=</span> instance<span class="token punctuation">[</span><span class="token string">'InstanceName'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 服务器主机名</span>    osname <span class="token operator">=</span> instance<span class="token punctuation">[</span><span class="token string">'OSName'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 系统名称</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        final_priip <span class="token operator">=</span> <span class="token string">""</span>        priip <span class="token operator">=</span> instance<span class="token punctuation">[</span><span class="token string">'VpcAttributes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'PrivateIpAddress'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'IpAddress'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 定义vpc、IP</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>priip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                final_priip <span class="token operator">=</span> priip<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                final_priip <span class="token operator">=</span> final_priip <span class="token operator">+</span> <span class="token string">" , "</span> <span class="token operator">+</span> priip<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        final_priip <span class="token operator">=</span> <span class="token string">"None"</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        final_pubip <span class="token operator">=</span> <span class="token string">""</span>        pubip <span class="token operator">=</span> instance<span class="token punctuation">[</span><span class="token string">'PublicIpAddress'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'IpAddress'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>pubip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                final_pubip <span class="token operator">=</span> str<span class="token punctuation">(</span>pubip<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                final_pubip <span class="token operator">=</span> final_pubip <span class="token operator">+</span> <span class="token string">" , "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>pubip<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        final_pubip <span class="token operator">=</span> <span class="token string">"None"</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        final_innerip <span class="token operator">=</span> <span class="token string">""</span>        innerip <span class="token operator">=</span> instance<span class="token punctuation">[</span><span class="token string">'InnerIpAddress'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'IpAddress'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>innerip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                final_innerip <span class="token operator">=</span> str<span class="token punctuation">(</span>innerip<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                final_innerip <span class="token operator">=</span> final_innerip <span class="token operator">+</span> <span class="token string">" , "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>innerip<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        final_innerip <span class="token operator">=</span> <span class="token string">"None"</span>    cpu <span class="token operator">=</span> instance<span class="token punctuation">[</span><span class="token string">'Cpu'</span><span class="token punctuation">]</span>    mem <span class="token operator">=</span> instance<span class="token punctuation">[</span><span class="token string">'Memory'</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1024</span>    status <span class="token operator">=</span> instance<span class="token punctuation">[</span><span class="token string">'Status'</span><span class="token punctuation">]</span>    instancechargetype <span class="token operator">=</span> instance<span class="token punctuation">[</span><span class="token string">'InstanceChargeType'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> instancechargetype <span class="token operator">==</span> <span class="token string">'PrePaid'</span><span class="token punctuation">:</span>        instancechargetype <span class="token operator">=</span> <span class="token string">'预付费'</span>    <span class="token keyword">elif</span> instancechargetype <span class="token operator">==</span> <span class="token string">'PostPaid'</span><span class="token punctuation">:</span>        instancechargetype <span class="token operator">=</span> <span class="token string">'后付费'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        instancechargetype <span class="token operator">=</span> <span class="token string">'None'</span>    createtime <span class="token operator">=</span> instance<span class="token punctuation">[</span><span class="token string">'CreationTime'</span><span class="token punctuation">]</span>    expiredtime <span class="token operator">=</span> instance<span class="token punctuation">[</span><span class="token string">'ExpiredTime'</span><span class="token punctuation">]</span>    pt<span class="token punctuation">.</span>add_row<span class="token punctuation">(</span><span class="token punctuation">[</span>instancename<span class="token punctuation">,</span> osname<span class="token punctuation">,</span> final_priip<span class="token punctuation">,</span> final_pubip<span class="token punctuation">,</span> final_innerip<span class="token punctuation">,</span> cpu<span class="token punctuation">,</span> mem<span class="token punctuation">,</span> status<span class="token punctuation">,</span> instancechargetype<span class="token punctuation">,</span>                utc2local<span class="token punctuation">(</span>createtime<span class="token punctuation">)</span><span class="token punctuation">,</span> utc2local<span class="token punctuation">(</span>expiredtime<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    data_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>instancename<span class="token punctuation">,</span> osname<span class="token punctuation">,</span> final_priip<span class="token punctuation">,</span> final_pubip<span class="token punctuation">,</span> final_innerip<span class="token punctuation">,</span> cpu<span class="token punctuation">,</span> mem<span class="token punctuation">,</span> status<span class="token punctuation">,</span>                       instancechargetype<span class="token punctuation">,</span> str<span class="token punctuation">(</span>utc2local<span class="token punctuation">(</span>createtime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>utc2local<span class="token punctuation">(</span>expiredtime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行</li></ul><pre class="line-numbers language-bash"><code class="language-bash">python3 ecsList.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>结果演示</li></ul><img src="img/1.png">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 kubeadm 安装 kubernetes v1.15.3</title>
      <link href="/shi-yong-kubeadm-an-zhuang-kubernetes-v1-15-3/"/>
      <url>/shi-yong-kubeadm-an-zhuang-kubernetes-v1-15-3/</url>
      
        <content type="html"><![CDATA[<h1 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h1><hr><p>对于 Kubernetes 初学者，推荐在阿里云采购如下配置：（您也可以使用自己的虚拟机、私有云等您最容易获得的 Linux 环境） </p><ol><li><p>3台 2核4G 的ECS（突发性能实例 t5 ecs.t5-c1m2.large或同等配置，单台约 0.4元/小时，停机时不收费）</p></li><li><p>Cent OS 7.6安装后的软件版本为</p><ol><li>Kubernetes v1.15.3</li><li>calico 3.8.2</li><li>nginx-ingress 1.5.3</li><li>Docker 18.09.7</li></ol></li></ol><p>如果要安装 Kubernetes 历史版本，请参考：</p><blockquote><p><a href="https://kuboard.cn/install/history-k8s/install-k8s-1.15.2.html" target="_blank" rel="noopener">安装 Kubernetes v1.15.2 单Master节点</a></p></blockquote><blockquote><p><a href="https://kuboard.cn/install/history-k8s/install-k8s-1.15.1.html" target="_blank" rel="noopener">安装 Kubernetes v1.15.1 单Master节点</a></p></blockquote><p>安装后的拓扑图如下：下载拓扑图源文件 使用Axure RP 9.0可打开该文件</p><p><img src="https://kuboard.cn/assets/img/image-20190826000521999.4e674425.png" alt="拓扑图"></p><h2 id="关于二进制安装"><a href="#关于二进制安装" class="headerlink" title="关于二进制安装"></a>关于二进制安装</h2><blockquote><p>网上一直流传着一种 “二进制” 安装 Kubernetes 的方法，查了许久，未曾在 kubernetes.io 官方网站上看到任何关于此安装方法的介绍，也并没有看到任何关于 “二进制” 安装的优势，唯一的解释是：</p></blockquote><blockquote><p>由于众所周知的原因，在国内无法直接访问Google的服务。二进制包由于其下载方便、灵活定制而深受广大kubernetes使用者喜爱，成为企业部署生产环境比较流行的方式之一<br>鉴于目前已经有比较方便的办法获得 kubernetes 镜像，我将回避 二进制 安装是否更好的争论。本文采用 kubernetes.io 官方推荐的 kubeadm 工具安装 kubernetes 集群。</p></blockquote><h1 id="检查-centos-hostname"><a href="#检查-centos-hostname" class="headerlink" title="检查 centos / hostname"></a>检查 centos / hostname</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在 master 节点和 worker 节点都要执行</span><span class="token function">cat</span> /etc/redhat-release<span class="token comment" spellcheck="true"># 此处 hostname 的输出将会是该机器在 Kubernetes 集群中的节点名字</span><span class="token comment" spellcheck="true"># 不能使用 localhost 作为节点的名字</span><span class="token function">hostname</span><span class="token comment" spellcheck="true"># 请使用 lscpu 命令，核对 CPU 信息</span><span class="token comment" spellcheck="true"># Architecture: x86_64    本安装文档不支持 arm 架构</span><span class="token comment" spellcheck="true"># CPU(s):       2         CPU 内核数量不能低于 2</span>lscpu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="安装-docker-kubelet"><a href="#安装-docker-kubelet" class="headerlink" title="安装 docker / kubelet"></a>安装 docker / kubelet</h1><p>使用 <font color="red">root</font> 身份在所有节点执行如下代码，以安装软件：</p><ul><li>docker</li><li>nfs-utils</li><li>kubectl / kubeadm / kubelet kuai</li></ul><h2 id="快速安装"><a href="#快速安装" class="headerlink" title=" 快速安装"></a><font color="orange"> 快速安装</font></h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在 master 节点和 worker 节点都要执行</span>curl -sSL https://kuboard.cn/install-script/v1.15.3/install-kubelet.sh <span class="token operator">|</span> sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p><font color="red">请仔细研读脚本</font></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># 在 master 节点和 worker 节点都要执行</span><span class="token comment" spellcheck="true"># 安装 docker</span><span class="token comment" spellcheck="true"># 参考文档如下</span><span class="token comment" spellcheck="true"># https://docs.docker.com/install/linux/docker-ce/centos/ </span><span class="token comment" spellcheck="true"># https://docs.docker.com/install/linux/linux-postinstall/</span><span class="token comment" spellcheck="true"># 卸载旧版本</span>yum remove -y docker \docker-client \docker-client-latest \docker-common \docker-latest \docker-latest-logrotate \docker-logrotate \docker-selinux \docker-engine-selinux \docker-engine<span class="token comment" spellcheck="true"># 设置 yum repository</span>yum <span class="token function">install</span> -y yum-utils \device-mapper-persistent-data \lvm2yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token comment" spellcheck="true"># 安装并启动 docker</span>yum <span class="token function">install</span> -y docker-ce-18.09.7 docker-ce-cli-18.09.7 containerd.iosystemctl <span class="token function">enable</span> dockersystemctl start docker<span class="token comment" spellcheck="true"># 安装 nfs-utils</span><span class="token comment" spellcheck="true"># 必须先安装 nfs-utils 才能挂载 nfs 网络存储</span>yum <span class="token function">install</span> -y nfs-utils<span class="token comment" spellcheck="true"># 关闭 防火墙</span>systemctl stop firewalldsystemctl disable firewalld<span class="token comment" spellcheck="true"># 关闭 SeLinux</span>setenforce 0<span class="token function">sed</span> -i <span class="token string">"s/SELINUX=enforcing/SELINUX=disabled/g"</span> /etc/selinux/config<span class="token comment" spellcheck="true"># 关闭 swap</span>swapoff -a<span class="token function">yes</span> <span class="token operator">|</span> <span class="token function">cp</span> /etc/fstab /etc/fstab_bak<span class="token function">cat</span> /etc/fstab_bak <span class="token operator">|</span><span class="token function">grep</span> -v swap <span class="token operator">></span> /etc/fstab<span class="token comment" spellcheck="true"># 修改 /etc/sysctl.conf</span><span class="token comment" spellcheck="true"># 如果有配置，则修改</span><span class="token function">sed</span> -i <span class="token string">"s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g"</span>  /etc/sysctl.conf<span class="token function">sed</span> -i <span class="token string">"s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g"</span>  /etc/sysctl.conf<span class="token function">sed</span> -i <span class="token string">"s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g"</span>  /etc/sysctl.conf<span class="token comment" spellcheck="true"># 可能没有，追加</span><span class="token keyword">echo</span> <span class="token string">"net.ipv4.ip_forward = 1"</span> <span class="token operator">>></span> /etc/sysctl.conf<span class="token keyword">echo</span> <span class="token string">"net.bridge.bridge-nf-call-ip6tables = 1"</span> <span class="token operator">>></span> /etc/sysctl.conf<span class="token keyword">echo</span> <span class="token string">"net.bridge.bridge-nf-call-iptables = 1"</span> <span class="token operator">>></span> /etc/sysctl.conf<span class="token comment" spellcheck="true"># 执行命令以应用</span>sysctl -p<span class="token comment" spellcheck="true"># 配置K8S的yum源</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>EOF <span class="token operator">></span> /etc/yum.repos.d/kubernetes.repo<span class="token punctuation">[</span>kubernetes<span class="token punctuation">]</span>name<span class="token operator">=</span>Kubernetesbaseurl<span class="token operator">=</span>http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled<span class="token operator">=</span>1gpgcheck<span class="token operator">=</span>0repo_gpgcheck<span class="token operator">=</span>0gpgkey<span class="token operator">=</span>http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF<span class="token comment" spellcheck="true"># 卸载旧版本</span>yum remove -y kubelet kubeadm kubectl<span class="token comment" spellcheck="true"># 安装kubelet、kubeadm、kubectl</span>yum <span class="token function">install</span> -y kubelet-1.15.3 kubeadm-1.15.3 kubectl-1.15.3<span class="token comment" spellcheck="true"># 修改docker Cgroup Driver为systemd</span><span class="token comment" spellcheck="true"># # 将/usr/lib/systemd/system/docker.service文件中的这一行 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><span class="token comment" spellcheck="true"># # 修改为 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd</span><span class="token comment" spellcheck="true"># 如果不修改，在添加 worker 节点时可能会碰到如下错误</span><span class="token comment" spellcheck="true"># [WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". </span><span class="token comment" spellcheck="true"># Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><span class="token function">sed</span> -i <span class="token string">"s#^ExecStart=/usr/bin/dockerd.*#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd#g"</span> /usr/lib/systemd/system/docker.service<span class="token comment" spellcheck="true"># 设置 docker 镜像，提高 docker 镜像下载速度和稳定性</span><span class="token comment" spellcheck="true"># 如果您访问 https://hub.docker.io 速度非常稳定，亦可以跳过这个步骤</span>curl -sSL https://get.daocloud.io/daotools/set_mirror.sh <span class="token operator">|</span> sh -s http://f1361db2.m.daocloud.io<span class="token comment" spellcheck="true"># 重启 docker，并启动 kubelet</span>systemctl daemon-reloadsystemctl restart dockersystemctl <span class="token function">enable</span> kubelet <span class="token operator">&amp;&amp;</span> systemctl start kubeletdocker version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;如果此时执行 service status kubelet 命令，将得到 kubelet 启动失败的错误提示，请忽略此错误，因为必须完成后续步骤中 kubeadm init 的操作，kubelet 才能正常启动</p><h1 id="初始化-master-节点"><a href="#初始化-master-节点" class="headerlink" title="初始化 master 节点"></a>初始化 master 节点</h1><p>以 <font color="red">root</font> 身份在 demo-master-a-1 机器上执行<br>初始化 master 节点时，如果因为中间某些步骤的配置出错，想要重新初始化 master 节点，请先执行 <font color="red">kubeadm reset </font>操作</p><p>POD_SUBNET 所使用的网段不能与 master节点/worker节点 所在的网段重叠。该字段的取值为一个 CIDR 值，如果您对 CIDR 这个概念还不熟悉，请不要修改这个字段的取值 10.100.0.1/20</p><h3 id="快速初始化"><a href="#快速初始化" class="headerlink" title="快速初始化"></a>快速初始化</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 只在 master 节点执行</span><span class="token comment" spellcheck="true"># 替换 x.x.x.x 为 master 节点实际 IP（请使用内网 IP）</span><span class="token comment" spellcheck="true"># export 命令只在当前 shell 会话中有效，开启新的 shell 窗口后，如果要继续安装过程，请重新执行此处的 export 命令</span><span class="token function">export</span> MASTER_IP<span class="token operator">=</span>x.x.x.x<span class="token comment" spellcheck="true"># 替换 apiserver.demo 为 您想要的 dnsName (不建议使用 master 的 hostname 作为 APISERVER_NAME)</span><span class="token function">export</span> APISERVER_NAME<span class="token operator">=</span>apiserver.demo<span class="token function">export</span> POD_SUBNET<span class="token operator">=</span>10.100.0.1/20<span class="token keyword">echo</span> <span class="token string">"<span class="token variable">${MASTER_IP}</span>    <span class="token variable">${APISERVER_NAME}</span>"</span> <span class="token operator">>></span> /etc/hostscurl -sSL https://kuboard.cn/install-script/v1.15.3/init-master.sh <span class="token operator">|</span> sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手工初始化"><a href="#手工初始化" class="headerlink" title="手工初始化"></a>手工初始化</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 只在 master 节点执行</span><span class="token comment" spellcheck="true"># 替换 x.x.x.x 为 master 节点实际 IP（请使用内网 IP）</span><span class="token comment" spellcheck="true"># export 命令只在当前 shell 会话中有效，开启新的 shell 窗口后，如果要继续安装过程，请重新执行此处的 export 命令</span><span class="token function">export</span> MASTER_IP<span class="token operator">=</span>x.x.x.x<span class="token comment" spellcheck="true"># 替换 apiserver.demo 为 您想要的 dnsName (不建议使用 master 的 hostname 作为 APISERVER_NAME)</span><span class="token function">export</span> APISERVER_NAME<span class="token operator">=</span>apiserver.demo<span class="token function">export</span> POD_SUBNET<span class="token operator">=</span>10.100.0.1/20<span class="token keyword">echo</span> <span class="token string">"<span class="token variable">${MASTER_IP}</span>    <span class="token variable">${APISERVER_NAME}</span>"</span> <span class="token operator">>></span> /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>手工初始化脚本</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># 只在 master 节点执行</span><span class="token comment" spellcheck="true"># 查看完整配置选项 https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2</span><span class="token function">rm</span> -f ./kubeadm-config.yaml<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>EOF <span class="token operator">></span> ./kubeadm-config.yamlapiVersion: kubeadm.k8s.io/v1beta2kind: ClusterConfigurationkubernetesVersion: v1.15.3imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containerscontrolPlaneEndpoint: <span class="token string">"<span class="token variable">${APISERVER_NAME}</span>:6443"</span>networking:  serviceSubnet: <span class="token string">"10.96.0.0/12"</span>  podSubnet: <span class="token string">"<span class="token variable">${POD_SUBNET}</span>"</span>  dnsDomain: <span class="token string">"cluster.local"</span>EOF<span class="token comment" spellcheck="true"># kubeadm init</span><span class="token comment" spellcheck="true"># 根据您服务器网速的情况，您需要等候 3 - 10 分钟</span>kubeadm init --config<span class="token operator">=</span>kubeadm-config.yaml --upload-certs<span class="token comment" spellcheck="true"># 配置 kubectl</span><span class="token function">rm</span> -rf /root/.kube/<span class="token function">mkdir</span> /root/.kube/<span class="token function">cp</span> -i /etc/kubernetes/admin.conf /root/.kube/config<span class="token comment" spellcheck="true"># 安装 calico 网络插件</span><span class="token comment" spellcheck="true"># 参考文档 https://docs.projectcalico.org/v3.8/getting-started/kubernetes/</span><span class="token function">rm</span> -f calico.yaml<span class="token function">wget</span> https://docs.projectcalico.org/v3.8/manifests/calico.yaml<span class="token function">sed</span> -i <span class="token string">"s#192\.168\.0\.0/16#<span class="token variable">${POD_SUBNET}</span>#"</span> calico.yamlkubectl apply -f calico.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>检查 master 初始化结果</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 只在 master 节点执行</span><span class="token comment" spellcheck="true"># 执行如下命令，等待 3-10 分钟，直到所有的容器组处于 Running 状态</span><span class="token function">watch</span> kubectl get pod -n kube-system -o wide<span class="token comment" spellcheck="true"># 查看 master 节点初始化结果</span>kubectl get nodes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="初始化-worker节点"><a href="#初始化-worker节点" class="headerlink" title="初始化 worker节点"></a>初始化 worker节点</h1><ul><li>获得 join命令参数</li></ul><p>在 master 节点上执行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 只在 master 节点执行</span><span class="token comment" spellcheck="true"># --ttl 0 创建永久的token</span>kubeadm token create --ttl 0 --print-join-command<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可获取kubeadm join 命令及参数，如下所示</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># kubeadm token create 命令的输出</span>kubeadm <span class="token function">join</span> apiserver.demo:6443 --token nyawlj.tnbpyckkkd7tatjs     --discovery-token-ca-cert-hash sha256:022ac5a2965466ccc1c9443403e55f56d276334e761ddeef57d1148f09549c1a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="初始化worker"><a href="#初始化worker" class="headerlink" title="初始化worker"></a>初始化worker</h2><p>针对所有的 worker 节点执行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 只在 worker 节点执行</span><span class="token comment" spellcheck="true"># 替换 ${MASTER_IP} 为 master 节点实际 IP</span><span class="token comment" spellcheck="true"># 替换 ${APISERVER_NAME} 为初始化 master 节点时所使用的 APISERVER_NAME</span><span class="token keyword">echo</span> <span class="token string">"<span class="token variable">${MASTER_IP}</span>    <span class="token variable">${APISERVER_NAME}</span>"</span> <span class="token operator">>></span> /etc/hosts<span class="token comment" spellcheck="true"># 替换为 master 节点上 kubeadm token create 命令的输出</span>kubeadm <span class="token function">join</span> apiserver.demo:6443 --token nyawlj.tnbpyckkkd7tatjs     --discovery-token-ca-cert-hash sha256:022ac5a2965466ccc1c9443403e55f56d276334e761ddeef57d1148f09549c1a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="检查初始化结果"><a href="#检查初始化结果" class="headerlink" title="检查初始化结果"></a>检查初始化结果</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 只在 master 节点执行</span>kubectl get nodes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果如下所示：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@demo-master-a-1 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get nodes</span>NAME     STATUS   ROLES    AGE     VERSIONdemo-master-a-1   Ready    master   5m3s    v1.15.3demo-worker-a-1   Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>   2m26s   v1.15.3demo-worker-a-2   Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>   3m56s   v1.15.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="移除-worker-节点"><a href="#移除-worker-节点" class="headerlink" title="移除 worker 节点"></a>移除 worker 节点</h2><p>正常情况下，您无需移除 worker 节点，如果添加到集群出错，您可以移除 worker 节点，再重新尝试添加</p><ol><li>在准备移除的 worker 节点上执行</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 只在 worker 节点执行</span>kubeadm reset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>在 master 节点 demo-master-a-1 上执行</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 只在 master 节点执行</span>kubectl delete node demo-worker-x-x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将 demo-worker-x-x 替换为要移除的 worker 节点的名字<br>worker 节点的名字可以通过在节点 demo-master-a-1 上执行 kubectl get nodes 命令获得</p><h1 id="安装-Ingress-Controller"><a href="#安装-Ingress-Controller" class="headerlink" title="安装 Ingress Controller"></a>安装 Ingress Controller</h1><ol><li>安装IngressController</li></ol><p><font color="red">注：</font>在 master 节点上执行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 只在 master 节点执行</span>kubectl apply -f https://kuboard.cn/install-script/v1.15.3/nginx-ingress.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>卸载IngressController<br><font color="red">注：</font>在 master 节点上执行</li></ol><p>只在您想选择其他 Ingress Controller 的情况下卸载</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 只在 master 节点执行</span>kubectl delete -f https://kuboard.cn/install-script/v1.15.3/nginx-ingress.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>YML文件</li></ol><pre class="line-numbers language-yml"><code class="language-yml"># 如果打算用于生产环境，请参考 https://github.com/nginxinc/kubernetes-ingress/blob/v1.5.3/docs/installation.md 并根据您自己的情况做进一步定制apiVersion: v1kind: Namespacemetadata:  name: nginx-ingress---apiVersion: v1kind: ServiceAccountmetadata:  name: nginx-ingress   namespace: nginx-ingress---apiVersion: v1kind: Secretmetadata:  name: default-server-secret  namespace: nginx-ingresstype: Opaquedata:  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN2akNDQWFZQ0NRREFPRjl0THNhWFhEQU5CZ2txaGtpRzl3MEJBUXNGQURBaE1SOHdIUVlEVlFRRERCWk8KUjBsT1dFbHVaM0psYzNORGIyNTBjbTlzYkdWeU1CNFhEVEU0TURreE1qRTRNRE16TlZvWERUSXpNRGt4TVRFNApNRE16TlZvd0lURWZNQjBHQTFVRUF3d1dUa2RKVGxoSmJtZHlaWE56UTI5dWRISnZiR3hsY2pDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUwvN2hIUEtFWGRMdjNyaUM3QlBrMTNpWkt5eTlyQ08KR2xZUXYyK2EzUDF0azIrS3YwVGF5aGRCbDRrcnNUcTZzZm8vWUk1Y2Vhbkw4WGM3U1pyQkVRYm9EN2REbWs1Qgo4eDZLS2xHWU5IWlg0Rm5UZ0VPaStlM2ptTFFxRlBSY1kzVnNPazFFeUZBL0JnWlJVbkNHZUtGeERSN0tQdGhyCmtqSXVuektURXUyaDU4Tlp0S21ScUJHdDEwcTNRYzhZT3ExM2FnbmovUWRjc0ZYYTJnMjB1K1lYZDdoZ3krZksKWk4vVUkxQUQ0YzZyM1lma1ZWUmVHd1lxQVp1WXN2V0RKbW1GNWRwdEMzN011cDBPRUxVTExSakZJOTZXNXIwSAo1TmdPc25NWFJNV1hYVlpiNWRxT3R0SmRtS3FhZ25TZ1JQQVpQN2MwQjFQU2FqYzZjNGZRVXpNQ0F3RUFBVEFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWpLb2tRdGRPcEsrTzhibWVPc3lySmdJSXJycVFVY2ZOUitjb0hZVUoKdGhrYnhITFMzR3VBTWI5dm15VExPY2xxeC9aYzJPblEwMEJCLzlTb0swcitFZ1U2UlVrRWtWcitTTFA3NTdUWgozZWI4dmdPdEduMS9ienM3bzNBaS9kclkrcUI5Q2k1S3lPc3FHTG1US2xFaUtOYkcyR1ZyTWxjS0ZYQU80YTY3Cklnc1hzYktNbTQwV1U3cG9mcGltU1ZmaXFSdkV5YmN3N0NYODF6cFErUyt1eHRYK2VBZ3V0NHh3VlI5d2IyVXYKelhuZk9HbWhWNThDd1dIQnNKa0kxNXhaa2VUWXdSN0diaEFMSkZUUkk3dkhvQXprTWIzbjAxQjQyWjNrN3RXNQpJUDFmTlpIOFUvOWxiUHNoT21FRFZkdjF5ZytVRVJxbStGSis2R0oxeFJGcGZnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdi91RWM4b1JkMHUvZXVJTHNFK1RYZUprckxMMnNJNGFWaEMvYjVyYy9XMlRiNHEvClJOcktGMEdYaVN1eE9ycXgrajlnamx4NXFjdnhkenRKbXNFUkJ1Z1B0ME9hVGtIekhvb3FVWmcwZGxmZ1dkT0EKUTZMNTdlT1l0Q29VOUZ4amRXdzZUVVRJVUQ4R0JsRlNjSVo0b1hFTkhzbysyR3VTTWk2Zk1wTVM3YUhudzFtMApxWkdvRWEzWFNyZEJ6eGc2clhkcUNlUDlCMXl3VmRyYURiUzc1aGQzdUdETDU4cGszOVFqVUFQaHpxdmRoK1JWClZGNGJCaW9CbTVpeTlZTW1hWVhsMm0wTGZzeTZuUTRRdFFzdEdNVWozcGJtdlFmazJBNnljeGRFeFpkZFZsdmwKMm82MjBsMllxcHFDZEtCRThCay90elFIVTlKcU56cHpoOUJUTXdJREFRQUJBb0lCQVFDZklHbXowOHhRVmorNwpLZnZJUXQwQ0YzR2MxNld6eDhVNml4MHg4Mm15d1kxUUNlL3BzWE9LZlRxT1h1SENyUlp5TnUvZ2IvUUQ4bUFOCmxOMjRZTWl0TWRJODg5TEZoTkp3QU5OODJDeTczckM5bzVvUDlkazAvYzRIbjAzSkVYNzZ5QjgzQm9rR1FvYksKMjhMNk0rdHUzUmFqNjd6Vmc2d2szaEhrU0pXSzBwV1YrSjdrUkRWYmhDYUZhNk5nMUZNRWxhTlozVDhhUUtyQgpDUDNDeEFTdjYxWTk5TEI4KzNXWVFIK3NYaTVGM01pYVNBZ1BkQUk3WEh1dXFET1lvMU5PL0JoSGt1aVg2QnRtCnorNTZud2pZMy8yUytSRmNBc3JMTnIwMDJZZi9oY0IraVlDNzVWYmcydVd6WTY3TWdOTGQ5VW9RU3BDRkYrVm4KM0cyUnhybnhBb0dCQU40U3M0ZVlPU2huMVpQQjdhTUZsY0k2RHR2S2ErTGZTTXFyY2pOZjJlSEpZNnhubmxKdgpGenpGL2RiVWVTbWxSekR0WkdlcXZXaHFISy9iTjIyeWJhOU1WMDlRQ0JFTk5jNmtWajJTVHpUWkJVbEx4QzYrCk93Z0wyZHhKendWelU0VC84ajdHalRUN05BZVpFS2FvRHFyRG5BYWkyaW5oZU1JVWZHRXFGKzJyQW9HQkFOMVAKK0tZL0lsS3RWRzRKSklQNzBjUis3RmpyeXJpY05iWCtQVzUvOXFHaWxnY2grZ3l4b25BWlBpd2NpeDN3QVpGdwpaZC96ZFB2aTBkWEppc1BSZjRMazg5b2pCUmpiRmRmc2l5UmJYbyt3TFU4NUhRU2NGMnN5aUFPaTVBRHdVU0FkCm45YWFweUNweEFkREtERHdObit3ZFhtaTZ0OHRpSFRkK3RoVDhkaVpBb0dCQUt6Wis1bG9OOTBtYlF4VVh5YUwKMjFSUm9tMGJjcndsTmVCaWNFSmlzaEhYa2xpSVVxZ3hSZklNM2hhUVRUcklKZENFaHFsV01aV0xPb2I2NTNyZgo3aFlMSXM1ZUtka3o0aFRVdnpldm9TMHVXcm9CV2xOVHlGanIrSWhKZnZUc0hpOGdsU3FkbXgySkJhZUFVWUNXCndNdlQ4NmNLclNyNkQrZG8wS05FZzFsL0FvR0FlMkFVdHVFbFNqLzBmRzgrV3hHc1RFV1JqclRNUzRSUjhRWXQKeXdjdFA4aDZxTGxKUTRCWGxQU05rMXZLTmtOUkxIb2pZT2pCQTViYjhibXNVU1BlV09NNENoaFJ4QnlHbmR2eAphYkJDRkFwY0IvbEg4d1R0alVZYlN5T294ZGt5OEp0ek90ajJhS0FiZHd6NlArWDZDODhjZmxYVFo5MWpYL3RMCjF3TmRKS2tDZ1lCbyt0UzB5TzJ2SWFmK2UwSkN5TGhzVDQ5cTN3Zis2QWVqWGx2WDJ1VnRYejN5QTZnbXo5aCsKcDNlK2JMRUxwb3B0WFhNdUFRR0xhUkcrYlNNcjR5dERYbE5ZSndUeThXczNKY3dlSTdqZVp2b0ZpbmNvVlVIMwphdmxoTUVCRGYxSjltSDB5cDBwWUNaS2ROdHNvZEZtQktzVEtQMjJhTmtsVVhCS3gyZzR6cFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=---kind: ConfigMapapiVersion: v1metadata:  name: nginx-config  namespace: nginx-ingressdata:  server-names-hash-bucket-size: "1024"---kind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1beta1metadata:  name: nginx-ingressrules:- apiGroups:  - ""  resources:  - services  - endpoints  verbs:  - get  - list  - watch- apiGroups:  - ""  resources:  - secrets  verbs:  - get  - list  - watch- apiGroups:  - ""  resources:  - configmaps  verbs:  - get  - list  - watch  - update  - create- apiGroups:  - ""  resources:  - pods  verbs:  - list- apiGroups:  - ""  resources:  - events  verbs:  - create  - patch- apiGroups:  - extensions  resources:  - ingresses  verbs:  - list  - watch  - get- apiGroups:  - "extensions"  resources:  - ingresses/status  verbs:  - update- apiGroups:  - k8s.nginx.org  resources:  - virtualservers  - virtualserverroutes  verbs:  - list  - watch  - get---kind: ClusterRoleBindingapiVersion: rbac.authorization.k8s.io/v1beta1metadata:  name: nginx-ingresssubjects:- kind: ServiceAccount  name: nginx-ingress  namespace: nginx-ingressroleRef:  kind: ClusterRole  name: nginx-ingress  apiGroup: rbac.authorization.k8s.io---apiVersion: extensions/v1beta1kind: DaemonSetmetadata:  name: nginx-ingress  namespace: nginx-ingress  annotations:    prometheus.io/scrape: "true"    prometheus.io/port: "9113"spec:  selector:    matchLabels:      app: nginx-ingress  template:    metadata:      labels:        app: nginx-ingress    spec:      serviceAccountName: nginx-ingress      containers:      - image: nginx/nginx-ingress:1.5.3        name: nginx-ingress        ports:        - name: http          containerPort: 80          hostPort: 80        - name: https          containerPort: 443          hostPort: 443        - name: prometheus          containerPort: 9113        env:        - name: POD_NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        args:          - -nginx-configmaps=$(POD_NAMESPACE)/nginx-config          - -default-server-tls-secret=$(POD_NAMESPACE)/default-server-secret         #- -v=3 # Enables extensive logging. Useful for troubleshooting.         #- -report-ingress-status         #- -external-service=nginx-ingress         #- -enable-leader-election          - -enable-prometheus-metrics         #- -enable-custom-resources<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>配置域名解析</li></ol><p>将域名 <font color="orange">*.demo.yourdomain.com </font>解析到 demo-worker-a-2 的 IP 地址 <font color="orange">z.z.z.z</font> （也可以是 demo-worker-a-1 的地址 y.y.y.y)</p><ol start="5"><li>验证配置</li></ol><p>在浏览器访问 <font color="orange">a.demo.yourdomain.com</font>，将得到 404 NotFound 错误页面</p><p><font color="red">提示</font></p><ul><li><p>许多初学者在安装 Ingress Controller 时会碰到问题，请不要灰心，可暂时跳过 安装 Ingress Controller 这个部分，等您学完 <a href="http://www.kuboard.cn" target="_blank" rel="noopener">www.kuboard.cn</a> 上 Kubernetes 入门 以及 通过互联网访问您的应用程序 这两部分内容后，再来回顾 Ingress Controller 的安装。</p></li><li><p>如果您打算将 Kubernetes 用于生产环境，请参考文档 Installing Ingress Controller，完善 Ingress 的配置</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql自动化运维工具</title>
      <link href="/mysql-zi-dong-hua-yun-wei-gong-ju/"/>
      <url>/mysql-zi-dong-hua-yun-wei-gong-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="一、简述信息"><a href="#一、简述信息" class="headerlink" title="一、简述信息"></a>一、简述信息</h1><hr><ul><li>体验地址：<a href="http://192.168.1.48:9123/" target="_blank" rel="noopener">http://192.168.1.48:9123/</a></li><li>用户信息</li></ul><table><thead><tr><th align="center">角色</th><th align="center">账号</th><th align="center">密码</th></tr></thead><tbody><tr><td align="center">管理员</td><td align="center">admin</td><td align="center">admin</td></tr><tr><td align="center">工程师</td><td align="center">engineer</td><td align="center">archer</td></tr><tr><td align="center">审核人</td><td align="center">auditor</td><td align="center">archer</td></tr><tr><td align="center">DBA</td><td align="center">dba</td><td align="center">auditor</td></tr></tbody></table><ul><li>docker 地址分别如下<pre class="line-numbers language-html"><code class="language-html">registry.cn-beijing.aliyuncs.com/hooyh_public/inceptionregistry.cn-beijing.aliyuncs.com/hooyh_public/archer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="二、安装docker以及启动inception、MySQL和archer"><a href="#二、安装docker以及启动inception、MySQL和archer" class="headerlink" title="二、安装docker以及启动inception、MySQL和archer"></a>二、安装docker以及启动inception、MySQL和archer</h1><hr><ol><li>安装</li></ol><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum makecache fastyum -y <span class="token function">install</span> docker-ce<span class="token comment" spellcheck="true">#启动服务并设置开机启动</span>systemctl <span class="token function">enable</span> docker <span class="token operator">&amp;&amp;</span> systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>pull所需镜像</li></ol><pre class="line-numbers language-bash"><code class="language-bash">docker pull registry.cn-beijing.aliyuncs.com/hooyh_public/archerdocker pull registry.cn-beijing.aliyuncs.com/hooyh_public/inception<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下载完之后docker images查看镜像</p><p><img src="img/image001.png" alt="avatar"></p><ol start="3"><li>创建配置文件/etc/inc.cnf</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">>></span>/etc/inc.cnf<span class="token operator">&lt;&lt;</span><span class="token string">EOF[inception]general_log=1general_log_file=inception.logport=6669socket=/tmp/inc.socketcharacter-set-client-handshake=0character-set-server=utf8#备份库信息inception_remote_system_password=123456inception_remote_system_user=rootinception_remote_backup_port=3306inception_remote_backup_host=mysqlinception_support_charset=utf8,utf8mb4inception_enable_nullable=0inception_check_primary_key=1inception_check_column_comment=1inception_check_table_comment=1inception_osc_on=OFFinception_osc_bin_dir=/usr/bininception_osc_min_table_size=1inception_osc_chunk_time=0.1inception_enable_blob_type=1inception_check_column_default_value=1EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>启动inception</li></ol><p>指定配置文件和端口</p><pre class="line-numbers language-bash"><code class="language-bash">docker run --name inception -v ~/data/inception/inc.cnf:/etc/inc.cnf -p 6669:6669 -dti registry.cn-beijing.aliyuncs.com/hooyh_public/inception<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>启动MySQL5.7镜像</li></ol><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name mysql   -p 3306:3306 -v ~/data/mysql:/var/lib/mysql:rw  -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456 -d mysql:5.7.22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>配置archer</li></ol><p>安装完毕之后  创建django初始化的settings.py<br>红色标注为需要根据自身服务器修改的地方   如果出现报错 注意配置中间是否有多余空行</p><p><a href="https://github.com/Hooyh110/DevOps/blob/master/mysql/Automation-operation/archer/settings.py" target="_blank" rel="noopener">settings.py</a></p><ol start="7"><li>创建一个archer_github数据库</li></ol><p>我用的编码格式为 utf8mb4_bin</p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE DATABASE `archer_github` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="img/image002.png" alt="avatar"></p><p>不创建数据库初始化会报如下错误</p><p><img src="img/image003.png" alt="avatar"></p><p>在mysql中执行如下sql否则回滚sql时 会提示inception账号的一系列问题哦</p><pre class="line-numbers language-mysql"><code class="language-mysql">grant all privileges on *.* to 'inception'@'%' identified by 'inception' with grant option;flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="img/image004.png" alt="avatar"></p><p>创建完数据库之后运行容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker run --name archer -e NGINX_PORT<span class="token operator">=</span>9123 -p 9123:9123 --link mysql:mysql --link inception:inception -dti registry.cn-beijing.aliyuncs.com/hooyh_public /archer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>进入archer容器执行初始化命令</li></ol><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -ti archer /bin/bash<span class="token function">cd</span> /opt/archer<span class="token function">source</span> /opt/venv4archer/bin/activate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改 archer/settings.py修改其中数据库的地址及账号密码否则makemigrations会报错<br><img src="img/image005.png" alt="avatar"></p><p><img src="img/image006.png" alt="avatar"></p><pre class="line-numbers language-bash"><code class="language-bash">python3 manage.py makemigrations sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="img/image007.png" alt="avatar"></p><pre class="line-numbers language-bash"><code class="language-bash">python3 manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="img/image008.png" alt="avatar"></p><p>创建管理员账号</p><pre class="line-numbers language-bash"><code class="language-bash">python3 manage.py createsuperuseradmin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建完毕后，退出并重启该archer容器，让其用户生效<br> 查看容器状态</p><p><img src="img/image009.png" alt="avatar"></p><ol start="9"><li>关闭防火墙或添加防火墙规则访问</li></ol><p><font color="red"><a href="http://127.0.0.1:9123" target="_blank" rel="noopener">http://127.0.0.1:9123</a></font></p><h1 id="三-、登录系统配置及验证"><a href="#三-、登录系统配置及验证" class="headerlink" title="三 、登录系统配置及验证"></a>三 、登录系统配置及验证</h1><hr><ol><li>发布sql工单流程</li></ol><p>普通用户登录<a href="http://127.0.0.1:9123" target="_blank" rel="noopener">http://127.0.0.1:9123</a></p><p><img src="img/image010.png" alt="avatar"></p><p>输入你要执行的sql</p><p><img src="img/image011.png" alt="avatar"></p><p><img src="img/image012.png" alt="avatar"></p><p>审批人账号收到邮件</p><p><img src="img/image013.png" alt="avatar"></p><p>用审批人账号登录</p><p><img src="img/image014.png" alt="avatar"></p><p>审核通过</p><p><img src="img/image015.png" alt="avatar"></p><p><img src="img/image016.png" alt="avatar"></p><p>DBA账号收到邮件</p><p>用DBA账号登录</p><p>执行</p><p><img src="img/image017.png" alt="avatar"></p><p>回滚同理</p><p><img src="img/image018.png" alt="avatar"></p><p><img src="img/image019.png" alt="avatar"></p><ol start="2"><li>配置阿里云RDS</li></ol><p>如果需要加入阿里云RDS修改配置文件settings.py</p><p><img src="img/image020.png" alt="avatar"></p><p>也可以加上邮件通知</p><p><img src="img/image021.png" alt="avatar"></p><p>重启archer 的docker服务 就可以了</p><p><img src="img/image022.png" alt="avatar"></p><ol start="3"><li>测试回滚功能</li></ol><p><img src="img/image023.png" alt="avatar"></p><p>审核并执行</p><p><img src="img/image024.png" alt="avatar"></p><p>执行成功</p><p><img src="img/image025.png" alt="avatar"></p><p>查看数据库中备份</p><p><img src="img/image026.png" alt="avatar"></p><p>提交回滚请求 需要检测之后提交</p><p><img src="img/image027.png" alt="avatar"></p><p><img src="img/image028.png" alt="avatar"></p><p><img src="img/image029.png" alt="avatar"></p><p>切换dba账户执行回滚</p><p><img src="img/image030.png" alt="avatar"></p><p>回滚成功</p><p><img src="img/image031.png" alt="avatar"></p><p>邮件也收到，只不过我为了测试邮件通知人都是自己</p><p>需要修改的话直接在后台数据管理中修改</p><p><img src="img/image032.png" alt="avatar"></p><ol start="4"><li>数据库名称</li></ol><p>如果数据库名太长的话 会报错</p><pre class="line-numbers language-html"><code class="language-html">Global environment  errorThe backup dbname 'rm-bp1570xxxfo.mysql.rds.aliyuncs.com-3306- lse_home_prod ' is too long.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="img/image033.png" alt="avatar"></p><p>原因是RDS库名+端口+数据库名太长，超过了mysql 的information_schema中字段的值64</p><p>所以库名不要超过11字节就不会报上述错误了(sql错误请忽略我就是拿来演示的)</p><p><img src="img/image034.png" alt="avatar"></p><p>要不就ping一下阿里云的RDS地址  把RDS地址换成ip即可</p><p>在工单界面 也是看不到具体ip的</p><p><img src="img/image035.png" alt="avatar"></p><p><img src="img/image036.png" alt="avatar"></p><ol start="5"><li><p>配置访问地址为80访问</p></li><li><p>再安装一个80端口的nginx  解析到docker的9123的nginx 端口</p></li><li><p>只需要添加下面一条设置即可</p></li></ol><p><img src="img/image037.png" alt="avatar"></p><p><img src="img/image038.png" alt="avatar"></p><ol start="8"><li>防火墙配置</li></ol><p>把9123 80 3306 6669端口加入防火墙  并reload</p><pre class="line-numbers language-bash"><code class="language-bash">firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span>80/tcp --permanentfirewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span>9123/tcp --permanentfirewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span>3306/tcp --permanentfirewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span>6669/tcp --permanentfirewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你的sql 比较大，可能会报错</p><p><img src="img/image039.png" alt="avatar"></p><p>修改archer 容器里nginx配置中client_max_body_size 设置大一点就可以了</p><p><img src="img/image040.png" alt="avatar"></p><ol start="9"><li>配置LDAP</li></ol><p>加入ldap    由于之前搭建的服务器是没有介入内网ldap的  配置ldap的时候就一模一样再装了一遍</p><p>ldap配置可参考<a href="https://www.cnblogs.com/chenminklutz/p/9642277.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenminklutz/p/9642277.html</a><br>不过我的ou带有空格 cn带有空格所以自己重新配置了用“”把字段括起来了<br>红色框框处需要自行根据ou进行修改</p><p><img src="img/image041.png" alt="avatar"></p><p>可以先安装ldapsearch测试</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> -y openldap-servers openldap-clients migrationtoolsldapsearch -x -W -h  172.16.5.1 -p 389 -b <span class="token string">"dc=tiansoft,dc=com"</span> -D <span class="token string">"cn=Jiamin Xu(Hugo),ou=FTE,ou=Domain Users,dc=tiansoft,dc=com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="img/image042.png" alt="avatar"></p><p>至此mysql自动化运维平台已经搭建完毕  配置方面请根据个人需求配置。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器脑裂</title>
      <link href="/fu-wu-qi-nao-lie/"/>
      <url>/fu-wu-qi-nao-lie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> news </category>
          
      </categories>
      
      
        <tags>
            
            <tag> news </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统 - 雪崩效应</title>
      <link href="/fen-bu-shi-xi-tong-xue-beng-xiao-ying/"/>
      <url>/fen-bu-shi-xi-tong-xue-beng-xiao-ying/</url>
      
        <content type="html"><![CDATA[<h1 id="雪崩效应现象"><a href="#雪崩效应现象" class="headerlink" title=" 雪崩效应现象"></a><font color="blue"> 雪崩效应现象</font></h1><blockquote><p>参考资料：<br>    <a href="https://github.com/Netflix/Hystrix/wiki" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki</a><br>    <a href="https://www.jianshu.com/p/83a99e183fa5" target="_blank" rel="noopener">https://www.jianshu.com/p/83a99e183fa5</a></p></blockquote><p>&emsp;复杂分布式架构的应用程序有许多依赖，其中每一个在某些时候都会不可避免的发生失败。如果这个主应用没有从那些外部失败隔离，那么就会有被拖垮的风险。</p><p>例如，1个应用依赖30个服务，每个服务有99.99%可用，那么预期：</p><pre><code>99.9930 = 99.7％的正常运行时间10亿次请求中有0.3％= 3,000,000次失败2小时停机时间/月，即使所有的依赖都有很好的正常运行时间</code></pre><p>现实通常会更残酷。</p><p>&emsp;如果你没有针对整个系统做快速恢复，即使所有依赖只有 0.01% 的不可用率，累积起来每个月给系统带来的不可用时间也有数小时之多。</p><p>当一切都ok的请求流看起来是这样的：<br><img src="img/1.png" width="600" height="600"><br>当许多后端系统中的一个成为潜在故障时，可能会阻塞所有用户请求：<br><img src="img/2.png" width="600" height="600"><br>一个高并发后端依赖成为潜在危险时，它会在几秒钟中导致所有服务器上的所有的资源耗尽。</p><p>&emsp;在网络中或者客户端库中运行的每一个app都有可能会导致成为潜在的故障源。比失败更坏的是，这个问题app也可能会导致服务之间的延迟增加，从而备份队列，线程，和其他系统资源，导致更多系统的级联故障。<br><img src="img/3.png" width="600" height="600"><br>&emsp;当通过第三方客户端网络访问时，这些问题会加剧，这个第三方客户端就是一个黑盒，其实现细节是不清楚的，它能随时改变行为，每个客户端的网络和资源配置是不同的，通常难以监控和修改。</p><p>&emsp;如果这些网络请求通过第三方客户端发出，问题会变得更加严重，因为这些第三方客户端对于应用来说相当于《黑盒》—无法了解其实现细节，随时可能发生变更，网络/资源配置随客户端的不通而不同，同时又难以监控和修改。同时，应用依赖链中的服务可能非常耗时，或者这些可能导致问题的网络请求根本没有被我们的应用显示的调用！</p><p>&emsp;网络连接可能失败或者降级。服务或者服务器可能失效或者变慢。新依赖的库或者部署的服务可能改变行为或性能，亦或是依赖的客户端库本身有bug。</p><p>&emsp;所有以上这些所描述的失败和延迟都需要被隔离和管理，才不至于因为单个服务失败而导致整个应用活系统垮掉。</p><p>&emsp;上面是Hystrix文档中给我们描述的在多服务系统中由于某个服务的不可用从而会导致整个系统不可用的一种现象。</p><p>&emsp;简单的来说就是由于服务提供者A不可用，导致服务调用者B对A的请求阻塞，没有相关的机制通知或解决请求阻塞，导致在服务调用者B对A请求的阻塞越来越多，阻塞请求变多并且不断对A进行请求重试导致服务调用者B所在的系统的资源会被耗尽，而服务调用者B所在的系统可能并不会只有对A的调用，还有存在对其他服务提供者的调用，因为调用A把系统资源已经耗尽了，导致也无法处理对非A请求，而且这种不可用可能沿请求调用链向上传递，比如说服务调用者C会调用B的服务，因为B所在的系统不可用，导致C也不可用，这样级联导致阻塞请求越来越多，表现为多个系统都不可用了，这种现象被称为”雪崩效应”。</p><hr><blockquote><p><font color="orange" size="6">以下内容为互联网资源整理</font></p></blockquote><h1 id="雪崩效应产生的原因"><a href="#雪崩效应产生的原因" class="headerlink" title="雪崩效应产生的原因"></a><font color="blue">雪崩效应产生的原因</font></h1><p>&emsp;根据上面的描述，概括一下雪崩效应的过程：服务提供者不可用-&gt;服务调用者请求重试-&gt;服务调用者所在的系统资源耗尽，服务调用者不可用。</p><p>这个过程再概括一下分为三个阶段：</p><ol><li>服务提供者不可用</li><li>服务调用者重试</li><li>服务调用者不可用</li></ol><p>服务雪崩的每个阶段都可能由不同的原因造成，下面逐一说明。</p><p>服务提供者不可用</p><p>服务提供者不可用产生的原因可能有以下几点：</p><ul><li>硬件故障<br>如服务器宕机，机房断电，光纤被挖断等。</li><li>程序Bug<br>如程序逻辑导致内存泄漏，JVM长时间FullGC等。</li><li>缓存击穿<br>缓存击穿一般发生在缓存应用重启, 所有缓存被清空时,以及短时间内大量缓存失效时. 大量的缓存不命中, 使请求直击后端,造成服务提供者超负荷运行,引起服务不可用.</li><li>流量激增<br>流量激增导致服务提供者无法承受这样的高负载，激增的原因有异常流量，重试加大流量等。</li></ul><p><strong>服务调用者重试</strong></p><p>在服务提供者出现不可用的情况下，服务调用者重试加大了流量，服务调用者重试又可以分为两种：</p><ul><li>用户重试<br>在服务提供者不可用后，用户由于忍受不了界面上长时间的等待，而不断刷新页面甚至提交表单。</li><li>代码逻辑重试<br>在代码中请求远端服务时，在出现请求异常的时候，代码逻辑都会有重试的功能，这在因为网路抖动导致请求超时的情况下是很有用的。但是如果本身服务提供者就不可用了，这种不断地重试会加大对服务器提供者的请求流量。</li></ul><p><strong>服务调用者不可用</strong></p><p>服务调用者不可用产生的原因主要是：</p><ul><li>同步等待造成的资源耗尽</li></ul><p>&emsp;当服务调用者使用同步调用时, 会产生大量的等待线程占用系统资源。一旦线程资源被耗尽，服务调用者提供的服务也将处于不可用状态。</p><h1 id="雪崩效应应对策略"><a href="#雪崩效应应对策略" class="headerlink" title="雪崩效应应对策略"></a><font color="blue">雪崩效应应对策略</font></h1><p>应对策略从造成雪崩的原因出发，提供不同的原因下的解决方案。</p><ul><li>硬件故障：多机房容灾、异地多活等。</li><li>程序BUG：修改程序bug、及时释放资源等。</li><li>缓存穿透：缓存预加载、缓存异步加载等。</li><li>流量激增：服务自动扩容、流量控制（限流、关闭重试）等。</li><li>同步等待：资源隔离、MQ解耦、不可用服务调用快速失败等。资源隔离通常指不同服务调用采用不同的线程池；不可用服务调用快速失败一般通过熔断器模式结合超时机制实现。</li></ul><p>总结一下就是几个关键词：扩容、流控（流量控制）、隔离、熔断。</p>]]></content>
      
      
      <categories>
          
          <category> news </category>
          
      </categories>
      
      
        <tags>
            
            <tag> news </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见error及解决方法</title>
      <link href="/chang-jian-error-ji-jie-jue-fang-fa/"/>
      <url>/chang-jian-error-ji-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-系列："><a href="#Python-系列：" class="headerlink" title="Python 系列： "></a><font color="blue">Python 系列： </font></h1><ol><li>使用execjs 解析抓取的网页数据时<font color="red"><strong>错误：</strong>Could not find an available JavaScript runtime </font></li></ol><ul><li>解决方法：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> PyExecJSyum <span class="token function">install</span> -y nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Linux-系列："><a href="#Linux-系列：" class="headerlink" title="Linux 系列： "></a><font color="blue">Linux 系列： </font></h1><h1 id="docker-系列："><a href="#docker-系列：" class="headerlink" title="docker 系列： "></a><font color="blue">docker 系列： </font></h1><h1 id="nginx-系列："><a href="#nginx-系列：" class="headerlink" title="nginx 系列： "></a><font color="blue">nginx 系列： </font></h1><h1 id="mysql-系列："><a href="#mysql-系列：" class="headerlink" title="mysql 系列： "></a><font color="blue">mysql 系列： </font></h1><ol><li><p>mysql远程连接报错 <font color="red">ERROR 1129 (HY000): Host ‘192.168.7.210’ is blocked because of many connection errors; unblock with ‘mysqladmin flush-hosts’</font></p><ul><li><p>问题原因<br>一般<font color="Orange">max_connect_errors = 10</font>，要调高错误连接的数量</p></li><li><p>解决方法</p></li></ul></li></ol><p>登录到要连接的数据中，进行如下配置</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> show variables like 'max_connect_errors';mysql> set global max_connect_errors = 1000;# 如果想长期生效，并修改my.cnf配置文件mysql> flush hosts;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="redis-系列："><a href="#redis-系列：" class="headerlink" title="redis 系列： "></a><font color="blue">redis 系列： </font></h1><h1 id="hadoop-系列："><a href="#hadoop-系列：" class="headerlink" title="hadoop 系列： "></a><font color="blue">hadoop 系列： </font></h1>]]></content>
      
      
      <categories>
          
          <category> Error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 博客编写</title>
      <link href="/hexo-bo-ke-bian-xie/"/>
      <url>/hexo-bo-ke-bian-xie/</url>
      
        <content type="html"><![CDATA[<h1 id="修改title显示"><a href="#修改title显示" class="headerlink" title="修改title显示"></a><font face="黑体" color="blue" size="6">修改title显示</font></h1><ul><li>修改主题中layout.ejs文件</li><li><ul><li>文件路径：<font color="GoldenRod">themes/matery/layout/layout.ejs</font></li></ul></li></ul><p>修改如下内容：<br><font color="GoldenRod">document.title = “welcome to helen blog” </font> 双引号中的内容替换成你自己想要的</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span> <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span> st<span class="token punctuation">;</span> document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"welcome to helen blog"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Angel of justice"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>效果</strong><br><img src="img/title.png"></p><h1 id="博客增加音乐"><a href="#博客增加音乐" class="headerlink" title="博客增加音乐"></a><font face="黑体" color="green" size="6">博客增加音乐</font></h1><h2 id="修改主页音乐播放器音乐"><a href="#修改主页音乐播放器音乐" class="headerlink" title="修改主页音乐播放器音乐"></a>修改主页音乐播放器音乐</h2><ul><li>修改 <font color="GoldenRod">source/_data/musics.json</font>文件，根据以下内容修改成你自己的</li><li><font color="red">注意：音乐文件需要提前下载并放入到/medias/music/目录下</font></li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"GO Time"</span><span class="token punctuation">,</span>        <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"Mark petrie"</span><span class="token punctuation">,</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/medias/music/gotime.mp3"</span><span class="token punctuation">,</span>        <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"/medias/music/avatars/yequ.jpg"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"风的季节"</span><span class="token punctuation">,</span>        <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"Soler"</span><span class="token punctuation">,</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/medias/music/soler.mp3"</span><span class="token punctuation">,</span>        <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"/medias/music/avatars/yequ.jpg"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>效果</strong><img src="img/homepage.png"></li></ul><h2 id="添加网易云音乐BGM"><a href="#添加网易云音乐BGM" class="headerlink" title="添加网易云音乐BGM"></a><font color="green">添加网易云音乐BGM</font></h2><p>写文章的时候，想插入一段BGM怎么办？</p><p>首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：</p><img src="img/music01.png"><p>复制如下代码：</p><img src="img/music02.png"><p>粘贴到文章里就行了，为了美观，设置一下居中，具体代码如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这里粘贴刚刚复制的代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="添加百度统计和谷歌统计代码"><a href="#添加百度统计和谷歌统计代码" class="headerlink" title="添加百度统计和谷歌统计代码"></a><font color="blue">添加百度统计和谷歌统计代码</font></h1><p>首先打开<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度站长平台</a>，然后点击添加网站，输入网址并选择领域。</p><p>接下来要验证网站所有权，有三种方式，推荐采用HTML标签验证，最简单，将代码复制出来。</p><p>打开themes/matery/layout/_partial/head.ejs，修改下面两行：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baidu-site-verification<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>google-site-verification<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中content内容改成你自己刚刚复制出来的就行了。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown常用方法</title>
      <link href="/markdown-chang-yong-zi-ti-yan-se-lie-biao/"/>
      <url>/markdown-chang-yong-zi-ti-yan-se-lie-biao/</url>
      
        <content type="html"><![CDATA[<p>Markdown 通过简单标记语法，使普通文本内容具有一定格式。但它本身不支持修改字体、字号与颜色等功能的。</p><h1 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h1><p>加粗</p><p>要加粗的文字左右分别用两个*号包起来</p><p>斜体</p><p>要倾斜的文字左右分别用一个*号包起来</p><p>斜体加粗</p><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><p>删除线</p><p>要加删除线的文字左右分别用两个~~号包起来</p><p><strong>示例：</strong></p><pre class="line-numbers language-html"><code class="language-html">**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>效果</strong></p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h1 id="句首缩进"><a href="#句首缩进" class="headerlink" title="句首缩进"></a>句首缩进</h1><pre class="line-numbers language-html"><code class="language-html">半方大的空白 <span class="token entity" title="&ensp;">&amp;ensp;</span>  或 <span class="token entity" title="&#8194;">&amp;#8194;</span>全方大的空白 <span class="token entity" title="&emsp;">&amp;emsp;</span> 或 <span class="token entity" title="&#8195;">&amp;#8195;</span>不断行的空白格 <span class="token entity" title="&nbsp;">&amp;nbsp;</span> 或 <span class="token entity" title="&#160;">&amp;#160;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="设置文字字体大小及颜色"><a href="#设置文字字体大小及颜色" class="headerlink" title="设置文字字体大小及颜色"></a>设置文字字体大小及颜色</h1><ul><li>样例：<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span>red</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>黑体<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是黑体字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>黑体<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是黑体字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>微软雅黑<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是微软雅黑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STCAIYUN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是华文彩云<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span>black</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span>4</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>黑体<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>黑体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span>#00ffff</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span>3</span><span class="token punctuation">></span></span>null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span>gray</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span>5</span><span class="token punctuation">></span></span>gray<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <font color="red" face="黑体">我是黑体字</font><br>  <font face="黑体">我是黑体字</font><br>  <font face="微软雅黑">我是微软雅黑</font><br>  <font face="STCAIYUN">我是华文彩云</font><br>  <font color="black" size="4" face="黑体">黑体</font><br>  <font color="#00ffff" size="3">null</font><br>  <font color="gray" size="5">gray</font></li></ul><h1 id="设置文字背景颜色"><a href="#设置文字背景颜色" class="headerlink" title="设置文字背景颜色"></a>设置文字背景颜色</h1><p><code>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt; 注意：我的背景颜色是黄色。&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code><br>    <table><tr><td bgcolor="yellow"> 注意：我的背景颜色是黄色。</td></tr></table></p><h1 id="设置单元格背景颜色"><a href="#设置单元格背景颜色" class="headerlink" title="设置单元格背景颜色"></a>设置单元格背景颜色</h1><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>方法说明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>颜色名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>颜色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hotpink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>此处实现方法利用 CSDN-markdown 内嵌 html 语言的优势<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hotpink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hotpink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hotpink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>rgb(240, 248, 255)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Pink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>借助 table, tr, td 等表格标签的 bgcolor 属性实现背景色设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>AntiqueWhite<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Pink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>rgb(255, 192, 203)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><tbody>    <tr>        <th>方法说明</th><th>颜色名称</th><th>颜色</th>    </tr>    <tr>        <td><font color="Hotpink">此处实现方法利用 CSDN-markdown 内嵌 html 语言的优势</font></td><td><font color="Hotpink">Hotpink</font></td><td bgcolor="Hotpink">rgb(240, 248, 255)</td>    </tr>    <tr>        <td><font color="Pink">借助 table, tr, td 等表格标签的 bgcolor 属性实现背景色设置</font></td><td><font color="pink">AntiqueWhite</font></td><td bgcolor="Pink">rgb(255, 192, 203)</td>    </tr></tbody></table><hr><h1 id="颜色列表"><a href="#颜色列表" class="headerlink" title="颜色列表"></a><font face="黑体" color="green" size="6">颜色列表</font></h1><table><tbody>    <tr>        <th>颜色名</th><th>十六进制颜色值</th><th>颜色</th>    </tr>    <tr>        <td><font color="AliceBlue">AliceBlue</font></td><td><font color="AliceBlue">#F0F8FF</font></td><td bgcolor="AliceBlue">rgb(240, 248, 255)</td>    </tr>    <tr>        <td><font color="AntiqueWhite">AntiqueWhite</font></td><td><font color="AntiqueWhite">#FAEBD7</font></td><td bgcolor="AntiqueWhite">rgb(250, 235, 215)</td>    </tr>    <tr>        <td><font color="Aqua">Aqua</font></td><td><font color="Aqua">#00FFFF</font></td><td bgcolor="Aqua">rgb(0, 255, 255)</td>    </tr>    <tr>        <td><font color="Aquamarine">Aquamarine</font></td><td><font color="Aquamarine">#7FFFD4</font></td><td bgcolor="Aquamarine">rgb(127, 255, 212)</td>    </tr>    <tr>        <td><font color="Azure">Azure</font></td><td><font color="Azure">#F0FFFF</font></td><td bgcolor="Azure">rgb(240, 255, 255)</td>    </tr>    <tr>        <td><font color="Beige">Beige</font></td><td><font color="Beige">#F5F5DC</font></td><td bgcolor="Beige">rgb(245, 245, 220)</td>    </tr>    <tr>        <td><font color="Bisque">Bisque</font></td><td><font color="Bisque">#FFE4C4</font></td><td bgcolor="Bisque">rgb(255, 228, 196)</td>    </tr>    <tr>        <td><font color="Black">Black</font></td><td><font color="Black">#000000</font></td><td bgcolor="Black">rgb(0, 0, 0)</td>    </tr>    <tr>        <td><font color="BlanchedAlmond">BlanchedAlmond</font></td><td><font color="BlanchedAlmond">#FFEBCD</font></td><td bgcolor="BlanchedAlmond">rgb(255, 235, 205)</td>    </tr>    <tr>        <td><font color="Blue">Blue</font></td><td><font color="Blue">#0000FF</font></td><td bgcolor="Blue">rgb(0, 0, 255)</td>    </tr>    <tr>        <td><font color="BlueViolet">BlueViolet</font></td><td><font color="BlueViolet">#8A2BE2</font></td><td bgcolor="BlueViolet">rgb(138, 43, 226)</td>    </tr>    <tr>        <td><font color="Brown">Brown</font></td><td><font color="Brown">#A52A2A</font></td><td bgcolor="Brown">rgb(165, 42, 42)</td>    </tr>    <tr>        <td><font color="BurlyWood">BurlyWood</font></td><td><font color="BurlyWood">#DEB887</font></td><td bgcolor="BurlyWood">rgb(222, 184, 135)</td>    </tr>    <tr>        <td><font color="CadetBlue">CadetBlue</font></td><td><font color="CadetBlue">#5F9EA0</font></td><td bgcolor="CadetBlue">rgb(95, 158, 160)</td>    </tr>    <tr>        <td><font color="Chartreuse">Chartreuse</font></td><td><font color="Chartreuse">#7FFF00</font></td><td bgcolor="Chartreuse">rgb(127, 255, 0)</td>    </tr>    <tr>        <td><font color="Chocolate">Chocolate</font></td><td><font color="Chocolate">#D2691E</font></td><td bgcolor="Chocolate">rgb(210, 105, 30)</td>    </tr>    <tr>        <td><font color="Coral">Coral</font></td><td><font color="Coral">#FF7F50</font></td><td bgcolor="Coral">rgb(255, 127, 80)</td>    </tr>    <tr>        <td><font color="CornflowerBlue">CornflowerBlue</font></td><td><font color="CornflowerBlue">#6495ED</font></td><td bgcolor="CornflowerBlue">rgb(100, 149, 237)</td>    </tr>    <tr>        <td><font color="Cornsilk">Cornsilk</font></td><td><font color="Cornsilk">#FFF8DC</font></td><td bgcolor="Cornsilk">rgb(255, 248, 220)</td>    </tr>    <tr>        <td><font color="Crimson">Crimson</font></td><td><font color="Crimson">#DC143C</font></td><td bgcolor="Crimson">rgb(220, 20, 60)</td>    </tr>    <tr>        <td><font color="Cyan">Cyan</font></td><td><font color="Cyan">#00FFFF</font></td><td bgcolor="Cyan">rgb(0, 255, 255)</td>    </tr>    <tr>        <td><font color="DarkBlue">DarkBlue</font></td><td><font color="DarkBlue">#00008B</font></td><td bgcolor="DarkBlue">rgb(0, 0, 139)</td>    </tr>    <tr>        <td><font color="DarkCyan">DarkCyan</font></td><td><font color="DarkCyan">#008B8B</font></td><td bgcolor="DarkCyan">rgb(0, 139, 139)</td>    </tr>    <tr>        <td><font color="DarkGoldenRod">DarkGoldenRod</font></td><td><font color="DarkGoldenRod">#B8860B</font></td><td bgcolor="DarkGoldenRod">rgb(184, 134, 11)</td>    </tr>    <tr>        <td><font color="DarkGray">DarkGray</font></td><td><font color="DarkGray">#A9A9A9</font></td><td bgcolor="DarkGray">rgb(169, 169, 169)</td>    </tr>    <tr>        <td><font color="DarkGreen">DarkGreen</font></td><td><font color="DarkGreen">#006400</font></td><td bgcolor="DarkGreen">rgb(0, 100, 0)</td>    </tr>    <tr>        <td><font color="DarkKhaki">DarkKhaki</font></td><td><font color="DarkKhaki">#BDB76B</font></td><td bgcolor="DarkKhaki">rgb(189, 183, 107)</td>    </tr>    <tr>        <td><font color="DarkMagenta">DarkMagenta</font></td><td><font color="DarkMagenta">#8B008B</font></td><td bgcolor="DarkMagenta">rgb(139, 0, 139)</td>    </tr>    <tr>        <td><font color="DarkOliveGreen">DarkOliveGreen</font></td><td><font color="DarkOliveGreen">#556B2F</font></td><td bgcolor="DarkOliveGreen">rgb(85, 107, 47)</td>    </tr>    <tr>        <td><font color="Darkorange">Darkorange</font></td><td><font color="Darkorange">#FF8C00</font></td><td bgcolor="Darkorange">rgb(255, 140, 0)</td>    </tr>    <tr>        <td><font color="DarkOrchid">DarkOrchid</font></td><td><font color="DarkOrchid">#9932CC</font></td><td bgcolor="DarkOrchid">rgb(153, 50, 204)</td>    </tr>    <tr>        <td><font color="DarkRed">DarkRed</font></td><td><font color="DarkRed">#8B0000</font></td><td bgcolor="DarkRed">rgb(139, 0, 0)</td>    </tr>    <tr>        <td><font color="DarkSalmon">DarkSalmon</font></td><td><font color="DarkSalmon">#E9967A</font></td><td bgcolor="DarkSalmon">rgb(233, 150, 122)</td>    </tr>    <tr>        <td><font color="DarkSeaGreen">DarkSeaGreen</font></td><td><font color="DarkSeaGreen">#8FBC8F</font></td><td bgcolor="DarkSeaGreen">rgb(143, 188, 143)</td>    </tr>    <tr>        <td><font color="DarkSlateBlue">DarkSlateBlue</font></td><td><font color="DarkSlateBlue">#483D8B</font></td><td bgcolor="DarkSlateBlue">rgb(72, 61, 139)</td>    </tr>    <tr>        <td><font color="DarkSlateGray">DarkSlateGray</font></td><td><font color="DarkSlateGray">#2F4F4F</font></td><td bgcolor="DarkSlateGray">rgb(47, 79, 79)</td>    </tr>    <tr>        <td><font color="DarkTurquoise">DarkTurquoise</font></td><td><font color="DarkTurquoise">#00CED1</font></td><td bgcolor="DarkTurquoise">rgb(0, 206, 209)</td>    </tr>    <tr>        <td><font color="DarkViolet">DarkViolet</font></td><td><font color="DarkViolet">#9400D3</font></td><td bgcolor="DarkViolet">rgb(148, 0, 211)</td>    </tr>    <tr>        <td><font color="DeepPink">DeepPink</font></td><td><font color="DeepPink">#FF1493</font></td><td bgcolor="DeepPink">rgb(255, 20, 147)</td>    </tr>    <tr>        <td><font color="DeepSkyBlue">DeepSkyBlue</font></td><td><font color="DeepSkyBlue">#00BFFF</font></td><td bgcolor="DeepSkyBlue">rgb(0, 191, 255)</td>    </tr>    <tr>        <td><font color="DimGray">DimGray</font></td><td><font color="DimGray">#696969</font></td><td bgcolor="DimGray">rgb(105, 105, 105)</td>    </tr>    <tr>        <td><font color="DodgerBlue">DodgerBlue</font></td><td><font color="DodgerBlue">#1E90FF</font></td><td bgcolor="DodgerBlue">rgb(30, 144, 255)</td>    </tr>    <tr>        <td><font color="Feldspar">Feldspar</font></td><td><font color="Feldspar">#D19275</font></td><td bgcolor="Feldspar">rgb(209, 146, 117)</td>    </tr>    <tr>        <td><font color="FireBrick">FireBrick</font></td><td><font color="FireBrick">#B22222</font></td><td bgcolor="FireBrick">rgb(178, 34, 34)</td>    </tr>    <tr>        <td><font color="FloralWhite">FloralWhite</font></td><td><font color="FloralWhite">#FFFAF0</font></td><td bgcolor="FloralWhite">rgb(255, 250, 240)</td>    </tr>    <tr>        <td><font color="ForestGreen">ForestGreen</font></td><td><font color="ForestGreen">#228B22</font></td><td bgcolor="ForestGreen">rgb(34, 139, 34)</td>    </tr>    <tr>        <td><font color="Fuchsia">Fuchsia</font></td><td><font color="Fuchsia">#FF00FF</font></td><td bgcolor="Fuchsia">rgb(255, 0, 255)</td>    </tr>    <tr>        <td><font color="Gainsboro">Gainsboro</font></td><td><font color="Gainsboro">#DCDCDC</font></td><td bgcolor="Gainsboro">rgb(220, 220, 220)</td>    </tr>    <tr>        <td><font color="GhostWhite">GhostWhite</font></td><td><font color="GhostWhite">#F8F8FF</font></td><td bgcolor="GhostWhite">rgb(248, 248, 255)</td>    </tr>    <tr>        <td><font color="Gold">Gold</font></td><td><font color="Gold">#FFD700</font></td><td bgcolor="Gold">rgb(255, 215, 0)</td>    </tr>    <tr>        <td><font color="GoldenRod">GoldenRod</font></td><td><font color="GoldenRod">#DAA520</font></td><td bgcolor="GoldenRod">rgb(218, 165, 32)</td>    </tr>    <tr>        <td><font color="Gray">Gray</font></td><td><font color="Gray">#808080</font></td><td bgcolor="Gray">rgb(128, 128, 128)</td>    </tr>    <tr>        <td><font color="Green">Green</font></td><td><font color="Green">#008000</font></td><td bgcolor="Green">rgb(0, 128, 0)</td>    </tr>    <tr>        <td><font color="GreenYellow">GreenYellow</font></td><td><font color="GreenYellow">#ADFF2F</font></td><td bgcolor="GreenYellow">rgb(173, 255, 47)</td>    </tr>    <tr>        <td><font color="HoneyDew">HoneyDew</font></td><td><font color="HoneyDew">#F0FFF0</font></td><td bgcolor="HoneyDew">rgb(240, 255, 240)</td>    </tr>    <tr>        <td><font color="HotPink">HotPink</font></td><td><font color="HotPink">#FF69B4</font></td><td bgcolor="HotPink">rgb(255, 105, 180)</td>    </tr>    <tr>        <td><font color="IndianRed">IndianRed</font></td><td><font color="IndianRed">#CD5C5C</font></td><td bgcolor="IndianRed">rgb(205, 92, 92)</td>    </tr>    <tr>        <td><font color="Indigo">Indigo</font></td><td><font color="Indigo">#4B0082</font></td><td bgcolor="Indigo">rgb(75, 0, 130)</td>    </tr>    <tr>        <td><font color="Ivory">Ivory</font></td><td><font color="Ivory">#FFFFF0</font></td><td bgcolor="Ivory">rgb(255, 255, 240)</td>    </tr>    <tr>        <td><font color="Khaki">Khaki</font></td><td><font color="Khaki">#F0E68C</font></td><td bgcolor="Khaki">rgb(240, 230, 140)</td>    </tr>    <tr>        <td><font color="Lavender">Lavender</font></td><td><font color="Lavender">#E6E6FA</font></td><td bgcolor="Lavender">rgb(230, 230, 250)</td>    </tr>    <tr>        <td><font color="LavenderBlush">LavenderBlush</font></td><td><font color="LavenderBlush">#FFF0F5</font></td><td bgcolor="LavenderBlush">rgb(255, 240, 245)</td>    </tr>    <tr>        <td><font color="LawnGreen">LawnGreen</font></td><td><font color="LawnGreen">#7CFC00</font></td><td bgcolor="LawnGreen">rgb(124, 252, 0)</td>    </tr>    <tr>        <td><font color="LemonChiffon">LemonChiffon</font></td><td><font color="LemonChiffon">#FFFACD</font></td><td bgcolor="LemonChiffon">rgb(255, 250, 205)</td>    </tr>    <tr>        <td><font color="LightBlue">LightBlue</font></td><td><font color="LightBlue">#ADD8E6</font></td><td bgcolor="LightBlue">rgb(173, 216, 230)</td>    </tr>    <tr>        <td><font color="LightCoral">LightCoral</font></td><td><font color="LightCoral">#F08080</font></td><td bgcolor="LightCoral">rgb(240, 128, 128)</td>    </tr>    <tr>        <td><font color="LightCyan">LightCyan</font></td><td><font color="LightCyan">#E0FFFF</font></td><td bgcolor="LightCyan">rgb(224, 255, 255)</td>    </tr>    <tr>        <td><font color="LightGoldenRodYellow">LightGoldenRodYellow</font></td><td><font color="LightGoldenRodYellow">#FAFAD2</font></td><td bgcolor="LightGoldenRodYellow">rgb(250, 250, 210)</td>    </tr>    <tr>        <td><font color="LightGrey">LightGrey</font></td><td><font color="LightGrey">#D3D3D3</font></td><td bgcolor="LightGrey">rgb(211, 211, 211)</td>    </tr>    <tr>        <td><font color="LightGreen">LightGreen</font></td><td><font color="LightGreen">#90EE90</font></td><td bgcolor="LightGreen">rgb(144, 238, 144)</td>    </tr>    <tr>        <td><font color="LightPink">LightPink</font></td><td><font color="LightPink">#FFB6C1</font></td><td bgcolor="LightPink">rgb(255, 182, 193)</td>    </tr>    <tr>        <td><font color="LightSalmon">LightSalmon</font></td><td><font color="LightSalmon">#FFA07A</font></td><td bgcolor="LightSalmon">rgb(255, 160, 122)</td>    </tr>    <tr>        <td><font color="LightSeaGreen">LightSeaGreen</font></td><td><font color="LightSeaGreen">#20B2AA</font></td><td bgcolor="LightSeaGreen">rgb(32, 178, 170)</td>    </tr>    <tr>        <td><font color="LightSkyBlue">LightSkyBlue</font></td><td><font color="LightSkyBlue">#87CEFA</font></td><td bgcolor="LightSkyBlue">rgb(135, 206, 250)</td>    </tr>    <tr>        <td><font color="LightSlateBlue">LightSlateBlue</font></td><td><font color="LightSlateBlue">#8470FF</font></td><td bgcolor="LightSlateBlue">rgb(132, 112, 255)</td>    </tr>    <tr>        <td><font color="LightSlateGray">LightSlateGray</font></td><td><font color="LightSlateGray">#778899</font></td><td bgcolor="LightSlateGray">rgb(119, 136, 153)</td>    </tr>    <tr>        <td><font color="LightSteelBlue">LightSteelBlue</font></td><td><font color="LightSteelBlue">#B0C4DE</font></td><td bgcolor="LightSteelBlue">rgb(176, 196, 222)</td>    </tr>    <tr>        <td><font color="LightYellow">LightYellow</font></td><td><font color="LightYellow">#FFFFE0</font></td><td bgcolor="LightYellow">rgb(255, 255, 224)</td>    </tr>    <tr>        <td><font color="Lime">Lime</font></td><td><font color="Lime">#00FF00</font></td><td bgcolor="Lime">rgb(0, 255, 0)</td>    </tr>    <tr>        <td><font color="LimeGreen">LimeGreen</font></td><td><font color="LimeGreen">#32CD32</font></td><td bgcolor="LimeGreen">rgb(50, 205, 50)</td>    </tr>    <tr>        <td><font color="Linen">Linen</font></td><td><font color="Linen">#FAF0E6</font></td><td bgcolor="Linen">rgb(250, 240, 230)</td>    </tr>    <tr>        <td><font color="Magenta">Magenta</font></td><td><font color="Magenta">#FF00FF</font></td><td bgcolor="Magenta">rgb(255, 0, 255)</td>    </tr>    <tr>        <td><font color="Maroon">Maroon</font></td><td><font color="Maroon">#800000</font></td><td bgcolor="Maroon">rgb(128, 0, 0)</td>    </tr>    <tr>        <td><font color="MediumAquaMarine">MediumAquaMarine</font></td><td><font color="MediumAquaMarine">#66CDAA</font></td><td bgcolor="MediumAquaMarine">rgb(102, 205, 170)</td>    </tr>    <tr>        <td><font color="MediumBlue">MediumBlue</font></td><td><font color="MediumBlue">#0000CD</font></td><td bgcolor="MediumBlue">rgb(0, 0, 205)</td>    </tr>    <tr>        <td><font color="MediumOrchid">MediumOrchid</font></td><td><font color="MediumOrchid">#BA55D3</font></td><td bgcolor="MediumOrchid">rgb(186, 85, 211)</td>    </tr>    <tr>        <td><font color="MediumPurple">MediumPurple</font></td><td><font color="MediumPurple">#9370D8</font></td><td bgcolor="MediumPurple">rgb(147, 112, 216)</td>    </tr>    <tr>        <td><font color="MediumSeaGreen">MediumSeaGreen</font></td><td><font color="MediumSeaGreen">#3CB371</font></td><td bgcolor="MediumSeaGreen">rgb(60, 179, 113)</td>    </tr>    <tr>        <td><font color="MediumSlateBlue">MediumSlateBlue</font></td><td><font color="MediumSlateBlue">#7B68EE</font></td><td bgcolor="MediumSlateBlue">rgb(123, 104, 238)</td>    </tr>    <tr>        <td><font color="MediumSpringGreen">MediumSpringGreen</font></td><td><font color="MediumSpringGreen">#00FA9A</font></td><td bgcolor="MediumSpringGreen">rgb(0, 250, 154)</td>    </tr>    <tr>        <td><font color="MediumTurquoise">MediumTurquoise</font></td><td><font color="MediumTurquoise">#48D1CC</font></td><td bgcolor="MediumTurquoise">rgb(72, 209, 204)</td>    </tr>    <tr>        <td><font color="MediumVioletRed"><mediumvioletred font></mediumvioletred></font></td><td><font color="MediumVioletRed">#C71585</font></td><td bgcolor="MediumVioletRed">rgb(199, 21, 133)</td>    </tr>    <tr>        <td><font color="MidnightBlue">MidnightBlue</font></td><td><font color="MidnightBlue">#191970</font></td><td bgcolor="MidnightBlue">rgb(25, 25, 112)</td>    </tr>    <tr>        <td><font color="MintCream">MintCream</font></td><td><font color="MintCream">#F5FFFA</font></td><td bgcolor="MintCream">rgb(245, 255, 250)</td>    </tr>    <tr>        <td><font color="MistyRose">MistyRose</font></td><td><font color="MistyRose">#FFE4E1</font></td><td bgcolor="MistyRose">rgb(255, 228, 225)</td>    </tr>    <tr>        <td><font color="Moccasin">Moccasin</font></td><td><font color="Moccasin">#FFE4B5</font></td><td bgcolor="Moccasin">rgb(255, 228, 181)</td>    </tr>    <tr>        <td><font color="NavajoWhite">NavajoWhite</font></td><td><font color="NavajoWhite">#FFDEAD</font></td><td bgcolor="NavajoWhite">rgb(255, 222, 173)</td>    </tr>    <tr>        <td><font color="Navy">Navy</font></td><td><font color="Navy">#000080</font></td><td bgcolor="Navy">rgb(0, 0, 128)</td>    </tr>    <tr>        <td><font color="OldLace">OldLace</font></td><td><font color="OldLace">#FDF5E6</font></td><td bgcolor="OldLace">rgb(253, 245, 230)</td>    </tr>    <tr>        <td><font color="Olive"></font></td><td><font color="Olive">#808000</font></td><td bgcolor="Olive">rgb(128, 128, 0)</td>    </tr>    <tr>        <td><font color="OliveDrab">OliveDrab</font></td><td><font color="OliveDrab">#6B8E23</font></td><td bgcolor="OliveDrab">rgb(107, 142, 35)</td>    </tr>    <tr>        <td><font color="Orange">Orange</font></td><td><font color="Orange">#FFA500</font></td><td bgcolor="Orange">rgb(255, 165, 0)</td>    </tr>    <tr>        <td><font color="OrangeRed">OrangeRed</font></td><td><font color="OrangeRed">#FF4500</font></td><td bgcolor="OrangeRed">rgb(255, 69, 0)</td>    </tr>    <tr>        <td><font color="Orchid">Orchid</font></td><td><font color="Orchid">#DA70D6</font></td><td bgcolor="Orchid">rgb(218, 112, 214)</td>    </tr>    <tr>        <td><font color="PaleGoldenRod">PaleGoldenRod</font></td><td><font color="PaleGoldenRod">#EEE8AA</font></td><td bgcolor="PaleGoldenRod">rgb(238, 232, 170)</td>    </tr>    <tr>        <td><font color="PaleGreen">PaleGreen</font></td><td><font color="PaleGreen">#98FB98</font></td><td bgcolor="PaleGreen">rgb(152, 251, 152)</td>    </tr>    <tr>        <td><font color="PaleTurquoise">PaleTurquoise</font></td><td><font color="PaleTurquoise">#AFEEEE</font></td><td bgcolor="PaleTurquoise">rgb(175, 238, 238)</td>    </tr>    <tr>        <td><font color="PaleVioletRed">PaleVioletRed</font></td><td><font color>#D87093</font></td><td bgcolor="PaleVioletRed">rgb(216, 112, 147)</td>    </tr>    <tr>        <td><font color="PapayaWhip">PapayaWhip</font></td><td><font color="PapayaWhip">#FFEFD5</font></td><td bgcolor="PapayaWhip">rgb(255, 239, 213)</td>    </tr>    <tr>        <td><font color="PeachPuff">PeachPuff</font></td><td><font color="PeachPuff">#FFDAB9</font></td><td bgcolor="PeachPuff">rgb(255, 218, 185)</td>    </tr>    <tr>        <td><font color="Peru">Peru</font></td><td><font color="Peru">#CD853F</font></td><td bgcolor="Peru">rgb(205, 133, 63)</td>    </tr>    <tr>        <td><font color="Pink">Pink</font></td><td><font color="Pink">#FFC0CB</font></td><td bgcolor="Pink">rgb(255, 192, 203)</td>    </tr>    <tr>        <td><font color="Plum">Plum</font></td><td><font color="Plum">#DDA0DD</font></td><td bgcolor="Plum">rgb(221, 160, 221)</td>    </tr>    <tr>        <td><font color="PowderBlue">PowderBlue</font></td><td><font color="PowderBlue">#B0E0E6</font></td><td bgcolor="PowderBlue">rgb(176, 224, 230)</td>    </tr>    <tr>        <td><font color="Purple">Purple</font></td><td><font color="Purple">#800080</font></td><td bgcolor="Purple">rgb(128, 0, 128)</td>    </tr>    <tr>        <td><font color="Red">Red</font></td><td><font color="Red">#FF0000</font></td><td bgcolor="Red">rgb(255, 0, 0)</td>    </tr>    <tr>        <td><font color="RosyBrown">RosyBrown</font></td><td><font color="RosyBrown">#BC8F8F</font></td><td bgcolor="RosyBrown">rgb(188, 143, 143)</td>    </tr>    <tr>        <td><font color="RoyalBlue">RoyalBlue</font></td><td><font color="RoyalBlue">#4169E1</font></td><td bgcolor="RoyalBlue">rgb(65, 105, 225)</td>    </tr>    <tr>        <td><font color="SaddleBrown">SaddleBrown</font></td><td><font color="SaddleBrown">#8B4513</font></td><td bgcolor="SaddleBrown">rgb(139, 69, 19)</td>    </tr>    <tr>        <td><font color="Salmon">Salmon</font></td><td><font color="Salmon">#FA8072</font></td><td bgcolor="Salmon">rgb(250, 128, 114)</td>    </tr>    <tr>        <td><font color="SandyBrown">SandyBrown</font></td><td><font color="SandyBrown">#F4A460</font></td><td bgcolor="SandyBrown">rgb(244, 164, 96)</td>    </tr>    <tr>        <td><font color="SeaGreen">SeaGreen</font></td><td><font color="SeaGreen">#2E8B57</font></td><td bgcolor="SeaGreen">rgb(46, 139, 87)</td>    </tr>    <tr>        <td><font color="SeaShell">SeaShell</font></td><td><font color="SeaShell">#FFF5EE</font></td><td bgcolor="SeaShell">rgb(255, 245, 238)</td>    </tr>    <tr>        <td><font color="Sienna">Sienna</font></td><td><font color="Sienna">#A0522D</font></td><td bgcolor="Sienna">rgb(160, 82, 45)</td>    </tr>    <tr>        <td><font color="Silver">Silver</font></td><td><font color="Silver">#C0C0C0</font></td><td bgcolor="Silver">rgb(192, 192, 192)</td>    </tr>    <tr>        <td><font color="SkyBlue">SkyBlue</font></td><td><font color="SkyBlue">#87CEEB</font></td><td bgcolor="SkyBlue">rgb(135, 206, 235)</td>    </tr>    <tr>        <td><font color="SlateBlue">SlateBlue</font></td><td><font color="SlateBlue">#6A5ACD</font></td><td bgcolor="SlateBlue">rgb(106, 90, 205)</td>    </tr>    <tr>        <td><font color="SlateGray">SlateGray</font></td><td><font color="SlateGray">#708090</font></td><td bgcolor="SlateGray">rgb(112, 128, 144)</td>    </tr>    <tr>        <td><font color="Snow">Snow</font></td><td><font color="Snow">#FFFAFA</font></td><td bgcolor="Snow">rgb(255, 250, 250)</td>    </tr>    <tr>        <td><font color="SpringGreen">SpringGreen</font></td><td><font color="SpringGreen">#00FF7F</font></td><td bgcolor="SpringGreen">rgb(0, 255, 127)</td>    </tr>    <tr>        <td><font color="SteelBlue">SteelBlue</font></td><td><font color="SteelBlue">#4682B4</font></td><td bgcolor="SteelBlue">rgb(70, 130, 180)</td>    </tr>    <tr>        <td><font color="Tan">Tan</font></td><td><font color="Tan">#D2B48C</font></td><td bgcolor="Tan">rgb(210, 180, 140)</td>    </tr>    <tr>        <td><font color="Teal">Teal</font></td><td><font color="Teal">#008080</font></td><td bgcolor="Teal">rgb(0, 128, 128)</td>    </tr>    <tr>        <td><font color="Thistle">Thistle</font></td><td><font color="Thistle">#D8BFD8</font></td><td bgcolor="Thistle">rgb(216, 191, 216)</td>    </tr>    <tr>        <td><font color="Tomato">Tomato</font></td><td><font color="Tomato">#FF6347</font></td><td bgcolor="Tomato">rgb(255, 99, 71)</td>    </tr>    <tr>        <td><font color="Turquoise">Turquoise</font></td><td><font color="Turquoise">#40E0D0</font></td><td bgcolor="Turquoise">rgb(64, 224, 208)</td>    </tr>    <tr>        <td><font color="Violet">Violet</font></td><td><font color="Violet">#EE82EE</font></td><td bgcolor="Violet">rgb(238, 130, 238)</td>    </tr>    <tr>        <td><font color="VioletRed"></font></td><td><font color="VioletRed">#D02090</font></td><td bgcolor="VioletRed">rgb(208, 32, 144)</td>    </tr>    <tr>        <td><font color="Wheat">Wheat</font></td><td><font color="Wheat">#F5DEB3</font></td><td bgcolor="Wheat">rgb(245, 222, 179)</td>    </tr>    <tr>        <td><font color="White">White</font></td><td><font color="White">#FFFFFF</font></td><td bgcolor="White">rgb(255, 255, 255)</td>    </tr>    <tr>        <td><font color="WhiteSmoke">WhiteSmoke</font></td><td><font color="WhiteSmoke">#F5F5F5</font></td><td bgcolor="WhiteSmoke">rgb(245, 245, 245)</td>    </tr>    <tr>        <td><font color="Yellow">Yellow</font></td><td><font color="Yellow">#FFFF00</font></td><td bgcolor="Yellow">rgb(255, 255, 0)</td>    </tr>    <tr>        <td><font color="YellowGreen">YellowGreen</font></td><td><font color="YellowGreen">#9ACD32</font></td><td bgcolor="YellowGreen">rgb(154, 205, 50)</td>    </tr></tbody></table>           <h1 id="常用颜色"><a href="#常用颜色" class="headerlink" title="常用颜色"></a><font face="黑体" color="green" size="6">常用颜色</font></h1><p><font color="maroon">color=maroon<br><font color="grey">color=grey<br><font color="silver">color=silver<br><font color="lightgrey">color=lightgrey<br><font color="HotPink">color=HotPink<br><font color="DeepPink">color=DeepPink<br><font color="VioletRed">color=VioletRed<br><font color="Purple">color=Purple<br><font color="navy">color=navy<br><font color="Blue">color=Blue<br><font color="DeepSkyBlue">color=DeepSkyBlue<br><font color="LightSkyBlue">color=LightSkyBlue<br><font color="aqua">color=aqua<br><font color="DarkTurquoise">color=DarkTurquoise（#00CED1）<br><font color="LightSeaGreen">color=LightSeaGreen<br><font color="YellowGreen">color=YellowGreen<br><font color="LawnGreen">color=LawnGreen<br><font color="GreenYellow">color=GreenYellow<br><font color="Yellow">color=Yellow<br><font color="Tomato">color=Tomato<br><font color="red">color=red<br><font color="fuchsia">color=fuchsia<br><font color="MediumOrchid">color=MediumOrchid<br><font color="DarkViolet">color=DarkViolet</font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></p><h1 id="单元格设置"><a href="#单元格设置" class="headerlink" title="单元格设置"></a>单元格设置</h1><h2 id="单元格和表头"><a href="#单元格和表头" class="headerlink" title="单元格和表头"></a>单元格和表头</h2><p> 使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行：</p><ul><li>语法</li></ul><pre class="line-numbers language-html"><code class="language-html">表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>示例：</li></ul><pre class="line-numbers language-html"><code class="language-html">姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>效果</li></ul><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h2 id="跨行表格"><a href="#跨行表格" class="headerlink" title="跨行表格"></a>跨行表格</h2><ul><li>实现方法<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我占了三行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>第一列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>第二列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>第三列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第一列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第二列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第三列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第一列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第二列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第三列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现效果<table><tbody>  <tr>      <th rowspan="3">我占了三行</th>      <th>第一列</th>      <th>第二列</th>      <th>第三列</th>  </tr>  <tr>      <td>第一列</td>      <td>第二列</td>      <td>第三列</td>  </tr>  <tr>      <td>第一列</td>      <td>第二列</td>      <td>第三列</td>  </tr></tbody></table>  </li></ul><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>语法：<br>无序列表用 - + * 任何一种都可以</li></ul><pre class="line-numbers language-html"><code class="language-html">- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>效果</strong></p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ul><li>语法：</li><li><ul><li>数字加点</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html">1. 列表内容2. 列表内容3. 列表内容注意：序号跟内容之间要有空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>效果</strong></p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p>上一级和下一级之间敲三个空格即可</p><p><strong>效果</strong></p><ul><li>一级无序列表内容</li><li><ul><li>二级无序列表内容</li></ul></li><li><ul><li><ul><li>三级无序列表内容</li></ul></li></ul></li></ul><p>一级有序列表内容</p><ol><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ol><p>一级无序列表内容</p><ul><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ul><p>一级无序列表内容</p><ul><li><ul><li>二级无序列表内容</li></ul></li><li><ul><li>二级无序列表内容</li></ul></li><li><ul><li>二级无序列表内容</li></ul></li></ul><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><ul><li>语法<pre class="line-numbers language-html"><code class="language-html">[超链接名](超链接地址 "超链接title")title可加可不加<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><strong>示例</strong></p><pre class="line-numbers language-html"><code class="language-html">[简书](http://jianshu.com)[百度](http://baidu.com)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>效果</strong></p><p><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><ul><li>语法</li></ul><pre class="line-numbers language-html"><code class="language-html">![图片alt](图片地址 ''图片title'')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</p><p><strong>示例</strong></p><pre class="line-numbers language-html"><code class="language-html">![南开大学](https://www.nankai.edu.cn/_upload/article/images/3e/ef/e4b9c1aa44a28e5f371ee65451b4/9d9e9b05-2622-40ed-9d9d-f6136b6444cf.jpg "南开")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>效果</strong></p><p><img src="https://www.nankai.edu.cn/_upload/article/images/3e/ef/e4b9c1aa44a28e5f371ee65451b4/9d9e9b05-2622-40ed-9d9d-f6136b6444cf.jpg" alt="南开大学" title="南开"></p><h2 id="设定图片大小"><a href="#设定图片大小" class="headerlink" title="设定图片大小"></a>设定图片大小</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ht.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>251<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>350<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>效果</strong><br><img src="https://www.nankai.edu.cn/_upload/article/images/3e/ef/e4b9c1aa44a28e5f371ee65451b4/9d9e9b05-2622-40ed-9d9d-f6136b6444cf.jpg" width="100" height="100"></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell下获取文件全路径的方法</title>
      <link href="/shell-xia-huo-qu-wen-jian-quan-lu-jing-de-fang-fa/"/>
      <url>/shell-xia-huo-qu-wen-jian-quan-lu-jing-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="linux-shell-获取文件夹全文绝对路径"><a href="#linux-shell-获取文件夹全文绝对路径" class="headerlink" title="linux shell 获取文件夹全文绝对路径"></a><font face="黑体" color="blue" size="6">linux shell 获取文件夹全文绝对路径</font></h1><ul><li><p>在ls中列出文件的绝对路径</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s#^#<span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>/#"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就是在每行记录的开头加上当前路径</p></li><li><ul><li><font color="red">实例：</font><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看当前目录下的文件全路径，并排除目录的方法</span>ll <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">"^d"</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">"total"</span><span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$NF</span>}'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s#^#<span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>/#"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="ps"><a href="#ps" class="headerlink" title="ps:"></a><font color="red">ps:</font></h3><ul><li><p>在所有行之前/后加入某个字符串</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'s/^/string/g'</span> <span class="token function">file</span><span class="token comment" spellcheck="true">#</span><span class="token function">sed</span> <span class="token string">'s/$/string/g'</span> <span class="token function">file</span><span class="token comment" spellcheck="true">#</span><span class="token function">find</span>  <span class="token variable">$PWD</span> -maxdepth 1  <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">ls</span> -ld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>列出当前目录下的所有文件（包括隐藏文件）的绝对路径， 对目录不做递归</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span>  <span class="token variable">$PWD</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">ls</span> -ld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>install gitlab runner</title>
      <link href="/install-gitlab-runner/"/>
      <url>/install-gitlab-runner/</url>
      
        <content type="html"><![CDATA[<h1 id="Install-GitLab-Runner"><a href="#Install-GitLab-Runner" class="headerlink" title="Install GitLab Runner"></a><font face="黑体" color="green" size="6">Install GitLab Runner</font></h1><hr><h4 id="1、docker-install"><a href="#1、docker-install" class="headerlink" title="1、docker install"></a>1、docker install</h4><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-convenience-script" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-convenience-script</a></p><h4 id="2、runner-install"><a href="#2、runner-install" class="headerlink" title="2、runner install"></a>2、runner install</h4><p><a href="https://docs.gitlab.com/runner/install/linux-repository.html#installing-the-runner" target="_blank" rel="noopener">https://docs.gitlab.com/runner/install/linux-repository.html#installing-the-runner</a></p><p>gitlab-ce-中文版镜像：</p><blockquote><p>docker pull twang2218/gitlab-ce-zh:latest</p></blockquote><h3 id="gitlab-rb文件配置"><a href="#gitlab-rb文件配置" class="headerlink" title="gitlab.rb文件配置"></a>gitlab.rb文件配置</h3><pre class="line-numbers language-rb"><code class="language-rb">external_url 'http://git.****.com'#配置gitlab访问的URL地址gitlab_pages['inplace_chroot'] = truepages_external_url "http://io.****.com"#配置pages相关信息unicorn['port'] = 8084#默认配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动docker-容器"><a href="#启动docker-容器" class="headerlink" title="启动docker 容器"></a>启动docker 容器</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#gitlab-ce运行：</span>docker run -dit \  -p 443:443 -p 80:80 -p 22:22 \  --name gitlab \  -v /****/gitlab/config/:/etc/gitlab \  -v /****/gitlab/logs:/var/log/gitlab \  -v /****/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce<span class="token comment" spellcheck="true">#gitlab-ci gitlab-runner01运行</span>docker run -dit \  --name gitlab-runner --restart always \  -v /****/gitlab-runner/config:/etc/gitlab-runner \  -v /var/run/docker.sock:/var/run/docker.sock gitlab/gitlab-runner:latest<span class="token comment" spellcheck="true">#gitlab-runner02 运行</span>docker run -dit \  --name gitlab-runner \  --restart always \  -v /****/gitlab-runner/gitlab-runner02-config:/etc/gitlab-runner \  -v /var/run/docker.sock:/var/run/docker.sock registry.cn-beijing.aliyuncs.com/***/gitlab-runner:v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="token-查看"><a href="#token-查看" class="headerlink" title="token 查看"></a>token 查看</h3><p><a href="http://git.sys.****.com/admin/runners" target="_blank" rel="noopener">http://git.sys.****.com/admin/runners</a></p><p>vi /etc/gitlab-runner/config.toml</p><blockquote><p>privileged = true</p></blockquote><blockquote><p><a href="https://gitlab.com/" target="_blank" rel="noopener">https://gitlab.com/</a></p></blockquote><blockquote><p>Exf<strong>**</strong></p></blockquote><h3 id="配置runner"><a href="#配置runner" class="headerlink" title="配置runner"></a>配置runner</h3><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it gitlab-runner gitlab-ci-multi-runner register --locked<span class="token operator">=</span><span class="token string">"false"</span> --run-untagged<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>runner信息输出：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">[root@gitlab-ce-local config]# docker exec -it gitlab-runner gitlab-ci-multi-runner register --locked="false" --run-untagged  Runtime platform                                    arch=amd64 os=linux pid=12 revision=a8a019e0  version=12.3.0  Running in system-mode.  Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):  http://git.****.com/  Please enter the gitlab-ci token for this runner:  Geoy-M******  Please enter the gitlab-ci description for this runner:  [6990c9803207]:  Please enter the gitlab-ci tags for this runner (comma separated):  node,maven,docker  Registering runner... succeeded                     runner=Geoy-Mk7  Please enter the executor: docker-ssh, ssh, docker+machine, docker-ssh+machine, custom, parallels, shell, virtualbox, kubernetes, docker:  docker  Please enter the default Docker image (e.g. ruby:2.6):  alpine:latest  Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>runner-配置文件:<br>[root@gitlab-ce-local config]# cat config.toml</li></ul><pre class="line-numbers language-json"><code class="language-json">concurrent = <span class="token number">3</span>check_interval = <span class="token number">0</span><span class="token punctuation">[</span>session_server<span class="token punctuation">]</span>  session_timeout = <span class="token number">1800</span><span class="token punctuation">[</span><span class="token punctuation">[</span>runners<span class="token punctuation">]</span><span class="token punctuation">]</span>  name = <span class="token string">"6990c9803207"</span>  url = <span class="token string">"http://git.*****.com/"</span>  token = <span class="token string">"o******"</span>  executor = <span class="token string">"docker"</span>  <span class="token punctuation">[</span>runners.custom_build_dir<span class="token punctuation">]</span>  <span class="token punctuation">[</span>runners.docker<span class="token punctuation">]</span>    tls_verify = <span class="token boolean">false</span>    image = <span class="token string">"alpine:latest"</span>    privileged = <span class="token boolean">true</span>    disable_entrypoint_overwrite = <span class="token boolean">false</span>    oom_kill_disable = <span class="token boolean">false</span>    disable_cache = <span class="token boolean">false</span>    volumes = <span class="token punctuation">[</span><span class="token string">"/var/run/docker.sock:/var/run/docker.sock"</span><span class="token punctuation">,</span> <span class="token string">"/cache"</span><span class="token punctuation">]</span>    shm_size = <span class="token number">0</span>  <span class="token punctuation">[</span>runners.cache<span class="token punctuation">]</span>    <span class="token punctuation">[</span>runners.cache.s3<span class="token punctuation">]</span>    <span class="token punctuation">[</span>runners.cache.gcs<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置pages"><a href="#配置pages" class="headerlink" title="配置pages"></a>配置pages</h3><p>vim /etc/gitlab/gitlab.rb</p><p>中增加如下信息：</p><pre class="line-numbers language-rb"><code class="language-rb">pages_external_url "http://io.*******.com"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h2><table><thead><tr><th>主机记录</th><th>记录类型</th><th>解析线路</th><th>记录值</th></tr></thead><tbody><tr><td>*.io</td><td>A</td><td>默认</td><td>10.4.<strong>.</strong></td></tr><tr><td>git.sys</td><td>A</td><td>默认</td><td>10.4.<strong>.</strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell ls 输出显示1列</title>
      <link href="/shell-ls-shu-chu-xian-shi-1-lie/"/>
      <url>/shell-ls-shu-chu-xian-shi-1-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="linux-shell-ls-1-列显示文件"><a href="#linux-shell-ls-1-列显示文件" class="headerlink" title="linux shell ls -1 列显示文件"></a><font face="黑体" color="blue" size="6">linux shell ls -1 列显示文件</font></h1><ul><li>说明：<br>   有时候写shell脚本的时候，经常需要将文件以一列的形式列出来，然后再进行<br>for迭代，之前一般用ls+awk来做，其实ls本身就提供这个功能。</li></ul><ul><li>示例如下：<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@nginx-service001 data<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>  autosaas  check  logs  nginx  script  software  windows_251  wwwroot  <span class="token punctuation">[</span>root@nginx-service001 data<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -1</span>  autosaas  check  logs  nginx  script  software  windows_251  wwwroot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker容器日志清理</title>
      <link href="/docker-rong-qi-ri-zhi-qing-li/"/>
      <url>/docker-rong-qi-ri-zhi-qing-li/</url>
      
        <content type="html"><![CDATA[<ul><li><p><font face="黑体" color="green" size="6">设置一个容器服务的日志大小上限</font></p></li><li><p>在启动容器的时候增加一个参数设置该容器的日志大小，及日志驱动</p><p> –log-driver json-file  #日志驱动<br> –log-opt max-size=[0-9+][k|m|g] #文件的大小<br> –log-opt max-file=[0-9+] #文件数量</p></li><li><p>全局设置<br>编辑文件/etc/docker/daemon.json, 增加以下日志的配置</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"log-driver"</span><span class="token operator">:</span><span class="token string">"json-file"</span><span class="token punctuation">,</span><span class="token property">"log-opts"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"max-size"</span><span class="token operator">:</span><span class="token string">"500m"</span><span class="token punctuation">,</span> <span class="token property">"max-file"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  max-size=500m，意味着一个容器日志大小上限是500M，<br>  max-file=3，意味着一个容器有三个日志，分别是id+.json、id+1.json、id+2.json。</p></li><li><p>重启docker守护进程</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl daemon-reloadsystemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><blockquote><table><tr><td bgcolor="yellow"> 注意：设置的日志大小，只对新建的容器有效。</td></tr></table></blockquote>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python install cmdb</title>
      <link href="/python-install-cmdb/"/>
      <url>/python-install-cmdb/</url>
      
        <content type="html"><![CDATA[<p>利用Python 安装部署cmdb</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> subprocess<span class="token keyword">import</span> argparse<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">base</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"{} 执行失败"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">install_docker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base<span class="token punctuation">(</span><span class="token string">"sudo yum install -y yum-utils device-mapper-persistent-data lvm2"</span><span class="token punctuation">)</span>    base<span class="token punctuation">(</span><span class="token string">"sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo"</span><span class="token punctuation">)</span>    base<span class="token punctuation">(</span><span class="token string">"sudo yum makecache fast"</span><span class="token punctuation">)</span>    base<span class="token punctuation">(</span><span class="token string">"sudo yum -y install docker-ce"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"/etc/docker"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        base<span class="token punctuation">(</span><span class="token string">"mkdir -p /etc/docker"</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"/etc/docker/daemon.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'{\n    "registry-mirrors": ["https://9f4w4icn.mirror.aliyuncs.com"] \n}'</span><span class="token punctuation">)</span>    base<span class="token punctuation">(</span><span class="token string">"sudo systemctl daemon-reload"</span><span class="token punctuation">)</span>    base<span class="token punctuation">(</span><span class="token string">"sudo systemctl start docker"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"/var/cmdb/db"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        base<span class="token punctuation">(</span><span class="token string">"sudo mkdir -p /var/cmdb/db"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"/var/cmdb/es"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        base<span class="token punctuation">(</span><span class="token string">"sudo mkdir -p /var/cmdb/es"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_db_container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base<span class="token punctuation">(</span><span class="token string">"sudo docker run --name cmdb-db -d -e MYSQL_ROOT_PASSWORD=cmdbcmdb -v /var/cmdb/db:/var/lib/mysql mysql:5.7.21"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_es_container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base<span class="token punctuation">(</span><span class="token string">"sudo docker run --name cmdb-es -d -v /var/cmdb/es:/usr/share/elasticsearch/data elasticsearch:5.6.8"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base<span class="token punctuation">(</span><span class="token string">"sudo docker run -it --rm --link cmdb-db -e DB_HOST=cmdb-db -e ENV=PRO -e DB_PORT=3306 -e DB_USERNAME=root -e DB_PASSWORD=cmdbcmdb -e DB_NAME=cmdb mingmingtang/cmdb init-db"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_cmdb_container</span><span class="token punctuation">(</span>site_url<span class="token punctuation">,</span> email_host<span class="token punctuation">,</span> email_port<span class="token punctuation">,</span> email_username<span class="token punctuation">,</span> email_password<span class="token punctuation">)</span><span class="token punctuation">:</span>    base<span class="token punctuation">(</span><span class="token string">"sudo docker run -d --name cmdb --link cmdb-db --link cmdb-es -p 80:80 -e ENV=PRO -e SITE_URL={} -e DB_HOST=cmdb-db -e DB_PORT=3306 -e DB_USERNAME=root -e DB_PASSWORD=cmdbcmdb -e DB_NAME=cmdb -e ELASTICSEARCH_HOSTS=cmdb-es -e EMAIL_HOST={} -e EMAIL_PORT={} -e EMAIL_USERNAME={} -e EMAIL_PASSWORD={} mingmingtang/cmdb start"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>site_url<span class="token punctuation">,</span> email_host<span class="token punctuation">,</span> email_port<span class="token punctuation">,</span> email_username<span class="token punctuation">,</span> email_password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">input_para</span><span class="token punctuation">(</span>help<span class="token punctuation">)</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">not</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> input<span class="token punctuation">(</span>help<span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>geteuid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span><span class="token punctuation">(</span><span class="token string">"请以root权限运行"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># parser = argparse.ArgumentParser()</span>    <span class="token comment" spellcheck="true"># parser.add_argument("--siteurl", type=str, help="E.g: http://cmdb.xxx.com, http://172.17.100.1")</span>    <span class="token comment" spellcheck="true"># parser.add_argument("--emailhost", type=str, help="E.g: http://cmdb.xxx.com, http://172.17.100.1")</span>    <span class="token comment" spellcheck="true"># parser.add_argument("--emailport", type=str, help="E.g: http://cmdb.xxx.com, http://172.17.100.1")</span>    <span class="token comment" spellcheck="true"># parser.add_argument("--emailusername", type=str, help="E.g: http://cmdb.xxx.com, http://172.17.100.1")</span>    <span class="token comment" spellcheck="true"># parser.add_argument("--emailpassword", type=str, help="E.g: http://cmdb.xxx.com, http://172.17.100.1")</span>    <span class="token comment" spellcheck="true"># args = parser.parse_args()</span>    <span class="token comment" spellcheck="true"># SITE_URL = args.SITE_URL</span>    site_url <span class="token operator">=</span> input_para<span class="token punctuation">(</span><span class="token string">"请输入网站域名或IP（http://your domain name）："</span><span class="token punctuation">)</span>    email_host <span class="token operator">=</span> input_para<span class="token punctuation">(</span><span class="token string">"网站邮箱服务器（smtp.domain.com）："</span><span class="token punctuation">)</span>    email_port <span class="token operator">=</span> input_para<span class="token punctuation">(</span><span class="token string">"邮箱服务器端口（25）："</span><span class="token punctuation">)</span>    email_username <span class="token operator">=</span> input_para<span class="token punctuation">(</span><span class="token string">"邮箱用户名（user@domain.com）："</span><span class="token punctuation">)</span>    email_password <span class="token operator">=</span> input_para<span class="token punctuation">(</span><span class="token string">"邮箱密码|独立授权码（password）："</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始安装docker"</span><span class="token punctuation">)</span>    install_docker<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始创建目录"</span><span class="token punctuation">)</span>    create_dir<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始运行mysql容器"</span><span class="token punctuation">)</span>    run_db_container<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始运行elasticsearch容器"</span><span class="token punctuation">)</span>    run_es_container<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"等待数据库启动完成(10s)"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始初始化数据库"</span><span class="token punctuation">)</span>    init_db<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始运行cmdb"</span><span class="token punctuation">)</span>    run_cmdb_container<span class="token punctuation">(</span>site_url<span class="token punctuation">,</span> email_host<span class="token punctuation">,</span> email_port<span class="token punctuation">,</span> email_username<span class="token punctuation">,</span> email_password<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"完成！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决docker 容器内访问宿主机“No route to host”的问题</title>
      <link href="/jie-jue-docker-rong-qi-nei-fang-wen-su-zhu-ji-no-route-to-host-de-wen-ti/"/>
      <url>/jie-jue-docker-rong-qi-nei-fang-wen-su-zhu-ji-no-route-to-host-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="解决docker-容器内访问宿主机“No-route-to-host”的问题"><a href="#解决docker-容器内访问宿主机“No-route-to-host”的问题" class="headerlink" title="解决docker 容器内访问宿主机“No route to host”的问题"></a>解决docker 容器内访问宿主机“No route to host”的问题</h1><p>请顺序运行以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">nmcli connection modify docker0 connection.zone trustedsystemctl stop NetworkManager.servicefirewall-cmd --permanent --zone<span class="token operator">=</span>trusted --change-interface<span class="token operator">=</span>docker0systemctl start NetworkManager.servicenmcli connection modify docker0 connection.zone trustedsystemctl restart docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定义js.map文件只允许内网或者指定IP访问</title>
      <link href="/ding-yi-js-map-wen-jian-zhi-yun-xu-nei-wang-huo-zhe-zhi-ding-ip-fang-wen/"/>
      <url>/ding-yi-js-map-wen-jian-zhi-yun-xu-nei-wang-huo-zhe-zhi-ding-ip-fang-wen/</url>
      
        <content type="html"><![CDATA[<h4 id="案例配置："><a href="#案例配置：" class="headerlink" title="案例配置："></a>案例配置：</h4><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">443</span><span class="token punctuation">;</span>        <span class="token keyword">server_name</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token punctuation">;</span>        <span class="token keyword">ssl</span> on<span class="token punctuation">;</span>        <span class="token keyword">ssl_certificate</span>   sslkey<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>        <span class="token keyword">ssl_certificate_key</span>  sslkey<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token punctuation">.</span>key<span class="token punctuation">;</span>        <span class="token keyword">ssl_session_timeout</span> 5m<span class="token punctuation">;</span>        <span class="token keyword">ssl_protocols</span> TLSv1 TLSv1<span class="token number">.1</span> TLSv1<span class="token number">.2</span><span class="token punctuation">;</span>        <span class="token keyword">ssl_ciphers</span> AESGCM<span class="token punctuation">:</span>ALL<span class="token punctuation">:</span><span class="token operator">!</span>DH<span class="token punctuation">:</span><span class="token operator">!</span>EXPORT<span class="token punctuation">:</span><span class="token operator">!</span>RC4<span class="token punctuation">:</span><span class="token operator">+</span>HIGH<span class="token punctuation">:</span><span class="token operator">!</span>MEDIUM<span class="token punctuation">:</span><span class="token operator">!</span>LOW<span class="token punctuation">:</span><span class="token operator">!</span>aNULL<span class="token punctuation">:</span><span class="token operator">!</span>eNULL<span class="token punctuation">;</span>        <span class="token keyword">ssl_prefer_server_ciphers</span> on<span class="token punctuation">;</span>        <span class="token keyword">include</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>        <span class="token keyword">location</span>  <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span> <span class="token punctuation">{</span>                <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>                <span class="token keyword">alias</span> <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token punctuation">;</span>                <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">#判断是否是静态文件，如果是静态文件则不缓存</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request_filename</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>htm<span class="token operator">|</span>html<span class="token punctuation">)</span>$<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                <span class="token keyword">add_header</span> Cache<span class="token operator">-</span>Control <span class="token string">"no-cache, no-store"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">#匹配访问js.map文件的访问权限</span>            <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>js<span class="token punctuation">.</span><span class="token keyword">map</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token punctuation">{</span>                    <span class="token keyword">set_real_ip_from</span> <span class="token punctuation">{</span>your IP<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#定义可以访问的源IP</span>                    <span class="token keyword">real_ip_header</span>    X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#表示从哪个header属性中获取真实IP</span>                    real_ip_recursive on<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#递归检索真实IP，若从 X-Forwarded-For 中获取，则需递归检索；若像从X-Real-IP中获取，则无需递归。</span>                    <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$remote_addr</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#$remote_addr 是客户端真实IP</span>                    <span class="token comment" spellcheck="true">#判断访问源IP如果不是{your IP}则返回403</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$remote_addr</span> <span class="token operator">!=</span> your IP<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token number">403</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">#定义proxy1日志输出路径</span>                    <span class="token keyword">access_log</span> <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>log proxy1<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span>favicon<span class="token punctuation">.</span>ico <span class="token punctuation">{</span>            <span class="token keyword">log_not_found</span> off<span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token keyword">access_log</span>  <span class="token operator">/</span>data<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token punctuation">.</span>log  access<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token keyword">server_name</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">307</span> <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token variable">$host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bat脚本编写</title>
      <link href="/bat-jiao-ben-bian-xie/"/>
      <url>/bat-jiao-ben-bian-xie/</url>
      
        <content type="html"><![CDATA[<h1 id="强制获取管理员运行权限"><a href="#强制获取管理员运行权限" class="headerlink" title="强制获取管理员运行权限"></a>强制获取管理员运行权限</h1><pre><code>%1 mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;cmd.exe&quot;,&quot;/c %~s0 ::&quot;,&quot;&quot;,&quot;runas&quot;,1)(window.close)&amp;&amp;exit</code></pre><h3 id="释放IP及重新获取IP"><a href="#释放IP及重新获取IP" class="headerlink" title="释放IP及重新获取IP"></a>释放IP及重新获取IP</h3><pre class="line-numbers language-bat"><code class="language-bat">@echo off%1 mshta vbscript:CreateObject("Shell.Application").ShellExecute("cmd.exe","/c %~s0 ::","","runas",1)(window.close)&&exitecho connect release toolsipconfig /releaseecho connection has been releasedecho please waitingecho connect renew toolsipconfig /renewecho connection has been renewpause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="win7-关闭防火墙"><a href="#win7-关闭防火墙" class="headerlink" title="win7 关闭防火墙"></a>win7 关闭防火墙</h3><pre class="line-numbers language-bat"><code class="language-bat">@echo off(net start|find "Windows Firewall" >nul)&&(net stop MpsSvc>nul&sc config MpsSvc start= disabled>nul)||((sc qc mpssvc|find /i "START_TYPE"|find /i "DISABLED">nul)||sc config MpsSvc start= disabled>nul)echo 完成！&pause>nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="win10-关闭防火墙"><a href="#win10-关闭防火墙" class="headerlink" title="win10 关闭防火墙"></a>win10 关闭防火墙</h3><pre class="line-numbers language-bat"><code class="language-bat">@echo off%1 mshta vbscript:CreateObject("Shell.Application").ShellExecute("cmd.exe","/c %~s0 ::","","runas",1)(window.close)&&exitreg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender" /v "DisableAntiSpyware" /d 1 /t REG_DWORDnetsh firewall set opmode mode = disableecho 完成！&pause>nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>### </p><pre class="line-numbers language-bat"><code class="language-bat">@echo off%1 mshta vbscript:CreateObject("Shell.Application").ShellExecute("cmd.exe","/c %~s0 ::","","runas",1)(window.close)&&exitnetsh firewall set opmode mode = enableecho 完成！&pause>nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker run -m指定内存大小不生效</title>
      <link href="/docker-run-m-zhi-ding-nei-cun-da-xiao-bu-sheng-xiao/"/>
      <url>/docker-run-m-zhi-ding-nei-cun-da-xiao-bu-sheng-xiao/</url>
      
        <content type="html"><![CDATA[<pre><code>GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet&quot;</code></pre><p>执行docker run的时候，想要指定一下内存大小，用了-m参数，报错如下</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#docker run -id -m 3g -p 7001:7001 197.3.16.51/sysmgr/mywebapptest_app_weblogic:20180820047</span>WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.52380a4896f3f916cd0f95f97e233b30d9406840e10c0c53484b3be9000d0321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后发现虽然我设置堆大小为5G，容器还是创建出来了，3g的限制并没有生效。</p><p>查阅资料发现这个报错是因为宿主机内核的相关功能没有打开。按照下面的设置就行。</p><p>step 1：编辑/etc/default/grub文件<br>将GRUB_CMDLINE_LINUX一行改为</p><pre><code>GRUB_CMDLINE_LINUX=&quot;cgroup_enable=memory swapaccount=1&quot;</code></pre><p>step 2：更新 GRUB，即执行$ </p><pre><code>sudo update-grub</code></pre><p>step 3: 重启系统。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用普罗米修斯监控ecs</title>
      <link href="/li-yong-pu-luo-mi-xiu-si-jian-kong-ecs/"/>
      <url>/li-yong-pu-luo-mi-xiu-si-jian-kong-ecs/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29717271&auto=1&height=66"></iframe></div><p>利用脚本部署node_exporter</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#wget https://github.com/prometheus/node_exporter/releases/download/v0.17.0/node_exporter-0.17.0.linux-amd64.tar.gz</span><span class="token function">rsync</span> -avPLl helen@172.16.6.86:/Users/helen/hoo-pro/hoo-PRO/software/prometheus/node_exporter-0.17.0.linux-amd64.tar.gz ./<span class="token function">tar</span> zxf node_exporter-0.17.0.linux-amd64.tar.gz<span class="token function">mv</span> node_exporter-0.17.0.linux-amd64 /usr/local/node_exporter<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>EOF <span class="token operator">></span>/usr/lib/systemd/system/node_exporter.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>https://prometheus.io<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Restart<span class="token operator">=</span>on-failureExecStart<span class="token operator">=</span>/usr/local/node_exporter/node_exporter --collector.systemd --collector.systemd.unit-whitelist<span class="token operator">=</span><span class="token punctuation">(</span>docker<span class="token operator">|</span>kubelet<span class="token operator">|</span>kube-proxy<span class="token operator">|</span>flanneld<span class="token punctuation">)</span>.service<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.targetEOFsystemctl daemon-reloadsystemctl <span class="token function">enable</span> node_exportersystemctl restart node_exporter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要被普罗米修斯监控的ecs上执行此脚本</p><pre><code>bash node_exporter.sh</code></pre><p>然后修改prometheus.yml文件</p><pre class="line-numbers language-yml"><code class="language-yml"># my global configglobal:  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.  # scrape_timeout is set to the global default (10s).# Alertmanager configurationalerting:  alertmanagers:  - static_configs:    - targets:      # - alertmanager:9093# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.rule_files:  # - "first_rules.yml"  # - "second_rules.yml"# A scrape configuration containing exactly one endpoint to scrape:# Here it's Prometheus itself.scrape_configs:  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.  - job_name: 'prometheus'    # metrics_path defaults to '/metrics'    # scheme defaults to 'http'.    static_configs:    - targets: ['localhost:9090','10.10.249.59:9100','10.10.249.60:9100','192.168.1.35:8080','192.168.1.35:9100','10.10.249.55:9100']    #  labels:    #    instance: k8s-node01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改完成，重启普罗米修斯；</p>]]></content>
      
      
      <categories>
          
          <category> monitor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> monitor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose build seafile</title>
      <link href="/docker-compose-build-seafile/"/>
      <url>/docker-compose-build-seafile/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29717271&auto=1&height=66"></iframe></div><p>利用docker-compose部署<br>以下是官方给出的安装方法，详情见<a href="https://docs.seafile.com/published/seafile-manual-cn/extension/fuse.md" target="_blank" rel="noopener">官网</a></p><p>见yml文件</p><pre class="line-numbers language-yml"><code class="language-yml">version: '2.0'services:  db:    image: mariadb:10.1    container_name: seafile-mysql    environment:      - MYSQL_ROOT_PASSWORD=*****      # Requested, set the root's password of MySQL service.      - MYSQL_LOG_CONSOLE=true    volumes:      - /XXXXX/seafile/data/mysql:/var/lib/mysql      # Requested, specifies the path to MySQL data persistent store.    networks:      - seafile-net  memcached:    image: memcached:1.5.6    container_name: seafile-memcached    entrypoint: memcached -m 256    networks:      - seafile-net  seafile:    image: seafileltd/seafile-mc:latest    container_name: seafile    ports:      - "80:80"#      - "443:443"  # If https is enabled, cancel the comment.    volumes:      - /XXXX/seafile/data/seafile-data:/shared      # Requested, specifies the path to Seafile data persistent store.    environment:      - DB_HOST=db      - DB_ROOT_PASSWD=****      # Requested, the value shuold be root's password of MySQL service.#      - TIME_ZONE=Asia/Shanghai# Optional, default is UTC. Should be uncomment and set to your local time zone.      - SEAFILE_ADMIN_EMAIL=huyuhao@xiongmaocar.com      # Specifies Seafile admin user, default is 'me@example.com'.      - SEAFILE_ADMIN_PASSWORD=*****      # Specifies Seafile admin password, default is 'asecret'.      - SEAFILE_SERVER_LETSENCRYPT=false      # Whether use letsencrypt to generate cert.      - SEAFILE_SERVER_HOSTNAME=seafile.xiongmaocar.com      # Specifies your host name.    depends_on:      - db      - memcached    networks:      - seafile-netnetworks:  seafile-net:%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
